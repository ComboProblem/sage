/* Generated by Cython 3.0.10 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/tmp/pip-build-env-6nke9u78/overlay/lib/python3.10/site-packages/gmpy2/gmp.h",
            "/tmp/pip-build-env-6nke9u78/overlay/lib/python3.10/site-packages/gmpy2/gmpy2.h",
            "/tmp/pip-build-env-6nke9u78/overlay/lib/python3.10/site-packages/gmpy2/mpc.h",
            "/tmp/pip-build-env-6nke9u78/overlay/lib/python3.10/site-packages/gmpy2/mpfr.h"
        ],
        "include_dirs": [
            "/tmp/pip-build-env-6nke9u78/overlay/lib/python3.10/site-packages/gmpy2"
        ],
        "language": "c++",
        "libraries": [
            "gmp",
            "gmpxx",
            "pplite",
            "m",
            "flint"
        ],
        "name": "pplite.linear_algebra",
        "sources": [
            "pplite/linear_algebra.pyx"
        ]
    },
    "module_name": "pplite.linear_algebra"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_10" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000AF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__pplite__linear_algebra
#define __PYX_HAVE_API__pplite__linear_algebra
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "gmp.h"
#include "mpfr.h"
#include "mpc.h"
#include "gmpy2.h"
#include "gmpxx.h"
#include "flint/fmpz.h"
#include "flint/fmpq.h"
#include "pplite/pplite.hh"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "pplite/linear_algebra.pyx",
  "gmpy2.pxd",
  "<stringsource>",
  "pplite/constraint.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* EnumClassDecl.proto */
#if defined (_MSC_VER)
  #if _MSC_VER >= 1910
    #define __PYX_ENUM_CLASS_DECL enum
  #else
    #define __PYX_ENUM_CLASS_DECL
  #endif
#else
  #define __PYX_ENUM_CLASS_DECL enum
#endif

/* #### Code section: numeric_typedefs ### */

/* "pplite_decl.pxd":28
 *         mpz_class operator%(mpz_class, mpz_class)
 * 
 * ctypedef mp_limb_t ulong             # <<<<<<<<<<<<<<
 * ctypedef mp_limb_signed_t slong
 * 
 */
typedef mp_limb_t __pyx_t_6pplite_11pplite_decl_ulong;

/* "pplite_decl.pxd":29
 * 
 * ctypedef mp_limb_t ulong
 * ctypedef mp_limb_signed_t slong             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "flint/fmpz.h":
 */
typedef mp_limb_signed_t __pyx_t_6pplite_11pplite_decl_slong;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_6pplite_10constraint_Constraint;
struct __pyx_obj_6pplite_14linear_algebra_Variable;
struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression;
struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression;

/* "constraint.pxd":10
 * 	cdef Con *thisptr
 * 
 * cdef enum ConType:             # <<<<<<<<<<<<<<
 * 	EQUALITY
 * 	NONSTRICT_INEQUALITY
 */
enum __pyx_t_6pplite_10constraint_ConType {
  __pyx_e_6pplite_10constraint_EQUALITY,
  __pyx_e_6pplite_10constraint_NONSTRICT_INEQUALITY,
  __pyx_e_6pplite_10constraint_STRICT_INEQUALITY
};

/* "constraint.pxd":7
 * cdef _make_Constraint_from_richcmp(lhs_, rhs_, op)
 * 
 * cdef class Constraint(object):             # <<<<<<<<<<<<<<
 * 	cdef Con *thisptr
 * 
 */
struct __pyx_obj_6pplite_10constraint_Constraint {
  PyObject_HEAD
  pplite::Con *thisptr;
};


/* "pplite/linear_algebra.pxd":5
 * from .pplite_decl cimport *
 * 
 * cdef class Variable:             # <<<<<<<<<<<<<<
 *     cdef Var *thisptr
 * 
 */
struct __pyx_obj_6pplite_14linear_algebra_Variable {
  PyObject_HEAD
  pplite::Var *thisptr;
};


/* "pplite/linear_algebra.pxd":8
 *     cdef Var *thisptr
 * 
 * cdef class Linear_Expression:             # <<<<<<<<<<<<<<
 *     cdef Linear_Expr *thisptr
 * 
 */
struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression {
  PyObject_HEAD
  pplite::Linear_Expr *thisptr;
};


/* "pplite/linear_algebra.pxd":11
 *     cdef Linear_Expr *thisptr
 * 
 * cdef class Affine_Expression:             # <<<<<<<<<<<<<<
 *     cdef Affine_Expr *thisptr
 */
struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression {
  PyObject_HEAD
  pplite::Affine_Expr *thisptr;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_10
#define __PYX_HAVE_RT_ImportType_proto_3_0_10
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_10(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_10(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_10 {
   __Pyx_ImportType_CheckSize_Error_3_0_10 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_10 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_10 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_10(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_10 check_size);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE mp_limb_signed_t __Pyx_PyInt_As_mp_limb_signed_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_10(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "gmpy2" */

/* Module declarations from "gmpy2.gmpy2" */
static CYTHON_INLINE MPZ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPZ_From_mpz(mpz_srcptr); /*proto*/

/* Module declarations from "gmpy2" */

/* Module declarations from "pplite.pplite_decl" */

/* Module declarations from "cython" */

/* Module declarations from "pplite.constraint" */
static PyObject *(*__pyx_f_6pplite_10constraint__make_Constraint_from_richcmp)(PyObject *, PyObject *, PyObject *); /*proto*/

/* Module declarations from "pplite.linear_algebra" */
static PyObject *__pyx_f_6pplite_14linear_algebra_FLINT_Integer_to_Python(pplite::FLINT_Integer &); /*proto*/
static pplite::FLINT_Integer __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "pplite.linear_algebra"
extern int __pyx_module_is_main_pplite__linear_algebra;
int __pyx_module_is_main_pplite__linear_algebra = 0;

/* Implementation of "pplite.linear_algebra" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_range;
/* #### Code section: string_decls ### */
static const char __pyx_k_0[] = "0";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_r[] = "%r";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__6[] = "";
static const char __pyx_k__7[] = "*";
static const char __pyx_k_ee[] = "ee";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_ii[] = "ii";
static const char __pyx_k_nn[] = "nn";
static const char __pyx_k_v1[] = "v1";
static const char __pyx_k_v2[] = "v2";
static const char __pyx_k_vv[] = "vv";
static const char __pyx_k__50[] = "?";
static const char __pyx_k_d_2[] = "%d";
static const char __pyx_k_d_3[] = "%+d";
static const char __pyx_k_d_r[] = "%+d*%r";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_r_2[] = "-%r";
static const char __pyx_k_r_3[] = "+%r";
static const char __pyx_k_vv1[] = "vv1";
static const char __pyx_k_vv2[] = "vv2";
static const char __pyx_k_x_0[] = "x{0}";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_swap[] = "swap";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_var_1[] = "var_1";
static const char __pyx_k_var_2[] = "var_2";
static const char __pyx_k_var_i[] = "var_i";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_m_swap[] = "m_swap";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_Variable[] = "Variable";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_Variable_id[] = "Variable.id";
static const char __pyx_k_coefficient[] = "coefficient";
static const char __pyx_k_is_equal_to[] = "is_equal_to";
static const char __pyx_k_linear_form[] = "linear_form";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_Variable_swap[] = "Variable.swap";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_sign_normalize[] = "sign_normalize";
static const char __pyx_k_set_coefficient[] = "set_coefficient";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_space_dimension[] = "space_dimension";
static const char __pyx_k_Affine_Expression[] = "Affine_Expression";
static const char __pyx_k_Linear_Expression[] = "Linear_Expression";
static const char __pyx_k_all_terms_are_zero[] = "all_terms_are_zero";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_inhomogeneous_term[] = "inhomogeneous_term";
static const char __pyx_k_Variable_unhashable[] = "Variable unhashable";
static const char __pyx_k_set_space_dimension[] = "set_space_dimension";
static const char __pyx_k_Variable_id_line_111[] = "Variable.id (line 111)";
static const char __pyx_k_pplite_linear_algebra[] = "pplite.linear_algebra";
static const char __pyx_k_swap_space_dimensions[] = "swap_space_dimensions";
static const char __pyx_k_shift_space_dimensions[] = "shift_space_dimensions";
static const char __pyx_k_Affine_Expression_m_swap[] = "Affine_Expression.m_swap";
static const char __pyx_k_Variable___reduce_cython[] = "Variable.__reduce_cython__";
static const char __pyx_k_Variable_space_dimension[] = "Variable.space_dimension";
static const char __pyx_k_Integer_Conversion_Failed[] = "Integer Conversion Failed";
static const char __pyx_k_Variable___add___line_164[] = "Variable.__add__ (line 164)";
static const char __pyx_k_Variable___hash___line_99[] = "Variable.__hash__ (line 99)";
static const char __pyx_k_Variable___mul___line_255[] = "Variable.__mul__ (line 255)";
static const char __pyx_k_Variable___neg___line_314[] = "Variable.__neg__ (line 314)";
static const char __pyx_k_Variable___pos___line_296[] = "Variable.__pos__ (line 296)";
static const char __pyx_k_Variable___sub___line_214[] = "Variable.__sub__ (line 214)";
static const char __pyx_k_pplite_linear_algebra_pyx[] = "pplite/linear_algebra.pyx";
static const char __pyx_k_Variable___repr___line_147[] = "Variable.__repr__ (line 147)";
static const char __pyx_k_Variable___setstate_cython[] = "Variable.__setstate_cython__";
static const char __pyx_k_Affine_Expression_normalize[] = "Affine_Expression.normalize";
static const char __pyx_k_Affine_Expression_unhashable[] = "Affine_Expression unhashable";
static const char __pyx_k_Linear_Expression_unhashable[] = "Linear_Expression unhashable";
static const char __pyx_k_Affine_Expression_coefficient[] = "Affine_Expression.coefficient";
static const char __pyx_k_Affine_Expression_is_equal_to[] = "Affine_Expression.is_equal_to";
static const char __pyx_k_Affine_Expression_linear_form[] = "Affine_Expression.linear_form";
static const char __pyx_k_Linear_Expression_coefficient[] = "Linear_Expression.coefficient";
static const char __pyx_k_Linear_Expression_is_equal_to[] = "Linear_Expression.is_equal_to";
static const char __pyx_k_Multiply_self_with_other_INPUT[] = "\n        Multiply ``self`` with ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Linear_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Linear_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The product as a :class:`Linear_Expression`\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> 8 * (x)\n        8*x0\n        >>> y * 8\n        8*x1\n        ";
static const char __pyx_k_Return_a_string_representation[] = "\n        Return a string representation.\n\n        OUTPUT:\n\n        String.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> x.__repr__()\n        'x0'\n        ";
static const char __pyx_k_Returns_the_linear_form_of_the[] = "\n        Returns the linear form of the affine expression.\n\n        OUTPUT:\n\n        :class:`Linear_Expression`\n\n        Examples:\n        >>> from pplite import Variable, Affine_Expression\n        >>> e = Variable(2) - 3*Variable(4)\n        >>> a = Affine_Expression(e, 7); a\n        x2-3*x4+7\n        >>> a.linear_form()\n        x2-3*x4\n        ";
static const char __pyx_k_Shift_by_n_the_coefficients_of[] = "\n        Shift by ``n`` the coefficients of variables starting from the\n        coefficient of ``v``.\n\n        This increases the space dimension by ``n``.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L = Variable(0) + 13 * Variable(2) + 5 * Variable(7)\n        >>> L\n        x0+13*x2+5*x7\n        >>> L.shift_space_dimensions(Variable(2), 2)\n        >>> L\n        x0+13*x4+5*x9\n        >>> L.shift_space_dimensions(Variable(7), 3)\n        >>> L\n        x0+13*x4+5*x12\n        ";
static const char __pyx_k_all_homogeneous_terms_are_zero[] = "all_homogeneous_terms_are_zero";
static const char __pyx_k_Add_self_and_other_INPUT_self_o[] = "\n        Add ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Linear_Expression` or :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Linear_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Linear_Expression` or :class:`Affine_Expression` depending on input.\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x + y + y + y\n        x0+3*x1\n        >>> e = x + y + x\n        >>> isinstance(e, Linear_Expression)\n        True\n        >>> e2 = 7 + e; e2\n        2*x0+x1+7\n        >>> isinstance(e2, Linear_Expression)\n        False\n        >>> isinstance(e2, Affine_Expression)\n        True\n        >>> e + 7\n        2*x0+x1+7\n        >>> e + Variable(0)\n        3*x0+x1\n        >>> Variable(1) + e\n        2*x0+2*x1\n        >>> e3 = e + e2; e3\n        4*x0+2*x1+7\n        >>> isinstance(e3, Affine_Expression)\n        True\n        ";
static const char __pyx_k_Affine_Expression___hash___line[] = "Affine_Expression.__hash__ (line 1103)";
static const char __pyx_k_Affine_Expression___repr___line[] = "Affine_Expression.__repr__ (line 1197)";
static const char __pyx_k_Affine_Expression_all_terms_are[] = "Affine_Expression.all_terms_are_zero";
static const char __pyx_k_Affine_Expression_inhomogeneous[] = "Affine_Expression.inhomogeneous_term";
static const char __pyx_k_Linear_Expression___hash___line[] = "Linear_Expression.__hash__ (line 486)";
static const char __pyx_k_Linear_Expression___repr___line[] = "Linear_Expression.__repr__ (line 588)";
static const char __pyx_k_Return_self_as_class_Linear_Exp[] = "\n        Return ``self`` as :class:`Linear_Expression`\n\n        OUTPUT:\n\n        The :class:`Linear_Expression` ``+self``\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0); x\n        x0\n        >>> +x\n        x0\n        ";
static const char __pyx_k_Return_the_coefficient_of_the_v[] = "\n        Return the coefficient of the variable ``v``.\n\n        INPUT:\n\n        - ``v`` -- a :class:`Variable`.\n\n        OUTPUT:\n\n        An (Python) Integer. \n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> e = 3*x\n        >>> e.coefficient(x)\n        mpz(3)\n        ";
static const char __pyx_k_Return_the_difference_self_othe[] = "\n        Return the difference ``self`` - ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything convertible to\n          ``Linear_Expression``: An integer, a :class:`Variable`, or a\n          :class:`Linear_Expression`.\n\n        OUTPUT:\n\n        A :class:`Linear_Expression` representing ``self`` - ``other``.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0); y = Variable(1)\n        >>> x - y\n        x0-x1\n        ";
static const char __pyx_k_Return_the_dimension_of_the_vec[] = "\n        Return the dimension of the vector space enclosing ``self``.\n\n        OUTPUT:\n\n        Integer. The returned value is ``self.id()+1``.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> x.space_dimension()\n        1\n        ";
static const char __pyx_k_Return_the_index_of_the_Cartesi[] = "\n        Return the index of the Cartesian axis associated to the variable.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(123)\n        >>> x.id()\n        123\n        ";
static const char __pyx_k_Return_the_product_self_other_I[] = "\n        Return the product ``self`` * ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- One must be an integer, the other a\n          :class:`Variable`.\n\n        OUTPUT:\n\n        A :class:`Linear_Expression` representing ``self`` * ``other``.\n\n        Examples:\n\n        >>> from pplite import Variable, Linear_Expression\n        >>> x = Variable(0); y = Variable(1)\n        >>> x * 15\n        15*x0\n        >>> e = 15 * y; e\n        15*x1\n        >>> isinstance(e, Linear_Expression)\n        True\n        ";
static const char __pyx_k_Return_the_sum_self_other_INPUT[] = "\n        Return the sum ``self`` + ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything convertible to\n          ``Affine_Expression``: An integer, a :class:`Variable`,\n          :class:`Linear_Expression`, or :class`Affine_Expression`.\n\n        OUTPUT:\n\n        A :class:`Linear_Expression` or an .\n\n        Examples:\n\n        >>> from pplite import Variable, Linear_Expression, Affine_Expression\n        >>> x = Variable(0);\n        >>> y = Variable(1)\n        >>> x + y\n        x0+x1\n        >>> isinstance(x+y, Linear_Expression)\n        True\n        >>> isinstance(x+y, Affine_Expression)\n        False\n        ";
static const char __pyx_k_Returns_the_inhogogenous_term_o[] = "\n        Returns the inhogogenous term of an affine expression.\n\n        OUTPUT:\n\n        Integer.\n\n        Examples:\n\n        >>> from pplite import Variable, Affine_Expression\n        >>> e = Variable(2) - 3*Variable(4)\n        >>> a = Affine_Expression(e, 7); a\n        x2-3*x4+7\n        >>> a.inhomogeneous_term()\n        mpz(7)          \n        ";
static const char __pyx_k_Set_the_i_th_coefficient_to_n_I[] = "\n        Set the ``i``-th coefficient to ``n``.\n\n        INPUT:\n\n        - ``i`` - variable or variable index\n\n        - ``n`` - integer\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L = Variable(0) + (3 * Variable(1)); L\n        x0+3*x1\n        >>> L.set_coefficient(1, -5)\n        >>> L\n        x0-5*x1\n        >>> L.set_coefficient(3, 7); L\n        x0-5*x1+7*x3\n        ";
static const char __pyx_k_Subtract_self_and_other_INPUT_s[] = "\n        Subtract ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Linear_Expression` or :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Linear_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Linear_Expression` or :class:`Affine_Expression` depending on input.\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x - y + y + y\n        x0+x1\n        >>> e = y - x + y - x; e\n        -2*x0+2*x1\n        >>> isinstance(e, Linear_Expression)\n        True\n        >>> e - e\n        0\n        >>> e1 = y - x\n        >>> e1 - e\n        x0-x1\n        >>> e2 = e - 7; e2\n        -2*x0+2*x1-7\n        >>> e3 = 7 - e; e3\n        2*x0-2*x1+7\n        >>> isinstance(e3, Linear_Expression)\n        False\n        >>> isinstance(e3, Affine_Expression)\n        True\n        ";
static const char __pyx_k_Swaps_the_coefficients_of_v1_an[] = "\n        Swaps the coefficients of ``v1`` and ``v2``.\n\n        INPUT:\n\n        - ``v1``, ``v2`` - variables or indices of variables\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L = Variable(1) - 3 * Variable(3); L\n        x1-3*x3\n        >>> L.swap_space_dimensions(Variable(1), Variable(3))\n        >>> L\n        -3*x1+x3\n        >>> L = Variable(1) - 3 * Variable(3)\n        >>> L.swap_space_dimensions(1, 3)\n        >>> L\n        -3*x1+x3\n        ";
static const char __pyx_k_Test_equality_with_another_line[] = "\n        Test equality with another linear expression.\n\n        OUTPUT: boolean\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L1 = Variable(0) + 2 * Variable(3)\n        >>> L2 = Variable(0) + 2 * Variable(3)\n        >>> L3 = Variable(0) - Variable(2)\n        >>> L1.is_equal_to(L2)\n        True\n        >>> L1.is_equal_to(L3)\n        False\n        ";
static const char __pyx_k_Test_if_self_is_a_constant_line[] = "\n        Test if ``self`` is a constant linear expression.\n\n        OUTPUT:\n\n        Boolean.\n\n        Examples:\n\n        >>> from pplite import Variable, Linear_Expression\n        >>> x = Variable(1)\n        >>> (x-x).all_homogeneous_terms_are_zero()\n        True\n        ";
static const char __pyx_k_Tests_import_pplite_hash_pplite[] = "\n        Tests:\n\n        >>> import pplite\n        >>> hash(pplite.Variable(12))\n        Traceback (most recent call last):\n        ...\n        TypeError: Variable unhashable\n        ";
static const char __pyx_k_Affine_Expression___add___line_1[] = "Affine_Expression.__add__ (line 1288)";
static const char __pyx_k_Affine_Expression___reduce_cytho[] = "Affine_Expression.__reduce_cython__";
static const char __pyx_k_Affine_Expression___setstate_cyt[] = "Affine_Expression.__setstate_cython__";
static const char __pyx_k_Affine_Expression___sub___line_1[] = "Affine_Expression.__sub__ (line 1365)";
static const char __pyx_k_Affine_Expression_coefficient_li[] = "Affine_Expression.coefficient (line 1175)";
static const char __pyx_k_Affine_Expression_linear_form_li[] = "Affine_Expression.linear_form (line 1132)";
static const char __pyx_k_Affine_Expression_sign_normalize[] = "Affine_Expression.sign_normalize";
static const char __pyx_k_Affine_Expression_space_dimensio[] = "Affine_Expression.space_dimension";
static const char __pyx_k_Cannot_initialize_with_more_than[] = "Cannot initialize with more than 2 arguments.";
static const char __pyx_k_Initalizing_with_one_argument_re[] = "Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.";
static const char __pyx_k_Linear_Expression___add___line_7[] = "Linear_Expression.__add__ (line 749)";
static const char __pyx_k_Linear_Expression___mul___line_9[] = "Linear_Expression.__mul__ (line 918)";
static const char __pyx_k_Linear_Expression___reduce_cytho[] = "Linear_Expression.__reduce_cython__";
static const char __pyx_k_Linear_Expression___setstate_cyt[] = "Linear_Expression.__setstate_cython__";
static const char __pyx_k_Linear_Expression___sub___line_8[] = "Linear_Expression.__sub__ (line 824)";
static const char __pyx_k_Linear_Expression_all_homogeneou[] = "Linear_Expression.all_homogeneous_terms_are_zero";
static const char __pyx_k_Linear_Expression_coefficient_li[] = "Linear_Expression.coefficient (line 528)";
static const char __pyx_k_Linear_Expression_is_equal_to_li[] = "Linear_Expression.is_equal_to (line 730)";
static const char __pyx_k_Linear_Expression_set_coefficien[] = "Linear_Expression.set_coefficient";
static const char __pyx_k_Linear_Expression_set_space_dime[] = "Linear_Expression.set_space_dimension";
static const char __pyx_k_Linear_Expression_shift_space_di[] = "Linear_Expression.shift_space_dimensions";
static const char __pyx_k_Linear_Expression_space_dimensio[] = "Linear_Expression.space_dimension";
static const char __pyx_k_Linear_Expression_swap_space_dim[] = "Linear_Expression.swap_space_dimensions";
static const char __pyx_k_Return_a_string_representation_2[] = "\n        Return a string representation of the linear expression.\n\n        OUTPUT:\n\n        A string.\n\n        Examples:\n\n        >>> from pplite import Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x\n        x0\n        >>> x-x\n        0\n        >>> 2*x\n        2*x0\n        ";
static const char __pyx_k_Variable_space_dimension_line_12[] = "Variable.space_dimension (line 124)";
static const char __pyx_k_We_done_goofed_no_acceptable_inp[] = "We done goofed, no acceptable input here";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static const char __pyx_k_Add_self_and_other_INPUT_self_o_2[] = "\n        Add ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Affine_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Affine_Expression`\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> a = x + y + y + y + 1; a\n        x0+3*x1+1\n        >>> a.inhomogeneous_term()\n        mpz(1)\n        >>> a + a\n        2*x0+6*x1+2         \n        >>> 12 + a\n        x0+3*x1+13\n        >>> a + Variable(2)\n        x0+3*x1+x2+1\n        >>> a.linear_form()\n        x0+3*x1\n        >>> a.linear_form()+ a.inhomogeneous_term()\n        x0+3*x1+1\n        ";
static const char __pyx_k_Affine_Expression_inhomogeneous_2[] = "Affine_Expression.inhomogeneous_term (line 1154)";
static const char __pyx_k_Return_self_as_class_Linear_Exp_2[] = "\n        Return -``self`` as :class:`Linear_Expression`\n\n        OUTPUT:\n\n        The :class:`Linear_Expression` ``-self``\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0); x\n        x0\n        >>> -x\n        -x0\n        ";
static const char __pyx_k_Return_the_coefficient_of_the_v_2[] = "\n        Return the coefficient of the variable ``v``.\n\n        INPUT:\n\n        - ``v`` -- a :class:`Variable`.\n\n        OUTPUT:\n\n        An Integer. \n\n        Examples:\n\n        >>> from pplite import Variable, Affine_Expression\n        >>> e = Variable(2) - 3*Variable(4)\n        >>> a = Affine_Expression(e, 7)\n        >>> a.coefficient(Variable(2))\n        mpz(1)\n        ";
static const char __pyx_k_Return_the_dimension_of_the_vec_2[] = "\n        Return the dimension of the vector space necessary for the\n        linear expression.\n\n        OUTPUT:\n\n        Integer.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> (x+y).space_dimension()\n        2\n        >>> (x+y).space_dimension()\n        2\n        >>> (y).space_dimension()\n        2\n        >>> (x).space_dimension()\n        1\n        >>> (y-y).space_dimension()\n        2\n        ";
static const char __pyx_k_Return_the_dimension_of_the_vec_3[] = "\n        Return the dimension of the vector space necessary for the\n        linear expression.\n\n        OUTPUT:\n\n        Integer.\n\n        Examples:\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> (x+y+1).space_dimension()\n        2\n        ";
static const char __pyx_k_Subtract_self_and_other_INPUT_s_2[] = "\n        Subtract ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Affine_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Affine_Expression`\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> e = x + y + y + y + 1; e\n        x0+3*x1+1\n        >>> e - e\n        0\n        >>> isinstance(e, Affine_Expression)\n        True\n        >>> 12 - e\n        -x0-3*x1+11\n        >>> e - 3 * Variable(3) - 3 * y\n        x0-3*x3+1\n        ";
static const char __pyx_k_Tests_import_pplite_hash_pplite_2[] = "\n        Tests:\n\n        >>> import pplite\n        >>> hash(pplite.Linear_Expression(10))\n        Traceback (most recent call last):\n        ...\n        TypeError: Linear_Expression unhashable\n        ";
static const char __pyx_k_Tests_import_pplite_hash_pplite_3[] = "\n        Tests:\n\n        >>> import pplite\n        >>> hash(pplite.Affine_Expression(10))\n        Traceback (most recent call last):\n        TypeError: Affine_Expression unhashable\n        ";
static const char __pyx_k_Affine_Expression_space_dimensio_2[] = "Affine_Expression.space_dimension (line 1114)";
static const char __pyx_k_Initalizing_with_one_argument_re_2[] = "Initalizing with one argument requires either a affine expression or an integer to be passed in.";
static const char __pyx_k_Linear_Expression_all_homogeneou_2[] = "Linear_Expression.all_homogeneous_terms_are_zero (line 713)";
static const char __pyx_k_Linear_Expression_set_coefficien_2[] = "Linear_Expression.set_coefficient (line 558)";
static const char __pyx_k_Linear_Expression_shift_space_di_2[] = "Linear_Expression.shift_space_dimensions (line 668)";
static const char __pyx_k_Linear_Expression_space_dimensio_2[] = "Linear_Expression.space_dimension (line 498)";
static const char __pyx_k_Linear_Expression_swap_space_dim_2[] = "Linear_Expression.swap_space_dimensions (line 634)";
/* #### Code section: decls ### */
static int __pyx_pf_6pplite_14linear_algebra_8Variable___cinit__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, pplite::dim_type __pyx_v_i); /* proto */
static void __pyx_pf_6pplite_14linear_algebra_8Variable_2__dealloc__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6pplite_14linear_algebra_8Variable_4__hash__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_6id(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_8space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_10swap(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_w); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_12__repr__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_14__add__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_16__radd__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_18__sub__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_20__rsub__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_22__mul__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_24__rmul__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_26__pos__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_28__neg__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_30__richcmp__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pplite_14linear_algebra_17Linear_Expression___init__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static void __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_2__dealloc__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_4__hash__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_6space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_8set_space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, pplite::dim_type __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_10coefficient(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_12set_coefficient(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_14__repr__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_16swap_space_dimensions(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_18shift_space_dimensions(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_v, pplite::dim_type __pyx_v_n); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_20all_homogeneous_terms_are_zero(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_22is_equal_to(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_24__add__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_26__radd__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_28__sub__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_30__rsub__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_32__mul__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_34__rmul__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_36__neg__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_38__pos__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_40__richcmp__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pplite_14linear_algebra_17Affine_Expression___init__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static void __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_2__dealloc__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_4__hash__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_6space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_8linear_form(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_10inhomogeneous_term(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_12coefficient(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_14__repr__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_16all_terms_are_zero(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_18is_equal_to(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_20m_swap(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_22normalize(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_24sign_normalize(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_26__add__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_28__radd__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_30__sub__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_32__rsub__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_34__mul__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_36__rmul__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_38__neg__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_40__pos__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_42__richcmp__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_44__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_46__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6pplite_14linear_algebra_Variable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pplite_14linear_algebra_Linear_Expression(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pplite_14linear_algebra_Affine_Expression(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpz;
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpq;
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpfr;
  PyTypeObject *__pyx_ptype_5gmpy2_5gmpy2_mpc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_6pplite_10constraint_Constraint;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_6pplite_14linear_algebra_Variable;
  PyObject *__pyx_type_6pplite_14linear_algebra_Linear_Expression;
  PyObject *__pyx_type_6pplite_14linear_algebra_Affine_Expression;
  #endif
  PyTypeObject *__pyx_ptype_6pplite_14linear_algebra_Variable;
  PyTypeObject *__pyx_ptype_6pplite_14linear_algebra_Linear_Expression;
  PyTypeObject *__pyx_ptype_6pplite_14linear_algebra_Affine_Expression;
  PyObject *__pyx_kp_u_0;
  PyObject *__pyx_kp_u_Add_self_and_other_INPUT_self_o;
  PyObject *__pyx_kp_u_Add_self_and_other_INPUT_self_o_2;
  PyObject *__pyx_n_s_Affine_Expression;
  PyObject *__pyx_kp_u_Affine_Expression___add___line_1;
  PyObject *__pyx_kp_u_Affine_Expression___hash___line;
  PyObject *__pyx_n_s_Affine_Expression___reduce_cytho;
  PyObject *__pyx_kp_u_Affine_Expression___repr___line;
  PyObject *__pyx_n_s_Affine_Expression___setstate_cyt;
  PyObject *__pyx_kp_u_Affine_Expression___sub___line_1;
  PyObject *__pyx_n_s_Affine_Expression_all_terms_are;
  PyObject *__pyx_n_s_Affine_Expression_coefficient;
  PyObject *__pyx_kp_u_Affine_Expression_coefficient_li;
  PyObject *__pyx_n_s_Affine_Expression_inhomogeneous;
  PyObject *__pyx_kp_u_Affine_Expression_inhomogeneous_2;
  PyObject *__pyx_n_s_Affine_Expression_is_equal_to;
  PyObject *__pyx_n_s_Affine_Expression_linear_form;
  PyObject *__pyx_kp_u_Affine_Expression_linear_form_li;
  PyObject *__pyx_n_s_Affine_Expression_m_swap;
  PyObject *__pyx_n_s_Affine_Expression_normalize;
  PyObject *__pyx_n_s_Affine_Expression_sign_normalize;
  PyObject *__pyx_n_s_Affine_Expression_space_dimensio;
  PyObject *__pyx_kp_u_Affine_Expression_space_dimensio_2;
  PyObject *__pyx_kp_u_Affine_Expression_unhashable;
  PyObject *__pyx_kp_u_Cannot_initialize_with_more_than;
  PyObject *__pyx_kp_u_Initalizing_with_one_argument_re;
  PyObject *__pyx_kp_u_Initalizing_with_one_argument_re_2;
  PyObject *__pyx_kp_u_Integer_Conversion_Failed;
  PyObject *__pyx_n_s_Linear_Expression;
  PyObject *__pyx_kp_u_Linear_Expression___add___line_7;
  PyObject *__pyx_kp_u_Linear_Expression___hash___line;
  PyObject *__pyx_kp_u_Linear_Expression___mul___line_9;
  PyObject *__pyx_n_s_Linear_Expression___reduce_cytho;
  PyObject *__pyx_kp_u_Linear_Expression___repr___line;
  PyObject *__pyx_n_s_Linear_Expression___setstate_cyt;
  PyObject *__pyx_kp_u_Linear_Expression___sub___line_8;
  PyObject *__pyx_n_s_Linear_Expression_all_homogeneou;
  PyObject *__pyx_kp_u_Linear_Expression_all_homogeneou_2;
  PyObject *__pyx_n_s_Linear_Expression_coefficient;
  PyObject *__pyx_kp_u_Linear_Expression_coefficient_li;
  PyObject *__pyx_n_s_Linear_Expression_is_equal_to;
  PyObject *__pyx_kp_u_Linear_Expression_is_equal_to_li;
  PyObject *__pyx_n_s_Linear_Expression_set_coefficien;
  PyObject *__pyx_kp_u_Linear_Expression_set_coefficien_2;
  PyObject *__pyx_n_s_Linear_Expression_set_space_dime;
  PyObject *__pyx_n_s_Linear_Expression_shift_space_di;
  PyObject *__pyx_kp_u_Linear_Expression_shift_space_di_2;
  PyObject *__pyx_n_s_Linear_Expression_space_dimensio;
  PyObject *__pyx_kp_u_Linear_Expression_space_dimensio_2;
  PyObject *__pyx_n_s_Linear_Expression_swap_space_dim;
  PyObject *__pyx_kp_u_Linear_Expression_swap_space_dim_2;
  PyObject *__pyx_kp_u_Linear_Expression_unhashable;
  PyObject *__pyx_kp_u_Multiply_self_with_other_INPUT;
  PyObject *__pyx_n_s_NotImplemented;
  PyObject *__pyx_kp_u_Return_a_string_representation;
  PyObject *__pyx_kp_u_Return_a_string_representation_2;
  PyObject *__pyx_kp_u_Return_self_as_class_Linear_Exp;
  PyObject *__pyx_kp_u_Return_self_as_class_Linear_Exp_2;
  PyObject *__pyx_kp_u_Return_the_coefficient_of_the_v;
  PyObject *__pyx_kp_u_Return_the_coefficient_of_the_v_2;
  PyObject *__pyx_kp_u_Return_the_difference_self_othe;
  PyObject *__pyx_kp_u_Return_the_dimension_of_the_vec;
  PyObject *__pyx_kp_u_Return_the_dimension_of_the_vec_2;
  PyObject *__pyx_kp_u_Return_the_dimension_of_the_vec_3;
  PyObject *__pyx_kp_u_Return_the_index_of_the_Cartesi;
  PyObject *__pyx_kp_u_Return_the_product_self_other_I;
  PyObject *__pyx_kp_u_Return_the_sum_self_other_INPUT;
  PyObject *__pyx_kp_u_Returns_the_inhogogenous_term_o;
  PyObject *__pyx_kp_u_Returns_the_linear_form_of_the;
  PyObject *__pyx_kp_u_Set_the_i_th_coefficient_to_n_I;
  PyObject *__pyx_kp_u_Shift_by_n_the_coefficients_of;
  PyObject *__pyx_kp_u_Subtract_self_and_other_INPUT_s;
  PyObject *__pyx_kp_u_Subtract_self_and_other_INPUT_s_2;
  PyObject *__pyx_kp_u_Swaps_the_coefficients_of_v1_an;
  PyObject *__pyx_kp_u_Test_equality_with_another_line;
  PyObject *__pyx_kp_u_Test_if_self_is_a_constant_line;
  PyObject *__pyx_kp_u_Tests_import_pplite_hash_pplite;
  PyObject *__pyx_kp_u_Tests_import_pplite_hash_pplite_2;
  PyObject *__pyx_kp_u_Tests_import_pplite_hash_pplite_3;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_Variable;
  PyObject *__pyx_kp_u_Variable___add___line_164;
  PyObject *__pyx_kp_u_Variable___hash___line_99;
  PyObject *__pyx_kp_u_Variable___mul___line_255;
  PyObject *__pyx_kp_u_Variable___neg___line_314;
  PyObject *__pyx_kp_u_Variable___pos___line_296;
  PyObject *__pyx_n_s_Variable___reduce_cython;
  PyObject *__pyx_kp_u_Variable___repr___line_147;
  PyObject *__pyx_n_s_Variable___setstate_cython;
  PyObject *__pyx_kp_u_Variable___sub___line_214;
  PyObject *__pyx_n_s_Variable_id;
  PyObject *__pyx_kp_u_Variable_id_line_111;
  PyObject *__pyx_n_s_Variable_space_dimension;
  PyObject *__pyx_kp_u_Variable_space_dimension_line_12;
  PyObject *__pyx_n_s_Variable_swap;
  PyObject *__pyx_kp_u_Variable_unhashable;
  PyObject *__pyx_kp_u_We_done_goofed_no_acceptable_inp;
  PyObject *__pyx_n_s__50;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_n_s_all_homogeneous_terms_are_zero;
  PyObject *__pyx_n_s_all_terms_are_zero;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_coefficient;
  PyObject *__pyx_n_u_d;
  PyObject *__pyx_kp_u_d_2;
  PyObject *__pyx_kp_u_d_3;
  PyObject *__pyx_kp_u_d_r;
  PyObject *__pyx_n_s_dim;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_n_s_ee;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_ii;
  PyObject *__pyx_n_s_inhomogeneous_term;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_equal_to;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_linear_form;
  PyObject *__pyx_n_s_m_swap;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_nn;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_normalize;
  PyObject *__pyx_n_s_other;
  PyObject *__pyx_n_s_pplite_linear_algebra;
  PyObject *__pyx_kp_s_pplite_linear_algebra_pyx;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_kp_u_r;
  PyObject *__pyx_kp_u_r_2;
  PyObject *__pyx_kp_u_r_3;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
  PyObject *__pyx_n_s_set_coefficient;
  PyObject *__pyx_n_s_set_space_dimension;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shift_space_dimensions;
  PyObject *__pyx_n_s_sign_normalize;
  PyObject *__pyx_n_s_space_dimension;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_swap;
  PyObject *__pyx_n_s_swap_space_dimensions;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_v1;
  PyObject *__pyx_n_s_v2;
  PyObject *__pyx_n_s_var_1;
  PyObject *__pyx_n_s_var_2;
  PyObject *__pyx_n_s_var_i;
  PyObject *__pyx_n_s_vv;
  PyObject *__pyx_n_s_vv1;
  PyObject *__pyx_n_s_vv2;
  PyObject *__pyx_n_s_w;
  PyObject *__pyx_kp_u_x_0;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_codeobj__12;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpz);
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpq);
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpfr);
  Py_CLEAR(clear_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpc);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_10constraint_Constraint);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_14linear_algebra_Variable);
  Py_CLEAR(clear_module_state->__pyx_type_6pplite_14linear_algebra_Variable);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
  Py_CLEAR(clear_module_state->__pyx_type_6pplite_14linear_algebra_Linear_Expression);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
  Py_CLEAR(clear_module_state->__pyx_type_6pplite_14linear_algebra_Affine_Expression);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Add_self_and_other_INPUT_self_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Add_self_and_other_INPUT_self_o_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression___add___line_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression___hash___line);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression___repr___line);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression___sub___line_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_all_terms_are);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_coefficient);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression_coefficient_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_inhomogeneous);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression_inhomogeneous_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_is_equal_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_linear_form);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression_linear_form_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_m_swap);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_sign_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Affine_Expression_space_dimensio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression_space_dimensio_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Affine_Expression_unhashable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_initialize_with_more_than);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Initalizing_with_one_argument_re);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Initalizing_with_one_argument_re_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Integer_Conversion_Failed);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression___add___line_7);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression___hash___line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression___mul___line_9);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression___repr___line);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression___sub___line_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_all_homogeneou);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_all_homogeneou_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_coefficient);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_coefficient_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_is_equal_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_is_equal_to_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_set_coefficien);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_set_coefficien_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_set_space_dime);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_shift_space_di);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_shift_space_di_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_space_dimensio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_space_dimensio_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Linear_Expression_swap_space_dim);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_swap_space_dim_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Linear_Expression_unhashable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Multiply_self_with_other_INPUT);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplemented);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_a_string_representation);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_a_string_representation_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_self_as_class_Linear_Exp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_self_as_class_Linear_Exp_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_coefficient_of_the_v);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_coefficient_of_the_v_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_difference_self_othe);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_dimension_of_the_vec);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_dimension_of_the_vec_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_dimension_of_the_vec_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_index_of_the_Cartesi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_product_self_other_I);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Return_the_sum_self_other_INPUT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Returns_the_inhogogenous_term_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Returns_the_linear_form_of_the);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_i_th_coefficient_to_n_I);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Shift_by_n_the_coefficients_of);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Subtract_self_and_other_INPUT_s);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Subtract_self_and_other_INPUT_s_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Swaps_the_coefficients_of_v1_an);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Test_equality_with_another_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Test_if_self_is_a_constant_line);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Tests_import_pplite_hash_pplite);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Tests_import_pplite_hash_pplite_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Tests_import_pplite_hash_pplite_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Variable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___add___line_164);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___hash___line_99);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___mul___line_255);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___neg___line_314);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___pos___line_296);
  Py_CLEAR(clear_module_state->__pyx_n_s_Variable___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___repr___line_147);
  Py_CLEAR(clear_module_state->__pyx_n_s_Variable___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable___sub___line_214);
  Py_CLEAR(clear_module_state->__pyx_n_s_Variable_id);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable_id_line_111);
  Py_CLEAR(clear_module_state->__pyx_n_s_Variable_space_dimension);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable_space_dimension_line_12);
  Py_CLEAR(clear_module_state->__pyx_n_s_Variable_swap);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Variable_unhashable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_We_done_goofed_no_acceptable_inp);
  Py_CLEAR(clear_module_state->__pyx_n_s__50);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_homogeneous_terms_are_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_terms_are_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_coefficient);
  Py_CLEAR(clear_module_state->__pyx_n_u_d);
  Py_CLEAR(clear_module_state->__pyx_kp_u_d_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_d_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_d_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_dim);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_n_s_ee);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_ii);
  Py_CLEAR(clear_module_state->__pyx_n_s_inhomogeneous_term);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_equal_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_linear_form);
  Py_CLEAR(clear_module_state->__pyx_n_s_m_swap);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_nn);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_other);
  Py_CLEAR(clear_module_state->__pyx_n_s_pplite_linear_algebra);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pplite_linear_algebra_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_kp_u_r);
  Py_CLEAR(clear_module_state->__pyx_kp_u_r_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_r_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self_thisptr_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_coefficient);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_space_dimension);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shift_space_dimensions);
  Py_CLEAR(clear_module_state->__pyx_n_s_sign_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_space_dimension);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_swap);
  Py_CLEAR(clear_module_state->__pyx_n_s_swap_space_dimensions);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_v1);
  Py_CLEAR(clear_module_state->__pyx_n_s_v2);
  Py_CLEAR(clear_module_state->__pyx_n_s_var_1);
  Py_CLEAR(clear_module_state->__pyx_n_s_var_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_var_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_vv);
  Py_CLEAR(clear_module_state->__pyx_n_s_vv1);
  Py_CLEAR(clear_module_state->__pyx_n_s_vv2);
  Py_CLEAR(clear_module_state->__pyx_n_s_w);
  Py_CLEAR(clear_module_state->__pyx_kp_u_x_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__12);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpz);
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpq);
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpfr);
  Py_VISIT(traverse_module_state->__pyx_ptype_5gmpy2_5gmpy2_mpc);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_10constraint_Constraint);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_14linear_algebra_Variable);
  Py_VISIT(traverse_module_state->__pyx_type_6pplite_14linear_algebra_Variable);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
  Py_VISIT(traverse_module_state->__pyx_type_6pplite_14linear_algebra_Linear_Expression);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
  Py_VISIT(traverse_module_state->__pyx_type_6pplite_14linear_algebra_Affine_Expression);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Add_self_and_other_INPUT_self_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Add_self_and_other_INPUT_self_o_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression___add___line_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression___hash___line);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression___repr___line);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression___sub___line_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_all_terms_are);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_coefficient);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression_coefficient_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_inhomogeneous);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression_inhomogeneous_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_is_equal_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_linear_form);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression_linear_form_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_m_swap);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_sign_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Affine_Expression_space_dimensio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression_space_dimensio_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Affine_Expression_unhashable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_initialize_with_more_than);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Initalizing_with_one_argument_re);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Initalizing_with_one_argument_re_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Integer_Conversion_Failed);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression___add___line_7);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression___hash___line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression___mul___line_9);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression___repr___line);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression___sub___line_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_all_homogeneou);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_all_homogeneou_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_coefficient);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_coefficient_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_is_equal_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_is_equal_to_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_set_coefficien);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_set_coefficien_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_set_space_dime);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_shift_space_di);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_shift_space_di_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_space_dimensio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_space_dimensio_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Linear_Expression_swap_space_dim);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_swap_space_dim_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Linear_Expression_unhashable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Multiply_self_with_other_INPUT);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplemented);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_a_string_representation);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_a_string_representation_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_self_as_class_Linear_Exp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_self_as_class_Linear_Exp_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_coefficient_of_the_v);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_coefficient_of_the_v_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_difference_self_othe);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_dimension_of_the_vec);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_dimension_of_the_vec_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_dimension_of_the_vec_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_index_of_the_Cartesi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_product_self_other_I);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Return_the_sum_self_other_INPUT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Returns_the_inhogogenous_term_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Returns_the_linear_form_of_the);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_i_th_coefficient_to_n_I);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Shift_by_n_the_coefficients_of);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Subtract_self_and_other_INPUT_s);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Subtract_self_and_other_INPUT_s_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Swaps_the_coefficients_of_v1_an);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Test_equality_with_another_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Test_if_self_is_a_constant_line);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Tests_import_pplite_hash_pplite);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Tests_import_pplite_hash_pplite_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Tests_import_pplite_hash_pplite_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Variable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___add___line_164);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___hash___line_99);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___mul___line_255);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___neg___line_314);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___pos___line_296);
  Py_VISIT(traverse_module_state->__pyx_n_s_Variable___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___repr___line_147);
  Py_VISIT(traverse_module_state->__pyx_n_s_Variable___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable___sub___line_214);
  Py_VISIT(traverse_module_state->__pyx_n_s_Variable_id);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable_id_line_111);
  Py_VISIT(traverse_module_state->__pyx_n_s_Variable_space_dimension);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable_space_dimension_line_12);
  Py_VISIT(traverse_module_state->__pyx_n_s_Variable_swap);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Variable_unhashable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_We_done_goofed_no_acceptable_inp);
  Py_VISIT(traverse_module_state->__pyx_n_s__50);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_homogeneous_terms_are_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_terms_are_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_coefficient);
  Py_VISIT(traverse_module_state->__pyx_n_u_d);
  Py_VISIT(traverse_module_state->__pyx_kp_u_d_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_d_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_d_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_dim);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_n_s_ee);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_ii);
  Py_VISIT(traverse_module_state->__pyx_n_s_inhomogeneous_term);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_equal_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_linear_form);
  Py_VISIT(traverse_module_state->__pyx_n_s_m_swap);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_nn);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_other);
  Py_VISIT(traverse_module_state->__pyx_n_s_pplite_linear_algebra);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pplite_linear_algebra_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_kp_u_r);
  Py_VISIT(traverse_module_state->__pyx_kp_u_r_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_r_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self_thisptr_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_coefficient);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_space_dimension);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shift_space_dimensions);
  Py_VISIT(traverse_module_state->__pyx_n_s_sign_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_space_dimension);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_swap);
  Py_VISIT(traverse_module_state->__pyx_n_s_swap_space_dimensions);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_v1);
  Py_VISIT(traverse_module_state->__pyx_n_s_v2);
  Py_VISIT(traverse_module_state->__pyx_n_s_var_1);
  Py_VISIT(traverse_module_state->__pyx_n_s_var_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_var_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_vv);
  Py_VISIT(traverse_module_state->__pyx_n_s_vv1);
  Py_VISIT(traverse_module_state->__pyx_n_s_vv2);
  Py_VISIT(traverse_module_state->__pyx_n_s_w);
  Py_VISIT(traverse_module_state->__pyx_kp_u_x_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__12);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5gmpy2_5gmpy2_mpz __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpz
#define __pyx_ptype_5gmpy2_5gmpy2_mpq __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpq
#define __pyx_ptype_5gmpy2_5gmpy2_mpfr __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpfr
#define __pyx_ptype_5gmpy2_5gmpy2_mpc __pyx_mstate_global->__pyx_ptype_5gmpy2_5gmpy2_mpc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_6pplite_10constraint_Constraint __pyx_mstate_global->__pyx_ptype_6pplite_10constraint_Constraint
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_6pplite_14linear_algebra_Variable __pyx_mstate_global->__pyx_type_6pplite_14linear_algebra_Variable
#define __pyx_type_6pplite_14linear_algebra_Linear_Expression __pyx_mstate_global->__pyx_type_6pplite_14linear_algebra_Linear_Expression
#define __pyx_type_6pplite_14linear_algebra_Affine_Expression __pyx_mstate_global->__pyx_type_6pplite_14linear_algebra_Affine_Expression
#endif
#define __pyx_ptype_6pplite_14linear_algebra_Variable __pyx_mstate_global->__pyx_ptype_6pplite_14linear_algebra_Variable
#define __pyx_ptype_6pplite_14linear_algebra_Linear_Expression __pyx_mstate_global->__pyx_ptype_6pplite_14linear_algebra_Linear_Expression
#define __pyx_ptype_6pplite_14linear_algebra_Affine_Expression __pyx_mstate_global->__pyx_ptype_6pplite_14linear_algebra_Affine_Expression
#define __pyx_kp_u_0 __pyx_mstate_global->__pyx_kp_u_0
#define __pyx_kp_u_Add_self_and_other_INPUT_self_o __pyx_mstate_global->__pyx_kp_u_Add_self_and_other_INPUT_self_o
#define __pyx_kp_u_Add_self_and_other_INPUT_self_o_2 __pyx_mstate_global->__pyx_kp_u_Add_self_and_other_INPUT_self_o_2
#define __pyx_n_s_Affine_Expression __pyx_mstate_global->__pyx_n_s_Affine_Expression
#define __pyx_kp_u_Affine_Expression___add___line_1 __pyx_mstate_global->__pyx_kp_u_Affine_Expression___add___line_1
#define __pyx_kp_u_Affine_Expression___hash___line __pyx_mstate_global->__pyx_kp_u_Affine_Expression___hash___line
#define __pyx_n_s_Affine_Expression___reduce_cytho __pyx_mstate_global->__pyx_n_s_Affine_Expression___reduce_cytho
#define __pyx_kp_u_Affine_Expression___repr___line __pyx_mstate_global->__pyx_kp_u_Affine_Expression___repr___line
#define __pyx_n_s_Affine_Expression___setstate_cyt __pyx_mstate_global->__pyx_n_s_Affine_Expression___setstate_cyt
#define __pyx_kp_u_Affine_Expression___sub___line_1 __pyx_mstate_global->__pyx_kp_u_Affine_Expression___sub___line_1
#define __pyx_n_s_Affine_Expression_all_terms_are __pyx_mstate_global->__pyx_n_s_Affine_Expression_all_terms_are
#define __pyx_n_s_Affine_Expression_coefficient __pyx_mstate_global->__pyx_n_s_Affine_Expression_coefficient
#define __pyx_kp_u_Affine_Expression_coefficient_li __pyx_mstate_global->__pyx_kp_u_Affine_Expression_coefficient_li
#define __pyx_n_s_Affine_Expression_inhomogeneous __pyx_mstate_global->__pyx_n_s_Affine_Expression_inhomogeneous
#define __pyx_kp_u_Affine_Expression_inhomogeneous_2 __pyx_mstate_global->__pyx_kp_u_Affine_Expression_inhomogeneous_2
#define __pyx_n_s_Affine_Expression_is_equal_to __pyx_mstate_global->__pyx_n_s_Affine_Expression_is_equal_to
#define __pyx_n_s_Affine_Expression_linear_form __pyx_mstate_global->__pyx_n_s_Affine_Expression_linear_form
#define __pyx_kp_u_Affine_Expression_linear_form_li __pyx_mstate_global->__pyx_kp_u_Affine_Expression_linear_form_li
#define __pyx_n_s_Affine_Expression_m_swap __pyx_mstate_global->__pyx_n_s_Affine_Expression_m_swap
#define __pyx_n_s_Affine_Expression_normalize __pyx_mstate_global->__pyx_n_s_Affine_Expression_normalize
#define __pyx_n_s_Affine_Expression_sign_normalize __pyx_mstate_global->__pyx_n_s_Affine_Expression_sign_normalize
#define __pyx_n_s_Affine_Expression_space_dimensio __pyx_mstate_global->__pyx_n_s_Affine_Expression_space_dimensio
#define __pyx_kp_u_Affine_Expression_space_dimensio_2 __pyx_mstate_global->__pyx_kp_u_Affine_Expression_space_dimensio_2
#define __pyx_kp_u_Affine_Expression_unhashable __pyx_mstate_global->__pyx_kp_u_Affine_Expression_unhashable
#define __pyx_kp_u_Cannot_initialize_with_more_than __pyx_mstate_global->__pyx_kp_u_Cannot_initialize_with_more_than
#define __pyx_kp_u_Initalizing_with_one_argument_re __pyx_mstate_global->__pyx_kp_u_Initalizing_with_one_argument_re
#define __pyx_kp_u_Initalizing_with_one_argument_re_2 __pyx_mstate_global->__pyx_kp_u_Initalizing_with_one_argument_re_2
#define __pyx_kp_u_Integer_Conversion_Failed __pyx_mstate_global->__pyx_kp_u_Integer_Conversion_Failed
#define __pyx_n_s_Linear_Expression __pyx_mstate_global->__pyx_n_s_Linear_Expression
#define __pyx_kp_u_Linear_Expression___add___line_7 __pyx_mstate_global->__pyx_kp_u_Linear_Expression___add___line_7
#define __pyx_kp_u_Linear_Expression___hash___line __pyx_mstate_global->__pyx_kp_u_Linear_Expression___hash___line
#define __pyx_kp_u_Linear_Expression___mul___line_9 __pyx_mstate_global->__pyx_kp_u_Linear_Expression___mul___line_9
#define __pyx_n_s_Linear_Expression___reduce_cytho __pyx_mstate_global->__pyx_n_s_Linear_Expression___reduce_cytho
#define __pyx_kp_u_Linear_Expression___repr___line __pyx_mstate_global->__pyx_kp_u_Linear_Expression___repr___line
#define __pyx_n_s_Linear_Expression___setstate_cyt __pyx_mstate_global->__pyx_n_s_Linear_Expression___setstate_cyt
#define __pyx_kp_u_Linear_Expression___sub___line_8 __pyx_mstate_global->__pyx_kp_u_Linear_Expression___sub___line_8
#define __pyx_n_s_Linear_Expression_all_homogeneou __pyx_mstate_global->__pyx_n_s_Linear_Expression_all_homogeneou
#define __pyx_kp_u_Linear_Expression_all_homogeneou_2 __pyx_mstate_global->__pyx_kp_u_Linear_Expression_all_homogeneou_2
#define __pyx_n_s_Linear_Expression_coefficient __pyx_mstate_global->__pyx_n_s_Linear_Expression_coefficient
#define __pyx_kp_u_Linear_Expression_coefficient_li __pyx_mstate_global->__pyx_kp_u_Linear_Expression_coefficient_li
#define __pyx_n_s_Linear_Expression_is_equal_to __pyx_mstate_global->__pyx_n_s_Linear_Expression_is_equal_to
#define __pyx_kp_u_Linear_Expression_is_equal_to_li __pyx_mstate_global->__pyx_kp_u_Linear_Expression_is_equal_to_li
#define __pyx_n_s_Linear_Expression_set_coefficien __pyx_mstate_global->__pyx_n_s_Linear_Expression_set_coefficien
#define __pyx_kp_u_Linear_Expression_set_coefficien_2 __pyx_mstate_global->__pyx_kp_u_Linear_Expression_set_coefficien_2
#define __pyx_n_s_Linear_Expression_set_space_dime __pyx_mstate_global->__pyx_n_s_Linear_Expression_set_space_dime
#define __pyx_n_s_Linear_Expression_shift_space_di __pyx_mstate_global->__pyx_n_s_Linear_Expression_shift_space_di
#define __pyx_kp_u_Linear_Expression_shift_space_di_2 __pyx_mstate_global->__pyx_kp_u_Linear_Expression_shift_space_di_2
#define __pyx_n_s_Linear_Expression_space_dimensio __pyx_mstate_global->__pyx_n_s_Linear_Expression_space_dimensio
#define __pyx_kp_u_Linear_Expression_space_dimensio_2 __pyx_mstate_global->__pyx_kp_u_Linear_Expression_space_dimensio_2
#define __pyx_n_s_Linear_Expression_swap_space_dim __pyx_mstate_global->__pyx_n_s_Linear_Expression_swap_space_dim
#define __pyx_kp_u_Linear_Expression_swap_space_dim_2 __pyx_mstate_global->__pyx_kp_u_Linear_Expression_swap_space_dim_2
#define __pyx_kp_u_Linear_Expression_unhashable __pyx_mstate_global->__pyx_kp_u_Linear_Expression_unhashable
#define __pyx_kp_u_Multiply_self_with_other_INPUT __pyx_mstate_global->__pyx_kp_u_Multiply_self_with_other_INPUT
#define __pyx_n_s_NotImplemented __pyx_mstate_global->__pyx_n_s_NotImplemented
#define __pyx_kp_u_Return_a_string_representation __pyx_mstate_global->__pyx_kp_u_Return_a_string_representation
#define __pyx_kp_u_Return_a_string_representation_2 __pyx_mstate_global->__pyx_kp_u_Return_a_string_representation_2
#define __pyx_kp_u_Return_self_as_class_Linear_Exp __pyx_mstate_global->__pyx_kp_u_Return_self_as_class_Linear_Exp
#define __pyx_kp_u_Return_self_as_class_Linear_Exp_2 __pyx_mstate_global->__pyx_kp_u_Return_self_as_class_Linear_Exp_2
#define __pyx_kp_u_Return_the_coefficient_of_the_v __pyx_mstate_global->__pyx_kp_u_Return_the_coefficient_of_the_v
#define __pyx_kp_u_Return_the_coefficient_of_the_v_2 __pyx_mstate_global->__pyx_kp_u_Return_the_coefficient_of_the_v_2
#define __pyx_kp_u_Return_the_difference_self_othe __pyx_mstate_global->__pyx_kp_u_Return_the_difference_self_othe
#define __pyx_kp_u_Return_the_dimension_of_the_vec __pyx_mstate_global->__pyx_kp_u_Return_the_dimension_of_the_vec
#define __pyx_kp_u_Return_the_dimension_of_the_vec_2 __pyx_mstate_global->__pyx_kp_u_Return_the_dimension_of_the_vec_2
#define __pyx_kp_u_Return_the_dimension_of_the_vec_3 __pyx_mstate_global->__pyx_kp_u_Return_the_dimension_of_the_vec_3
#define __pyx_kp_u_Return_the_index_of_the_Cartesi __pyx_mstate_global->__pyx_kp_u_Return_the_index_of_the_Cartesi
#define __pyx_kp_u_Return_the_product_self_other_I __pyx_mstate_global->__pyx_kp_u_Return_the_product_self_other_I
#define __pyx_kp_u_Return_the_sum_self_other_INPUT __pyx_mstate_global->__pyx_kp_u_Return_the_sum_self_other_INPUT
#define __pyx_kp_u_Returns_the_inhogogenous_term_o __pyx_mstate_global->__pyx_kp_u_Returns_the_inhogogenous_term_o
#define __pyx_kp_u_Returns_the_linear_form_of_the __pyx_mstate_global->__pyx_kp_u_Returns_the_linear_form_of_the
#define __pyx_kp_u_Set_the_i_th_coefficient_to_n_I __pyx_mstate_global->__pyx_kp_u_Set_the_i_th_coefficient_to_n_I
#define __pyx_kp_u_Shift_by_n_the_coefficients_of __pyx_mstate_global->__pyx_kp_u_Shift_by_n_the_coefficients_of
#define __pyx_kp_u_Subtract_self_and_other_INPUT_s __pyx_mstate_global->__pyx_kp_u_Subtract_self_and_other_INPUT_s
#define __pyx_kp_u_Subtract_self_and_other_INPUT_s_2 __pyx_mstate_global->__pyx_kp_u_Subtract_self_and_other_INPUT_s_2
#define __pyx_kp_u_Swaps_the_coefficients_of_v1_an __pyx_mstate_global->__pyx_kp_u_Swaps_the_coefficients_of_v1_an
#define __pyx_kp_u_Test_equality_with_another_line __pyx_mstate_global->__pyx_kp_u_Test_equality_with_another_line
#define __pyx_kp_u_Test_if_self_is_a_constant_line __pyx_mstate_global->__pyx_kp_u_Test_if_self_is_a_constant_line
#define __pyx_kp_u_Tests_import_pplite_hash_pplite __pyx_mstate_global->__pyx_kp_u_Tests_import_pplite_hash_pplite
#define __pyx_kp_u_Tests_import_pplite_hash_pplite_2 __pyx_mstate_global->__pyx_kp_u_Tests_import_pplite_hash_pplite_2
#define __pyx_kp_u_Tests_import_pplite_hash_pplite_3 __pyx_mstate_global->__pyx_kp_u_Tests_import_pplite_hash_pplite_3
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_Variable __pyx_mstate_global->__pyx_n_s_Variable
#define __pyx_kp_u_Variable___add___line_164 __pyx_mstate_global->__pyx_kp_u_Variable___add___line_164
#define __pyx_kp_u_Variable___hash___line_99 __pyx_mstate_global->__pyx_kp_u_Variable___hash___line_99
#define __pyx_kp_u_Variable___mul___line_255 __pyx_mstate_global->__pyx_kp_u_Variable___mul___line_255
#define __pyx_kp_u_Variable___neg___line_314 __pyx_mstate_global->__pyx_kp_u_Variable___neg___line_314
#define __pyx_kp_u_Variable___pos___line_296 __pyx_mstate_global->__pyx_kp_u_Variable___pos___line_296
#define __pyx_n_s_Variable___reduce_cython __pyx_mstate_global->__pyx_n_s_Variable___reduce_cython
#define __pyx_kp_u_Variable___repr___line_147 __pyx_mstate_global->__pyx_kp_u_Variable___repr___line_147
#define __pyx_n_s_Variable___setstate_cython __pyx_mstate_global->__pyx_n_s_Variable___setstate_cython
#define __pyx_kp_u_Variable___sub___line_214 __pyx_mstate_global->__pyx_kp_u_Variable___sub___line_214
#define __pyx_n_s_Variable_id __pyx_mstate_global->__pyx_n_s_Variable_id
#define __pyx_kp_u_Variable_id_line_111 __pyx_mstate_global->__pyx_kp_u_Variable_id_line_111
#define __pyx_n_s_Variable_space_dimension __pyx_mstate_global->__pyx_n_s_Variable_space_dimension
#define __pyx_kp_u_Variable_space_dimension_line_12 __pyx_mstate_global->__pyx_kp_u_Variable_space_dimension_line_12
#define __pyx_n_s_Variable_swap __pyx_mstate_global->__pyx_n_s_Variable_swap
#define __pyx_kp_u_Variable_unhashable __pyx_mstate_global->__pyx_kp_u_Variable_unhashable
#define __pyx_kp_u_We_done_goofed_no_acceptable_inp __pyx_mstate_global->__pyx_kp_u_We_done_goofed_no_acceptable_inp
#define __pyx_n_s__50 __pyx_mstate_global->__pyx_n_s__50
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_n_s_all_homogeneous_terms_are_zero __pyx_mstate_global->__pyx_n_s_all_homogeneous_terms_are_zero
#define __pyx_n_s_all_terms_are_zero __pyx_mstate_global->__pyx_n_s_all_terms_are_zero
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_coefficient __pyx_mstate_global->__pyx_n_s_coefficient
#define __pyx_n_u_d __pyx_mstate_global->__pyx_n_u_d
#define __pyx_kp_u_d_2 __pyx_mstate_global->__pyx_kp_u_d_2
#define __pyx_kp_u_d_3 __pyx_mstate_global->__pyx_kp_u_d_3
#define __pyx_kp_u_d_r __pyx_mstate_global->__pyx_kp_u_d_r
#define __pyx_n_s_dim __pyx_mstate_global->__pyx_n_s_dim
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_n_s_ee __pyx_mstate_global->__pyx_n_s_ee
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_s_ii __pyx_mstate_global->__pyx_n_s_ii
#define __pyx_n_s_inhomogeneous_term __pyx_mstate_global->__pyx_n_s_inhomogeneous_term
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_equal_to __pyx_mstate_global->__pyx_n_s_is_equal_to
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_linear_form __pyx_mstate_global->__pyx_n_s_linear_form
#define __pyx_n_s_m_swap __pyx_mstate_global->__pyx_n_s_m_swap
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_nn __pyx_mstate_global->__pyx_n_s_nn
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_normalize __pyx_mstate_global->__pyx_n_s_normalize
#define __pyx_n_s_other __pyx_mstate_global->__pyx_n_s_other
#define __pyx_n_s_pplite_linear_algebra __pyx_mstate_global->__pyx_n_s_pplite_linear_algebra
#define __pyx_kp_s_pplite_linear_algebra_pyx __pyx_mstate_global->__pyx_kp_s_pplite_linear_algebra_pyx
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_kp_u_r __pyx_mstate_global->__pyx_kp_u_r
#define __pyx_kp_u_r_2 __pyx_mstate_global->__pyx_kp_u_r_2
#define __pyx_kp_u_r_3 __pyx_mstate_global->__pyx_kp_u_r_3
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self_thisptr_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self_thisptr_cannot_be_converted
#define __pyx_n_s_set_coefficient __pyx_mstate_global->__pyx_n_s_set_coefficient
#define __pyx_n_s_set_space_dimension __pyx_mstate_global->__pyx_n_s_set_space_dimension
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shift_space_dimensions __pyx_mstate_global->__pyx_n_s_shift_space_dimensions
#define __pyx_n_s_sign_normalize __pyx_mstate_global->__pyx_n_s_sign_normalize
#define __pyx_n_s_space_dimension __pyx_mstate_global->__pyx_n_s_space_dimension
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_swap __pyx_mstate_global->__pyx_n_s_swap
#define __pyx_n_s_swap_space_dimensions __pyx_mstate_global->__pyx_n_s_swap_space_dimensions
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_v1 __pyx_mstate_global->__pyx_n_s_v1
#define __pyx_n_s_v2 __pyx_mstate_global->__pyx_n_s_v2
#define __pyx_n_s_var_1 __pyx_mstate_global->__pyx_n_s_var_1
#define __pyx_n_s_var_2 __pyx_mstate_global->__pyx_n_s_var_2
#define __pyx_n_s_var_i __pyx_mstate_global->__pyx_n_s_var_i
#define __pyx_n_s_vv __pyx_mstate_global->__pyx_n_s_vv
#define __pyx_n_s_vv1 __pyx_mstate_global->__pyx_n_s_vv1
#define __pyx_n_s_vv2 __pyx_mstate_global->__pyx_n_s_vv2
#define __pyx_n_s_w __pyx_mstate_global->__pyx_n_s_w
#define __pyx_kp_u_x_0 __pyx_mstate_global->__pyx_kp_u_x_0
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_codeobj__12 __pyx_mstate_global->__pyx_codeobj__12
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
/* #### Code section: module_code ### */

/* "gmpy2/gmpy2.pxd":129
 * 
 * # Build a gmpy2 mpz from a gmp mpz
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):             # <<<<<<<<<<<<<<
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)
 */

static CYTHON_INLINE MPZ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPZ_From_mpz(mpz_srcptr __pyx_v_z) {
  MPZ_Object *__pyx_v_res = 0;
  MPZ_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPZ_From_mpz", 1);

  /* "gmpy2/gmpy2.pxd":130
 * # Build a gmpy2 mpz from a gmp mpz
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):
 *     cdef mpz res = GMPy_MPZ_New(NULL)             # <<<<<<<<<<<<<<
 *     mpz_set(res.z, z)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPZ_New(NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPZ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":131
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  mpz_set(__pyx_v_res->z, __pyx_v_z);

  /* "gmpy2/gmpy2.pxd":132
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpq from a gmp mpq
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":129
 * 
 * # Build a gmpy2 mpz from a gmp mpz
 * cdef inline mpz GMPy_MPZ_From_mpz(mpz_srcptr z):             # <<<<<<<<<<<<<<
 *     cdef mpz res = GMPy_MPZ_New(NULL)
 *     mpz_set(res.z, z)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPZ_From_mpz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":135
 * 
 * # Build a gmpy2 mpq from a gmp mpq
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)
 */

static CYTHON_INLINE MPQ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPQ_From_mpq(mpq_srcptr __pyx_v_q) {
  MPQ_Object *__pyx_v_res = 0;
  MPQ_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPQ_From_mpq", 1);

  /* "gmpy2/gmpy2.pxd":136
 * # Build a gmpy2 mpq from a gmp mpq
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):
 *     cdef mpq res = GMPy_MPQ_New(NULL)             # <<<<<<<<<<<<<<
 *     mpq_set(res.q, q)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPQ_New(NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPQ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":137
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  mpq_set(__pyx_v_res->q, __pyx_v_q);

  /* "gmpy2/gmpy2.pxd":138
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":135
 * 
 * # Build a gmpy2 mpq from a gmp mpq
 * cdef inline mpq GMPy_MPQ_From_mpq(mpq_srcptr q):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set(res.q, q)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPQ_From_mpq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":141
 * 
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)
 */

static CYTHON_INLINE MPQ_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPQ_From_mpz(mpz_srcptr __pyx_v_num, mpz_srcptr __pyx_v_den) {
  MPQ_Object *__pyx_v_res = 0;
  MPQ_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPQ_From_mpz", 1);

  /* "gmpy2/gmpy2.pxd":142
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):
 *     cdef mpq res = GMPy_MPQ_New(NULL)             # <<<<<<<<<<<<<<
 *     mpq_set_num(res.q, num)
 *     mpq_set_den(res.q, den)
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPQ_New(NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPQ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":143
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)             # <<<<<<<<<<<<<<
 *     mpq_set_den(res.q, den)
 *     return res
 */
  mpq_set_num(__pyx_v_res->q, __pyx_v_num);

  /* "gmpy2/gmpy2.pxd":144
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)
 *     mpq_set_den(res.q, den)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  mpq_set_den(__pyx_v_res->q, __pyx_v_den);

  /* "gmpy2/gmpy2.pxd":145
 *     mpq_set_num(res.q, num)
 *     mpq_set_den(res.q, den)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpfr from a mpfr
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":141
 * 
 * # Build a gmpy2 mpq from gmp mpz numerator and denominator
 * cdef inline mpq GMPy_MPQ_From_mpz(mpz_srcptr num, mpz_srcptr den):             # <<<<<<<<<<<<<<
 *     cdef mpq res = GMPy_MPQ_New(NULL)
 *     mpq_set_num(res.q, num)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPQ_From_mpz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":148
 * 
 * # Build a gmpy2 mpfr from a mpfr
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):             # <<<<<<<<<<<<<<
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)
 */

static CYTHON_INLINE MPFR_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPFR_From_mpfr(mpfr_srcptr __pyx_v_x) {
  MPFR_Object *__pyx_v_res = 0;
  MPFR_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPFR_From_mpfr", 1);

  /* "gmpy2/gmpy2.pxd":149
 * # Build a gmpy2 mpfr from a mpfr
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)             # <<<<<<<<<<<<<<
 *     mpfr_set(res.f, x, MPFR_RNDN)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPFR_New(mpfr_get_prec(__pyx_v_x), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPFR_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":150
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  (void)(mpfr_set(__pyx_v_res->f, __pyx_v_x, MPFR_RNDN));

  /* "gmpy2/gmpy2.pxd":151
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpc from a mpc
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":148
 * 
 * # Build a gmpy2 mpfr from a mpfr
 * cdef inline mpfr GMPy_MPFR_From_mpfr(mpfr_srcptr x):             # <<<<<<<<<<<<<<
 *     cdef mpfr res = GMPy_MPFR_New(mpfr_get_prec(x), NULL)
 *     mpfr_set(res.f, x, MPFR_RNDN)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPFR_From_mpfr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":154
 * 
 * # Build a gmpy2 mpc from a mpc
 * cdef inline mpc GMPy_MPC_From_mpc(mpc_srcptr c):             # <<<<<<<<<<<<<<
 *     cdef mpfr_prec_t pr
 *     cdef mpfr_prec_t pi
 */

static CYTHON_INLINE MPC_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPC_From_mpc(mpc_srcptr __pyx_v_c) {
  mpfr_prec_t __pyx_v_pr;
  mpfr_prec_t __pyx_v_pi;
  MPC_Object *__pyx_v_res = 0;
  MPC_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPC_From_mpc", 1);

  /* "gmpy2/gmpy2.pxd":157
 *     cdef mpfr_prec_t pr
 *     cdef mpfr_prec_t pi
 *     mpc_get_prec2(&pr, &pi, c)             # <<<<<<<<<<<<<<
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)
 *     mpc_set(res.c, c, MPC_RNDNN)
 */
  mpc_get_prec2((&__pyx_v_pr), (&__pyx_v_pi), __pyx_v_c);

  /* "gmpy2/gmpy2.pxd":158
 *     cdef mpfr_prec_t pi
 *     mpc_get_prec2(&pr, &pi, c)
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)             # <<<<<<<<<<<<<<
 *     mpc_set(res.c, c, MPC_RNDNN)
 *     return res
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPC_New(__pyx_v_pr, __pyx_v_pi, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPC_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":159
 *     mpc_get_prec2(&pr, &pi, c)
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)
 *     mpc_set(res.c, c, MPC_RNDNN)             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  (void)(mpc_set(__pyx_v_res->c, __pyx_v_c, MPC_RNDNN));

  /* "gmpy2/gmpy2.pxd":160
 *     cdef mpc res = GMPy_MPC_New(pr, pi, NULL)
 *     mpc_set(res.c, c, MPC_RNDNN)
 *     return res             # <<<<<<<<<<<<<<
 * 
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":154
 * 
 * # Build a gmpy2 mpc from a mpc
 * cdef inline mpc GMPy_MPC_From_mpc(mpc_srcptr c):             # <<<<<<<<<<<<<<
 *     cdef mpfr_prec_t pr
 *     cdef mpfr_prec_t pi
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPC_From_mpc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gmpy2/gmpy2.pxd":163
 * 
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 * cdef inline mpc GMPy_MPC_From_mpfr(mpfr_srcptr re, mpfr_srcptr im):             # <<<<<<<<<<<<<<
 *     cdef mpc res = GMPy_MPC_New(mpfr_get_prec(re), mpfr_get_prec(im), NULL)
 *     # We intentionally use MPFR funtions instead of MPC functions here
 */

static CYTHON_INLINE MPC_Object *__pyx_f_5gmpy2_5gmpy2_GMPy_MPC_From_mpfr(mpfr_srcptr __pyx_v_re, mpfr_srcptr __pyx_v_im) {
  MPC_Object *__pyx_v_res = 0;
  MPC_Object *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GMPy_MPC_From_mpfr", 1);

  /* "gmpy2/gmpy2.pxd":164
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 * cdef inline mpc GMPy_MPC_From_mpfr(mpfr_srcptr re, mpfr_srcptr im):
 *     cdef mpc res = GMPy_MPC_New(mpfr_get_prec(re), mpfr_get_prec(im), NULL)             # <<<<<<<<<<<<<<
 *     # We intentionally use MPFR funtions instead of MPC functions here
 *     # in order not to add an unneeded dependency on MPC. It's probably
 */
  __pyx_t_1 = ((PyObject *)GMPy_MPC_New(mpfr_get_prec(__pyx_v_re), mpfr_get_prec(__pyx_v_im), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((MPC_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gmpy2/gmpy2.pxd":168
 *     # in order not to add an unneeded dependency on MPC. It's probably
 *     # faster too this way.
 *     mpfr_set(res.c.re, re, MPFR_RNDN)             # <<<<<<<<<<<<<<
 *     mpfr_set(res.c.im, im, MPFR_RNDN)
 *     return res
 */
  (void)(mpfr_set(__pyx_v_res->c->re, __pyx_v_re, MPFR_RNDN));

  /* "gmpy2/gmpy2.pxd":169
 *     # faster too this way.
 *     mpfr_set(res.c.re, re, MPFR_RNDN)
 *     mpfr_set(res.c.im, im, MPFR_RNDN)             # <<<<<<<<<<<<<<
 *     return res
 */
  (void)(mpfr_set(__pyx_v_res->c->im, __pyx_v_im, MPFR_RNDN));

  /* "gmpy2/gmpy2.pxd":170
 *     mpfr_set(res.c.re, re, MPFR_RNDN)
 *     mpfr_set(res.c.im, im, MPFR_RNDN)
 *     return res             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "gmpy2/gmpy2.pxd":163
 * 
 * # Build a gmpy2 mpc from a real part mpfr and an imaginary part mpfr
 * cdef inline mpc GMPy_MPC_From_mpfr(mpfr_srcptr re, mpfr_srcptr im):             # <<<<<<<<<<<<<<
 *     cdef mpc res = GMPy_MPC_New(mpfr_get_prec(re), mpfr_get_prec(im), NULL)
 *     # We intentionally use MPFR funtions instead of MPC functions here
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gmpy2.gmpy2.GMPy_MPC_From_mpfr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":19
 * # TODO:  Write a proper conversion module to handle the Integer class in PPLite so this works regardless of setup.
 * 
 * cdef FLINT_Integer_to_Python(FLINT_Integer& integer):             # <<<<<<<<<<<<<<
 *     r""" Converts FLINT_Integer to python integer."""
 *     cdef mpz_t new_int
 */

static PyObject *__pyx_f_6pplite_14linear_algebra_FLINT_Integer_to_Python(pplite::FLINT_Integer &__pyx_v_integer) {
  mpz_t __pyx_v_new_int;
  MPZ_Object *__pyx_v_y = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FLINT_Integer_to_Python", 1);

  /* "pplite/linear_algebra.pyx":22
 *     r""" Converts FLINT_Integer to python integer."""
 *     cdef mpz_t new_int
 *     mpz_init(new_int)             # <<<<<<<<<<<<<<
 *     fmpz_get_mpz(new_int, integer.impl())
 *     y = GMPy_MPZ_From_mpz(new_int)
 */
  mpz_init(__pyx_v_new_int);

  /* "pplite/linear_algebra.pyx":23
 *     cdef mpz_t new_int
 *     mpz_init(new_int)
 *     fmpz_get_mpz(new_int, integer.impl())             # <<<<<<<<<<<<<<
 *     y = GMPy_MPZ_From_mpz(new_int)
 *     mpz_clear(new_int)
 */
  fmpz_get_mpz(__pyx_v_new_int, __pyx_v_integer.impl());

  /* "pplite/linear_algebra.pyx":24
 *     mpz_init(new_int)
 *     fmpz_get_mpz(new_int, integer.impl())
 *     y = GMPy_MPZ_From_mpz(new_int)             # <<<<<<<<<<<<<<
 *     mpz_clear(new_int)
 *     return y
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_5gmpy2_5gmpy2_GMPy_MPZ_From_mpz(__pyx_v_new_int)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_y = ((MPZ_Object *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pplite/linear_algebra.pyx":25
 *     fmpz_get_mpz(new_int, integer.impl())
 *     y = GMPy_MPZ_From_mpz(new_int)
 *     mpz_clear(new_int)             # <<<<<<<<<<<<<<
 *     return y
 * 
 */
  mpz_clear(__pyx_v_new_int);

  /* "pplite/linear_algebra.pyx":26
 *     y = GMPy_MPZ_From_mpz(new_int)
 *     mpz_clear(new_int)
 *     return y             # <<<<<<<<<<<<<<
 * 
 * cdef FLINT_Integer Python_int_to_FLINT_Integer(integer):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_y);
  __pyx_r = ((PyObject *)__pyx_v_y);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":19
 * # TODO:  Write a proper conversion module to handle the Integer class in PPLite so this works regardless of setup.
 * 
 * cdef FLINT_Integer_to_Python(FLINT_Integer& integer):             # <<<<<<<<<<<<<<
 *     r""" Converts FLINT_Integer to python integer."""
 *     cdef mpz_t new_int
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.FLINT_Integer_to_Python", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":28
 *     return y
 * 
 * cdef FLINT_Integer Python_int_to_FLINT_Integer(integer):             # <<<<<<<<<<<<<<
 *     cdef fmpz_t x
 *     cdef fmpz y
 */

static pplite::FLINT_Integer __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(PyObject *__pyx_v_integer) {
  fmpz_t __pyx_v_x;
  fmpz __pyx_v_y;
  pplite::FLINT_Integer __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6pplite_11pplite_decl_slong __pyx_t_3;
  fmpz __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Python_int_to_FLINT_Integer", 1);

  /* "pplite/linear_algebra.pyx":31
 *     cdef fmpz_t x
 *     cdef fmpz y
 *     if isinstance(integer, (int, str)):             # <<<<<<<<<<<<<<
 *         fmpz_init(x)
 *         fmpz_set_si(x, integer)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_integer); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyUnicode_Check(__pyx_v_integer); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":32
 *     cdef fmpz y
 *     if isinstance(integer, (int, str)):
 *         fmpz_init(x)             # <<<<<<<<<<<<<<
 *         fmpz_set_si(x, integer)
 *         return FLINT_Integer(x)
 */
    fmpz_init(__pyx_v_x);

    /* "pplite/linear_algebra.pyx":33
 *     if isinstance(integer, (int, str)):
 *         fmpz_init(x)
 *         fmpz_set_si(x, integer)             # <<<<<<<<<<<<<<
 *         return FLINT_Integer(x)
 *     if MPZ_Check(integer): # is this okay?
 */
    __pyx_t_3 = __Pyx_PyInt_As_mp_limb_signed_t(__pyx_v_integer); if (unlikely((__pyx_t_3 == ((mp_limb_signed_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L1_error)
    fmpz_set_si(__pyx_v_x, __pyx_t_3);

    /* "pplite/linear_algebra.pyx":34
 *         fmpz_init(x)
 *         fmpz_set_si(x, integer)
 *         return FLINT_Integer(x)             # <<<<<<<<<<<<<<
 *     if MPZ_Check(integer): # is this okay?
 *         y = <fmpz> integer
 */
    __pyx_r = pplite::FLINT_Integer(__pyx_v_x);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":31
 *     cdef fmpz_t x
 *     cdef fmpz y
 *     if isinstance(integer, (int, str)):             # <<<<<<<<<<<<<<
 *         fmpz_init(x)
 *         fmpz_set_si(x, integer)
 */
  }

  /* "pplite/linear_algebra.pyx":35
 *         fmpz_set_si(x, integer)
 *         return FLINT_Integer(x)
 *     if MPZ_Check(integer): # is this okay?             # <<<<<<<<<<<<<<
 *         y = <fmpz> integer
 *         return FLINT_Integer(y)
 */
  __pyx_t_1 = MPZ_Check(__pyx_v_integer);
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":36
 *         return FLINT_Integer(x)
 *     if MPZ_Check(integer): # is this okay?
 *         y = <fmpz> integer             # <<<<<<<<<<<<<<
 *         return FLINT_Integer(y)
 *     raise ValueError("Integer Conversion Failed")
 */
    __pyx_t_4 = __Pyx_PyInt_As_mp_limb_signed_t(__pyx_v_integer); if (unlikely((__pyx_t_4 == ((fmpz)-1)) && PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L1_error)
    __pyx_v_y = ((fmpz)__pyx_t_4);

    /* "pplite/linear_algebra.pyx":37
 *     if MPZ_Check(integer): # is this okay?
 *         y = <fmpz> integer
 *         return FLINT_Integer(y)             # <<<<<<<<<<<<<<
 *     raise ValueError("Integer Conversion Failed")
 * 
 */
    __pyx_r = pplite::FLINT_Integer(__pyx_v_y);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":35
 *         fmpz_set_si(x, integer)
 *         return FLINT_Integer(x)
 *     if MPZ_Check(integer): # is this okay?             # <<<<<<<<<<<<<<
 *         y = <fmpz> integer
 *         return FLINT_Integer(y)
 */
  }

  /* "pplite/linear_algebra.pyx":38
 *         y = <fmpz> integer
 *         return FLINT_Integer(y)
 *     raise ValueError("Integer Conversion Failed")             # <<<<<<<<<<<<<<
 * 
 * @cython.freelist(128)
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_ERR(0, 38, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":28
 *     return y
 * 
 * cdef FLINT_Integer Python_int_to_FLINT_Integer(integer):             # <<<<<<<<<<<<<<
 *     cdef fmpz_t x
 *     cdef fmpz y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pplite.linear_algebra.Python_int_to_FLINT_Integer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":78
 *     0
 *     """
 *     def __cinit__(self, dim_type i):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython constructor.
 */

/* Python wrapper */
static int __pyx_pw_6pplite_14linear_algebra_8Variable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pplite_14linear_algebra_8Variable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  pplite::dim_type __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 78, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_i = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_i == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 78, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable___cinit__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), __pyx_v_i);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_14linear_algebra_8Variable___cinit__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, pplite::dim_type __pyx_v_i) {
  int __pyx_r;

  /* "pplite/linear_algebra.pyx":90
 *         x123
 *         """
 *         self.thisptr = new Var(i)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr = new pplite::Var(__pyx_v_i);

  /* "pplite/linear_algebra.pyx":78
 *     0
 *     """
 *     def __cinit__(self, dim_type i):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython constructor.
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":93
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython destructor.
 */

/* Python wrapper */
static void __pyx_pw_6pplite_14linear_algebra_8Variable_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pplite_14linear_algebra_8Variable_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6pplite_14linear_algebra_8Variable_2__dealloc__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pplite_14linear_algebra_8Variable_2__dealloc__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {

  /* "pplite/linear_algebra.pyx":97
 *         The Cython destructor.
 *         """
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pplite/linear_algebra.pyx":93
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython destructor.
 */

  /* function exit code */
}

/* "pplite/linear_algebra.pyx":99
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Tests:
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6pplite_14linear_algebra_8Variable_5__hash__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_4__hash__, "\n        Tests:\n\n        >>> import pplite\n        >>> hash(pplite.Variable(12))\n        Traceback (most recent call last):\n        ...\n        TypeError: Variable unhashable\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_4__hash__;
#endif
static Py_hash_t __pyx_pw_6pplite_14linear_algebra_8Variable_5__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_4__hash__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6pplite_14linear_algebra_8Variable_4__hash__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 1);

  /* "pplite/linear_algebra.pyx":109
 *         TypeError: Variable unhashable
 *         """
 *         raise TypeError('Variable unhashable')             # <<<<<<<<<<<<<<
 * 
 *     def id(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 109, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":99
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Tests:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":111
 *         raise TypeError('Variable unhashable')
 * 
 *     def id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the index of the Cartesian axis associated to the variable.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_7id(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_6id, "Variable.id(self)\n\n        Return the index of the Cartesian axis associated to the variable.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(123)\n        >>> x.id()\n        123\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_8Variable_7id = {"id", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_7id, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_6id};
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_7id(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("id (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("id", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "id", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_6id(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_6id(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("id", 1);

  /* "pplite/linear_algebra.pyx":122
 *         123
 *         """
 *         return self.thisptr.id()             # <<<<<<<<<<<<<<
 * 
 *     def space_dimension(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->id()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":111
 *         raise TypeError('Variable unhashable')
 * 
 *     def id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the index of the Cartesian axis associated to the variable.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":124
 *         return self.thisptr.id()
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the dimension of the vector space enclosing ``self``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_9space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_8space_dimension, "Variable.space_dimension(self)\n\n        Return the dimension of the vector space enclosing ``self``.\n\n        OUTPUT:\n\n        Integer. The returned value is ``self.id()+1``.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> x.space_dimension()\n        1\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_8Variable_9space_dimension = {"space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_9space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_8space_dimension};
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_9space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("space_dimension (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("space_dimension", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "space_dimension", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_8space_dimension(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_8space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("space_dimension", 1);

  /* "pplite/linear_algebra.pyx":139
 *         1
 *         """
 *         return self.thisptr.space_dim()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->space_dim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":124
 *         return self.thisptr.id()
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the dimension of the vector space enclosing ``self``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.space_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":143
 * 
 * # TODO: Add test coverage.
 *     def swap(self, Variable w):             # <<<<<<<<<<<<<<
 *         swap(self.thisptr[0], w.thisptr[0])
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_11swap(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_10swap, "Variable.swap(self, Variable w)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_8Variable_11swap = {"swap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_11swap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_10swap};
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_11swap(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_w = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_w,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_w)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 143, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "swap") < 0)) __PYX_ERR(0, 143, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_w = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("swap", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 143, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.swap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w), __pyx_ptype_6pplite_14linear_algebra_Variable, 1, "w", 0))) __PYX_ERR(0, 143, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_10swap(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), __pyx_v_w);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_10swap(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_w) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap", 1);

  /* "pplite/linear_algebra.pyx":144
 * # TODO: Add test coverage.
 *     def swap(self, Variable w):
 *         swap(self.thisptr[0], w.thisptr[0])             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  pplite::swap((__pyx_v_self->thisptr[0]), (__pyx_v_w->thisptr[0]));

  /* "pplite/linear_algebra.pyx":145
 *     def swap(self, Variable w):
 *         swap(self.thisptr[0], w.thisptr[0])
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":143
 * 
 * # TODO: Add test coverage.
 *     def swap(self, Variable w):             # <<<<<<<<<<<<<<
 *         swap(self.thisptr[0], w.thisptr[0])
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":147
 *         return self
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return a string representation.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_12__repr__, "\n        Return a string representation.\n\n        OUTPUT:\n\n        String.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> x.__repr__()\n        'x0'\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_12__repr__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_12__repr__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_12__repr__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "pplite/linear_algebra.pyx":162
 *         'x0'
 *         """
 *         return 'x{0}'.format(self.id())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_x_0, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":147
 *         return self
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return a string representation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":164
 *         return 'x{0}'.format(self.id())
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the sum ``self`` + ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_15__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_14__add__, "\n        Return the sum ``self`` + ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything convertible to\n          ``Affine_Expression``: An integer, a :class:`Variable`,\n          :class:`Linear_Expression`, or :class`Affine_Expression`.\n\n        OUTPUT:\n\n        A :class:`Linear_Expression` or an .\n\n        Examples:\n\n        >>> from pplite import Variable, Linear_Expression, Affine_Expression\n        >>> x = Variable(0);\n        >>> y = Variable(1)\n        >>> x + y\n        x0+x1\n        >>> isinstance(x+y, Linear_Expression)\n        True\n        >>> isinstance(x+y, Affine_Expression)\n        False\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_14__add__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_15__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_14__add__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_14__add__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "pplite/linear_algebra.pyx":192
 *         # in pplite, Var v and Var w, the sum v+w is only defined as a linear expression,
 *         # not as an affine expression.
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             raise NotImplemented
 *         if not isinstance(other, Variable): # promote variable to linear expression.
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "pplite/linear_algebra.pyx":193
 *         # not as an affine expression.
 *         if not isinstance(self, Variable):
 *             raise NotImplemented             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Variable): # promote variable to linear expression.
 *             return Linear_Expression(self) +  other
 */
    __Pyx_Raise(__pyx_builtin_NotImplemented, 0, 0, 0);
    __PYX_ERR(0, 193, __pyx_L1_error)

    /* "pplite/linear_algebra.pyx":192
 *         # in pplite, Var v and Var w, the sum v+w is only defined as a linear expression,
 *         # not as an affine expression.
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             raise NotImplemented
 *         if not isinstance(other, Variable): # promote variable to linear expression.
 */
  }

  /* "pplite/linear_algebra.pyx":194
 *         if not isinstance(self, Variable):
 *             raise NotImplemented
 *         if not isinstance(other, Variable): # promote variable to linear expression.             # <<<<<<<<<<<<<<
 *             return Linear_Expression(self) +  other
 *         # only use this method if both classes are an instance of Variable
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_1 = (!__pyx_t_2);
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":195
 *             raise NotImplemented
 *         if not isinstance(other, Variable): # promote variable to linear expression.
 *             return Linear_Expression(self) +  other             # <<<<<<<<<<<<<<
 *         # only use this method if both classes are an instance of Variable
 *         other_var = <Variable> other
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_other); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":194
 *         if not isinstance(self, Variable):
 *             raise NotImplemented
 *         if not isinstance(other, Variable): # promote variable to linear expression.             # <<<<<<<<<<<<<<
 *             return Linear_Expression(self) +  other
 *         # only use this method if both classes are an instance of Variable
 */
  }

  /* "pplite/linear_algebra.pyx":197
 *             return Linear_Expression(self) +  other
 *         # only use this method if both classes are an instance of Variable
 *         other_var = <Variable> other             # <<<<<<<<<<<<<<
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])
 */
  __pyx_t_4 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":198
 *         # only use this method if both classes are an instance of Variable
 *         other_var = <Variable> other
 *         result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":199
 *         other_var = <Variable> other
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->thisptr = new pplite::Linear_Expr(((__pyx_v_self->thisptr[0]) + (__pyx_v_other_var->thisptr[0])));

  /* "pplite/linear_algebra.pyx":200
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __radd__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":164
 *         return 'x{0}'.format(self.id())
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the sum ``self`` + ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":202
 *         return result
 * 
 *     def __radd__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Variable):
 *             raise NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_17__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_17__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__radd__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_16__radd__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_16__radd__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__radd__", 1);

  /* "pplite/linear_algebra.pyx":203
 * 
 *     def __radd__(self, other):
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             raise NotImplemented
 *         if not isinstance(other, Variable):
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "pplite/linear_algebra.pyx":204
 *     def __radd__(self, other):
 *         if not isinstance(self, Variable):
 *             raise NotImplemented             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Variable):
 *             return other + Linear_Expression(self) # promote variable to linear expression
 */
    __Pyx_Raise(__pyx_builtin_NotImplemented, 0, 0, 0);
    __PYX_ERR(0, 204, __pyx_L1_error)

    /* "pplite/linear_algebra.pyx":203
 * 
 *     def __radd__(self, other):
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             raise NotImplemented
 *         if not isinstance(other, Variable):
 */
  }

  /* "pplite/linear_algebra.pyx":205
 *         if not isinstance(self, Variable):
 *             raise NotImplemented
 *         if not isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             return other + Linear_Expression(self) # promote variable to linear expression
 *         # only use this method if both classes are an instance of Variable
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_1 = (!__pyx_t_2);
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":206
 *             raise NotImplemented
 *         if not isinstance(other, Variable):
 *             return other + Linear_Expression(self) # promote variable to linear expression             # <<<<<<<<<<<<<<
 *         # only use this method if both classes are an instance of Variable
 *         other_var = <Variable> other
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_v_other, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":205
 *         if not isinstance(self, Variable):
 *             raise NotImplemented
 *         if not isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             return other + Linear_Expression(self) # promote variable to linear expression
 *         # only use this method if both classes are an instance of Variable
 */
  }

  /* "pplite/linear_algebra.pyx":208
 *             return other + Linear_Expression(self) # promote variable to linear expression
 *         # only use this method if both classes are an instance of Variable
 *         other_var = <Variable> other             # <<<<<<<<<<<<<<
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])
 */
  __pyx_t_4 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":209
 *         # only use this method if both classes are an instance of Variable
 *         other_var = <Variable> other
 *         result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":210
 *         other_var = <Variable> other
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])             # <<<<<<<<<<<<<<
 *         return result
 *         # ask about how to use unary + or what that might look like in cython.
 */
  __pyx_v_result->thisptr = new pplite::Linear_Expr(((__pyx_v_self->thisptr[0]) + (__pyx_v_other_var->thisptr[0])));

  /* "pplite/linear_algebra.pyx":211
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] + other_var.thisptr[0])
 *         return result             # <<<<<<<<<<<<<<
 *         # ask about how to use unary + or what that might look like in cython.
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":202
 *         return result
 * 
 *     def __radd__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Variable):
 *             raise NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__radd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":214
 *         # ask about how to use unary + or what that might look like in cython.
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the difference ``self`` - ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_19__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_18__sub__, "\n        Return the difference ``self`` - ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything convertible to\n          ``Linear_Expression``: An integer, a :class:`Variable`, or a\n          :class:`Linear_Expression`.\n\n        OUTPUT:\n\n        A :class:`Linear_Expression` representing ``self`` - ``other``.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0); y = Variable(1)\n        >>> x - y\n        x0-x1\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_18__sub__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_19__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_18__sub__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_18__sub__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "pplite/linear_algebra.pyx":235
 *         x0-x1
 *         """
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if not isinstance(other, Variable):
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":236
 *         """
 *         if not isinstance(self, Variable):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Variable):
 *             return Linear_Expression(self) - other
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":235
 *         x0-x1
 *         """
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if not isinstance(other, Variable):
 */
  }

  /* "pplite/linear_algebra.pyx":237
 *         if not isinstance(self, Variable):
 *             return NotImplemented
 *         if not isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             return Linear_Expression(self) - other
 *         other_var = <Variable> other
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_1 = (!__pyx_t_2);
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":238
 *             return NotImplemented
 *         if not isinstance(other, Variable):
 *             return Linear_Expression(self) - other             # <<<<<<<<<<<<<<
 *         other_var = <Variable> other
 *         result = Linear_Expression()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_v_other); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":237
 *         if not isinstance(self, Variable):
 *             return NotImplemented
 *         if not isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             return Linear_Expression(self) - other
 *         other_var = <Variable> other
 */
  }

  /* "pplite/linear_algebra.pyx":239
 *         if not isinstance(other, Variable):
 *             return Linear_Expression(self) - other
 *         other_var = <Variable> other             # <<<<<<<<<<<<<<
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] - other_var.thisptr[0])
 */
  __pyx_t_4 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":240
 *             return Linear_Expression(self) - other
 *         other_var = <Variable> other
 *         result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr = new Linear_Expr(self.thisptr[0] - other_var.thisptr[0])
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":241
 *         other_var = <Variable> other
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] - other_var.thisptr[0])             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->thisptr = new pplite::Linear_Expr(((__pyx_v_self->thisptr[0]) - (__pyx_v_other_var->thisptr[0])));

  /* "pplite/linear_algebra.pyx":242
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(self.thisptr[0] - other_var.thisptr[0])
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":214
 *         # ask about how to use unary + or what that might look like in cython.
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the difference ``self`` - ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":245
 * 
 * 
 *     def __rsub__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Variable):
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_21__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_21__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rsub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_20__rsub__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_20__rsub__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rsub__", 1);

  /* "pplite/linear_algebra.pyx":246
 * 
 *     def __rsub__(self, other):
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if not isinstance(other, Variable):
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":247
 *     def __rsub__(self, other):
 *         if not isinstance(self, Variable):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Variable):
 *             return other - Linear_Expression(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":246
 * 
 *     def __rsub__(self, other):
 *         if not isinstance(self, Variable):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if not isinstance(other, Variable):
 */
  }

  /* "pplite/linear_algebra.pyx":248
 *         if not isinstance(self, Variable):
 *             return NotImplemented
 *         if not isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             return other - Linear_Expression(self)
 *         other_var = <Variable> other
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  __pyx_t_1 = (!__pyx_t_2);
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":249
 *             return NotImplemented
 *         if not isinstance(other, Variable):
 *             return other - Linear_Expression(self)             # <<<<<<<<<<<<<<
 *         other_var = <Variable> other
 *         result = Linear_Expression()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_other, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":248
 *         if not isinstance(self, Variable):
 *             return NotImplemented
 *         if not isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             return other - Linear_Expression(self)
 *         other_var = <Variable> other
 */
  }

  /* "pplite/linear_algebra.pyx":250
 *         if not isinstance(other, Variable):
 *             return other - Linear_Expression(self)
 *         other_var = <Variable> other             # <<<<<<<<<<<<<<
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])
 */
  __pyx_t_4 = __pyx_v_other;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":251
 *             return other - Linear_Expression(self)
 *         other_var = <Variable> other
 *         result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":252
 *         other_var = <Variable> other
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result->thisptr = new pplite::Linear_Expr(((__pyx_v_other_var->thisptr[0]) - (__pyx_v_self->thisptr[0])));

  /* "pplite/linear_algebra.pyx":253
 *         result = Linear_Expression()
 *         result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":245
 * 
 * 
 *     def __rsub__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Variable):
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__rsub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":255
 *         return result
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the product ``self`` * ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_23__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_22__mul__, "\n        Return the product ``self`` * ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- One must be an integer, the other a\n          :class:`Variable`.\n\n        OUTPUT:\n\n        A :class:`Linear_Expression` representing ``self`` * ``other``.\n\n        Examples:\n\n        >>> from pplite import Variable, Linear_Expression\n        >>> x = Variable(0); y = Variable(1)\n        >>> x * 15\n        15*x0\n        >>> e = 15 * y; e\n        15*x1\n        >>> isinstance(e, Linear_Expression)\n        True\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_22__mul__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_23__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_22__mul__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_22__mul__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "pplite/linear_algebra.pyx":287
 *         # ...
 *         # TypeError: pplite coefficients must be integral
 *         if isinstance(self, Variable): # pplite doesn't explictly multiply Var and ints, convert to linear expr             # <<<<<<<<<<<<<<
 *             return Linear_Expression(self) * other
 *         return NotImplemented
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":288
 *         # TypeError: pplite coefficients must be integral
 *         if isinstance(self, Variable): # pplite doesn't explictly multiply Var and ints, convert to linear expr
 *             return Linear_Expression(self) * other             # <<<<<<<<<<<<<<
 *         return NotImplemented
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":287
 *         # ...
 *         # TypeError: pplite coefficients must be integral
 *         if isinstance(self, Variable): # pplite doesn't explictly multiply Var and ints, convert to linear expr             # <<<<<<<<<<<<<<
 *             return Linear_Expression(self) * other
 *         return NotImplemented
 */
  }

  /* "pplite/linear_algebra.pyx":289
 *         if isinstance(self, Variable): # pplite doesn't explictly multiply Var and ints, convert to linear expr
 *             return Linear_Expression(self) * other
 *         return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_builtin_NotImplemented);
  __pyx_r = __pyx_builtin_NotImplemented;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":255
 *         return result
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the product ``self`` * ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":291
 *         return NotImplemented
 * 
 *     def __rmul__(self, other):             # <<<<<<<<<<<<<<
 *         return Linear_Expression(self) * other
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_25__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_25__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_24__rmul__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_24__rmul__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 1);

  /* "pplite/linear_algebra.pyx":292
 * 
 *     def __rmul__(self, other):
 *         return Linear_Expression(self) * other             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":291
 *         return NotImplemented
 * 
 *     def __rmul__(self, other):             # <<<<<<<<<<<<<<
 *         return Linear_Expression(self) * other
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":296
 * 
 * # not in pplite but a useful convention of python and borader useablity
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return ``self`` as :class:`Linear_Expression`
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_27__pos__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_26__pos__, "\n        Return ``self`` as :class:`Linear_Expression`\n\n        OUTPUT:\n\n        The :class:`Linear_Expression` ``+self``\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0); x\n        x0\n        >>> +x\n        x0\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_26__pos__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_27__pos__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_26__pos__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_26__pos__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pos__", 1);

  /* "pplite/linear_algebra.pyx":312
 *         x0
 *         """
 *         return Linear_Expression(self)             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":296
 * 
 * # not in pplite but a useful convention of python and borader useablity
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return ``self`` as :class:`Linear_Expression`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__pos__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":314
 *         return Linear_Expression(self)
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return -``self`` as :class:`Linear_Expression`
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_29__neg__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_28__neg__, "\n        Return -``self`` as :class:`Linear_Expression`\n\n        OUTPUT:\n\n        The :class:`Linear_Expression` ``-self``\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0); x\n        x0\n        >>> -x\n        -x0\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_28__neg__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_29__neg__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_28__neg__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_28__neg__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__neg__", 1);

  /* "pplite/linear_algebra.pyx":330
 *         -x0
 *         """
 *         return Linear_Expression(self)*(-1)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_int_neg_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":314
 *         return Linear_Expression(self)
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return -``self`` as :class:`Linear_Expression`
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":332
 *         return Linear_Expression(self)*(-1)
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         """
 *         Construct :class:`Constraint` from equalities or inequalities.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_31__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_31__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 332, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_30__richcmp__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_DECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_30__richcmp__(struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 1);

  /* "pplite/linear_algebra.pyx":365
 *         # >>> 0*x == 1
 *         # -1==0
 *         return _make_Constraint_from_richcmp(self, other, op)             # <<<<<<<<<<<<<<
 * 
 * ####################################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pplite_10constraint__make_Constraint_from_richcmp(((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":332
 *         return Linear_Expression(self)*(-1)
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         """
 *         Construct :class:`Constraint` from equalities or inequalities.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_33__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_32__reduce_cython__, "Variable.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_8Variable_33__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_33__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_32__reduce_cython__};
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_33__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_32__reduce_cython__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_32__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_35__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_8Variable_34__setstate_cython__, "Variable.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_8Variable_35__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_35__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_34__setstate_cython__};
static PyObject *__pyx_pw_6pplite_14linear_algebra_8Variable_35__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_8Variable_34__setstate_cython__(((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_8Variable_34__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Variable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":443
 *     represent exact integers:
 *     """
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython constructor.
 */

/* Python wrapper */
static int __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression___init__, "\n        The Cython constructor.\n\n        See :class:`Linear_Expression` for documentation.\n\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression___init__;
#endif
static int __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression___init__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_14linear_algebra_17Linear_Expression___init__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_args) {
  pplite::dim_type __pyx_v_dim;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_b = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_e = NULL;
  PyObject *__pyx_v_arg = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::dim_type __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "pplite/linear_algebra.pyx":451
 *         """
 *         cdef dim_type dim
 *         if len(args) == 2:             # <<<<<<<<<<<<<<
 *             a = args[0]
 *             b = args[1]
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 451, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":452
 *         cdef dim_type dim
 *         if len(args) == 2:
 *             a = args[0]             # <<<<<<<<<<<<<<
 *             b = args[1]
 *             dim = b
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_a = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":453
 *         if len(args) == 2:
 *             a = args[0]
 *             b = args[1]             # <<<<<<<<<<<<<<
 *             dim = b
 *             if isinstance(a, Linear_Expression):
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_b = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":454
 *             a = args[0]
 *             b = args[1]
 *             dim = b             # <<<<<<<<<<<<<<
 *             if isinstance(a, Linear_Expression):
 *                 e = <Linear_Expression> a
 */
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_b); if (unlikely((__pyx_t_4 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
    __pyx_v_dim = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":455
 *             b = args[1]
 *             dim = b
 *             if isinstance(a, Linear_Expression):             # <<<<<<<<<<<<<<
 *                 e = <Linear_Expression> a
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_a, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":456
 *             dim = b
 *             if isinstance(a, Linear_Expression):
 *                 e = <Linear_Expression> a             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)
 *             return
 */
      __pyx_t_3 = __pyx_v_a;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_e = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":457
 *             if isinstance(a, Linear_Expression):
 *                 e = <Linear_Expression> a
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)             # <<<<<<<<<<<<<<
 *             return
 *         elif len(args) == 1:
 */
      __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_b); if (unlikely((__pyx_t_4 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L1_error)
      __pyx_v_self->thisptr = new pplite::Linear_Expr((__pyx_v_e->thisptr[0]), __pyx_t_4);

      /* "pplite/linear_algebra.pyx":455
 *             b = args[1]
 *             dim = b
 *             if isinstance(a, Linear_Expression):             # <<<<<<<<<<<<<<
 *                 e = <Linear_Expression> a
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)
 */
    }

    /* "pplite/linear_algebra.pyx":458
 *                 e = <Linear_Expression> a
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)
 *             return             # <<<<<<<<<<<<<<
 *         elif len(args) == 1:
 *             arg = args[0]
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":451
 *         """
 *         cdef dim_type dim
 *         if len(args) == 2:             # <<<<<<<<<<<<<<
 *             a = args[0]
 *             b = args[1]
 */
  }

  /* "pplite/linear_algebra.pyx":459
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)
 *             return
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             arg = args[0]
 *             if isinstance(arg, Variable):
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 459, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":460
 *             return
 *         elif len(args) == 1:
 *             arg = args[0]             # <<<<<<<<<<<<<<
 *             if isinstance(arg, Variable):
 *                 v = <Variable> arg
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":461
 *         elif len(args) == 1:
 *             arg = args[0]
 *             if isinstance(arg, Variable):             # <<<<<<<<<<<<<<
 *                 v = <Variable> arg
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_6pplite_14linear_algebra_Variable); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":462
 *             arg = args[0]
 *             if isinstance(arg, Variable):
 *                 v = <Variable> arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])
 *                 return
 */
      __pyx_t_3 = __pyx_v_arg;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_v = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":463
 *             if isinstance(arg, Variable):
 *                 v = <Variable> arg
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])             # <<<<<<<<<<<<<<
 *                 return
 *             if isinstance(arg, Linear_Expression):
 */
      __pyx_v_self->thisptr = new pplite::Linear_Expr((__pyx_v_v->thisptr[0]));

      /* "pplite/linear_algebra.pyx":464
 *                 v = <Variable> arg
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])
 *                 return             # <<<<<<<<<<<<<<
 *             if isinstance(arg, Linear_Expression):
 *                 e = <Linear_Expression> arg
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/linear_algebra.pyx":461
 *         elif len(args) == 1:
 *             arg = args[0]
 *             if isinstance(arg, Variable):             # <<<<<<<<<<<<<<
 *                 v = <Variable> arg
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])
 */
    }

    /* "pplite/linear_algebra.pyx":465
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])
 *                 return
 *             if isinstance(arg, Linear_Expression):             # <<<<<<<<<<<<<<
 *                 e = <Linear_Expression> arg
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":466
 *                 return
 *             if isinstance(arg, Linear_Expression):
 *                 e = <Linear_Expression> arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])
 *                 return
 */
      __pyx_t_3 = __pyx_v_arg;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_e = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":467
 *             if isinstance(arg, Linear_Expression):
 *                 e = <Linear_Expression> arg
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])             # <<<<<<<<<<<<<<
 *                 return
 *             if isinstance(arg, int):
 */
      __pyx_v_self->thisptr = new pplite::Linear_Expr((__pyx_v_e->thisptr[0]));

      /* "pplite/linear_algebra.pyx":468
 *                 e = <Linear_Expression> arg
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])
 *                 return             # <<<<<<<<<<<<<<
 *             if isinstance(arg, int):
 *                 dim = arg
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/linear_algebra.pyx":465
 *                 self.thisptr = new Linear_Expr(v.thisptr[0])
 *                 return
 *             if isinstance(arg, Linear_Expression):             # <<<<<<<<<<<<<<
 *                 e = <Linear_Expression> arg
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])
 */
    }

    /* "pplite/linear_algebra.pyx":469
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])
 *                 return
 *             if isinstance(arg, int):             # <<<<<<<<<<<<<<
 *                 dim = arg
 *                 self.thisptr = new Linear_Expr(dim)
 */
    __pyx_t_2 = PyInt_Check(__pyx_v_arg); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":470
 *                 return
 *             if isinstance(arg, int):
 *                 dim = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Linear_Expr(dim)
 *                 return
 */
      __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_arg); if (unlikely((__pyx_t_4 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L1_error)
      __pyx_v_dim = __pyx_t_4;

      /* "pplite/linear_algebra.pyx":471
 *             if isinstance(arg, int):
 *                 dim = arg
 *                 self.thisptr = new Linear_Expr(dim)             # <<<<<<<<<<<<<<
 *                 return
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")
 */
      __pyx_v_self->thisptr = new pplite::Linear_Expr(__pyx_v_dim);

      /* "pplite/linear_algebra.pyx":472
 *                 dim = arg
 *                 self.thisptr = new Linear_Expr(dim)
 *                 return             # <<<<<<<<<<<<<<
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")
 *         elif len(args) == 0:
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/linear_algebra.pyx":469
 *                 self.thisptr = new Linear_Expr(e.thisptr[0])
 *                 return
 *             if isinstance(arg, int):             # <<<<<<<<<<<<<<
 *                 dim = arg
 *                 self.thisptr = new Linear_Expr(dim)
 */
    }

    /* "pplite/linear_algebra.pyx":473
 *                 self.thisptr = new Linear_Expr(dim)
 *                 return
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")             # <<<<<<<<<<<<<<
 *         elif len(args) == 0:
 *             self.thisptr = new Linear_Expr()
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 473, __pyx_L1_error)

    /* "pplite/linear_algebra.pyx":459
 *                 self.thisptr = new Linear_Expr(e.thisptr[0], b)
 *             return
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             arg = args[0]
 *             if isinstance(arg, Variable):
 */
  }

  /* "pplite/linear_algebra.pyx":474
 *                 return
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Linear_Expr()
 *             return
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 474, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (likely(__pyx_t_2)) {

    /* "pplite/linear_algebra.pyx":475
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")
 *         elif len(args) == 0:
 *             self.thisptr = new Linear_Expr()             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */
    __pyx_v_self->thisptr = new pplite::Linear_Expr();

    /* "pplite/linear_algebra.pyx":476
 *         elif len(args) == 0:
 *             self.thisptr = new Linear_Expr()
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Cannot initialize with more than 2 arguments.")
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":474
 *                 return
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Linear_Expr()
 *             return
 */
  }

  /* "pplite/linear_algebra.pyx":478
 *             return
 *         else:
 *             raise ValueError("Cannot initialize with more than 2 arguments.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 478, __pyx_L1_error)
  }

  /* "pplite/linear_algebra.pyx":443
 *     represent exact integers:
 *     """
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython constructor.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":480
 *             raise ValueError("Cannot initialize with more than 2 arguments.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython destructor.
 */

/* Python wrapper */
static void __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_2__dealloc__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_2__dealloc__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {

  /* "pplite/linear_algebra.pyx":484
 *         The Cython destructor.
 *         """
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pplite/linear_algebra.pyx":480
 *             raise ValueError("Cannot initialize with more than 2 arguments.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython destructor.
 */

  /* function exit code */
}

/* "pplite/linear_algebra.pyx":486
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Tests:
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_5__hash__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_4__hash__, "\n        Tests:\n\n        >>> import pplite\n        >>> hash(pplite.Linear_Expression(10))\n        Traceback (most recent call last):\n        ...\n        TypeError: Linear_Expression unhashable\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_4__hash__;
#endif
static Py_hash_t __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_5__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_4__hash__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_4__hash__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 1);

  /* "pplite/linear_algebra.pyx":496
 *         TypeError: Linear_Expression unhashable
 *         """
 *         raise TypeError('Linear_Expression unhashable')             # <<<<<<<<<<<<<<
 * 
 *     def space_dimension(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 496, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":486
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Tests:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":498
 *         raise TypeError('Linear_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_7space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_6space_dimension, "Linear_Expression.space_dimension(self)\n\n        Return the dimension of the vector space necessary for the\n        linear expression.\n\n        OUTPUT:\n\n        Integer.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> (x+y).space_dimension()\n        2\n        >>> (x+y).space_dimension()\n        2\n        >>> (y).space_dimension()\n        2\n        >>> (x).space_dimension()\n        1\n        >>> (y-y).space_dimension()\n        2\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_7space_dimension = {"space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_7space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_6space_dimension};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_7space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("space_dimension (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("space_dimension", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "space_dimension", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_6space_dimension(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_6space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("space_dimension", 1);

  /* "pplite/linear_algebra.pyx":523
 *         2
 *         """
 *         return self.thisptr.space_dim()             # <<<<<<<<<<<<<<
 * 
 *     def set_space_dimension(self, dim_type dim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->space_dim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":498
 *         raise TypeError('Linear_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.space_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":525
 *         return self.thisptr.space_dim()
 * 
 *     def set_space_dimension(self, dim_type dim):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_space_dim(dim)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_9set_space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_8set_space_dimension, "Linear_Expression.set_space_dimension(self, dim_type dim)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_9set_space_dimension = {"set_space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_9set_space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_8set_space_dimension};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_9set_space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  pplite::dim_type __pyx_v_dim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_space_dimension (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dim)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_space_dimension") < 0)) __PYX_ERR(0, 525, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_dim = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_dim == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_space_dimension", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 525, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.set_space_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_8set_space_dimension(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_dim);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_8set_space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, pplite::dim_type __pyx_v_dim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_space_dimension", 1);

  /* "pplite/linear_algebra.pyx":526
 * 
 *     def set_space_dimension(self, dim_type dim):
 *         self.thisptr.set_space_dim(dim)             # <<<<<<<<<<<<<<
 * 
 *     def coefficient(self, v):
 */
  __pyx_v_self->thisptr->set_space_dim(__pyx_v_dim);

  /* "pplite/linear_algebra.pyx":525
 *         return self.thisptr.space_dim()
 * 
 *     def set_space_dimension(self, dim_type dim):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_space_dim(dim)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":528
 *         self.thisptr.set_space_dim(dim)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_11coefficient(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_10coefficient, "Linear_Expression.coefficient(self, v)\n\n        Return the coefficient of the variable ``v``.\n\n        INPUT:\n\n        - ``v`` -- a :class:`Variable`.\n\n        OUTPUT:\n\n        An (Python) Integer. \n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> e = 3*x\n        >>> e.coefficient(x)\n        mpz(3)\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_11coefficient = {"coefficient", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_11coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_10coefficient};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_11coefficient(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_v = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coefficient (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "coefficient") < 0)) __PYX_ERR(0, 528, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_v = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coefficient", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 528, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_10coefficient(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_10coefficient(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_v) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_vv = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::vector<pplite::FLINT_Integer> ::size_type __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("coefficient", 1);

  /* "pplite/linear_algebra.pyx":552
 *         cdef Variable vv # rewrite this method to read coeffs correctly
 * 
 *         if type(v) is Variable:             # <<<<<<<<<<<<<<
 *             vv = <Variable> v
 *         else:
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_v)) == ((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable));
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":553
 * 
 *         if type(v) is Variable:
 *             vv = <Variable> v             # <<<<<<<<<<<<<<
 *         else:
 *             vv = Variable(v)
 */
    __pyx_t_2 = __pyx_v_v;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_vv = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":552
 *         cdef Variable vv # rewrite this method to read coeffs correctly
 * 
 *         if type(v) is Variable:             # <<<<<<<<<<<<<<
 *             vv = <Variable> v
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":555
 *             vv = <Variable> v
 *         else:
 *             vv = Variable(v)             # <<<<<<<<<<<<<<
 *         return FLINT_Integer_to_Python(self.thisptr.impl()[vv.id()])
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable), __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_vv = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":556
 *         else:
 *             vv = Variable(v)
 *         return FLINT_Integer_to_Python(self.thisptr.impl()[vv.id()])             # <<<<<<<<<<<<<<
 * 
 *     def set_coefficient(self, i, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_vv), __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_f_6pplite_14linear_algebra_FLINT_Integer_to_Python((__pyx_v_self->thisptr->impl()[__pyx_t_6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":528
 *         self.thisptr.set_space_dim(dim)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":558
 *         return FLINT_Integer_to_Python(self.thisptr.impl()[vv.id()])
 * 
 *     def set_coefficient(self, i, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the ``i``-th coefficient to ``n``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_13set_coefficient(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_12set_coefficient, "Linear_Expression.set_coefficient(self, i, n)\n\n        Set the ``i``-th coefficient to ``n``.\n\n        INPUT:\n\n        - ``i`` - variable or variable index\n\n        - ``n`` - integer\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L = Variable(0) + (3 * Variable(1)); L\n        x0+3*x1\n        >>> L.set_coefficient(1, -5)\n        >>> L\n        x0-5*x1\n        >>> L.set_coefficient(3, 7); L\n        x0-5*x1+7*x3\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_13set_coefficient = {"set_coefficient", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_13set_coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_12set_coefficient};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_13set_coefficient(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_coefficient (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_n,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_coefficient", 1, 2, 2, 1); __PYX_ERR(0, 558, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_coefficient") < 0)) __PYX_ERR(0, 558, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_i = values[0];
    __pyx_v_n = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_coefficient", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 558, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.set_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_12set_coefficient(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_i, __pyx_v_n);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_12set_coefficient(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_n) {
  pplite::FLINT_Integer __pyx_v_nn;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_ii = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_var_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  pplite::FLINT_Integer __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_coefficient", 1);

  /* "pplite/linear_algebra.pyx":580
 *         """
 *         cdef FLINT_Integer nn
 *         if isinstance(i, Variable):             # <<<<<<<<<<<<<<
 *             ii = <Variable> i
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_i, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":581
 *         cdef FLINT_Integer nn
 *         if isinstance(i, Variable):
 *             ii = <Variable> i             # <<<<<<<<<<<<<<
 *         else:
 *             var_i = Variable(i)
 */
    __pyx_t_2 = __pyx_v_i;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_ii = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":580
 *         """
 *         cdef FLINT_Integer nn
 *         if isinstance(i, Variable):             # <<<<<<<<<<<<<<
 *             ii = <Variable> i
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":583
 *             ii = <Variable> i
 *         else:
 *             var_i = Variable(i)             # <<<<<<<<<<<<<<
 *             ii = <Variable> var_i
 *         nn = Python_int_to_FLINT_Integer(n)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable), __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_var_i = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":584
 *         else:
 *             var_i = Variable(i)
 *             ii = <Variable> var_i             # <<<<<<<<<<<<<<
 *         nn = Python_int_to_FLINT_Integer(n)
 *         (<Linear_Expression> self).thisptr[0].set(ii.thisptr[0], nn)
 */
    __pyx_t_2 = ((PyObject *)__pyx_v_var_i);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_ii = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":585
 *             var_i = Variable(i)
 *             ii = <Variable> var_i
 *         nn = Python_int_to_FLINT_Integer(n)             # <<<<<<<<<<<<<<
 *         (<Linear_Expression> self).thisptr[0].set(ii.thisptr[0], nn)
 *         # raise NotImplementedError
 */
  __pyx_t_3 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_n); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_v_nn = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/linear_algebra.pyx":586
 *             ii = <Variable> var_i
 *         nn = Python_int_to_FLINT_Integer(n)
 *         (<Linear_Expression> self).thisptr[0].set(ii.thisptr[0], nn)             # <<<<<<<<<<<<<<
 *         # raise NotImplementedError
 *     def __repr__(self):
 */
  (__pyx_v_self->thisptr[0]).set((__pyx_v_ii->thisptr[0]), __pyx_v_nn);

  /* "pplite/linear_algebra.pyx":558
 *         return FLINT_Integer_to_Python(self.thisptr.impl()[vv.id()])
 * 
 *     def set_coefficient(self, i, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the ``i``-th coefficient to ``n``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.set_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ii);
  __Pyx_XDECREF((PyObject *)__pyx_v_var_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":588
 *         (<Linear_Expression> self).thisptr[0].set(ii.thisptr[0], nn)
 *         # raise NotImplementedError
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return a string representation of the linear expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_14__repr__, "\n        Return a string representation of the linear expression.\n\n        OUTPUT:\n\n        A string.\n\n        Examples:\n\n        >>> from pplite import Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x\n        x0\n        >>> x-x\n        0\n        >>> 2*x\n        2*x0\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_14__repr__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_14__repr__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_14__repr__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  int __pyx_v_first;
  PyObject *__pyx_v_i = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_x = NULL;
  PyObject *__pyx_v_coeff = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "pplite/linear_algebra.pyx":608
 *         2*x0
 *         """
 *         s = ''             # <<<<<<<<<<<<<<
 *         first = True
 *         for i in range(self.space_dimension()):
 */
  __Pyx_INCREF(__pyx_kp_u__6);
  __pyx_v_s = __pyx_kp_u__6;

  /* "pplite/linear_algebra.pyx":609
 *         """
 *         s = ''
 *         first = True             # <<<<<<<<<<<<<<
 *         for i in range(self.space_dimension()):
 *             x = Variable(i)
 */
  __pyx_v_first = 1;

  /* "pplite/linear_algebra.pyx":610
 *         s = ''
 *         first = True
 *         for i in range(self.space_dimension()):             # <<<<<<<<<<<<<<
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_space_dimension); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 610, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 610, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 610, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 610, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 610, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 610, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":611
 *         first = True
 *         for i in range(self.space_dimension()):
 *             x = Variable(i)             # <<<<<<<<<<<<<<
 *             coeff = self.coefficient(x)
 *             if coeff == 0:
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable), __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_x, ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":612
 *         for i in range(self.space_dimension()):
 *             x = Variable(i)
 *             coeff = self.coefficient(x)             # <<<<<<<<<<<<<<
 *             if coeff == 0:
 *                 continue
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coefficient); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_x)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_coeff, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":613
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 *             if coeff == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             if first and coeff == 1:
 */
    __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 613, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":614
 *             coeff = self.coefficient(x)
 *             if coeff == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             if first and coeff == 1:
 *                 s += '%r' % x
 */
      goto __pyx_L3_continue;

      /* "pplite/linear_algebra.pyx":613
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 *             if coeff == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             if first and coeff == 1:
 */
    }

    /* "pplite/linear_algebra.pyx":615
 *             if coeff == 0:
 *                 continue
 *             if first and coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '%r' % x
 *                 first = False
 */
    if (__pyx_v_first) {
    } else {
      __pyx_t_8 = __pyx_v_first;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_9 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 615, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":616
 *                 continue
 *             if first and coeff == 1:
 *                 s += '%r' % x             # <<<<<<<<<<<<<<
 *                 first = False
 *             elif first and coeff == -1:
 */
      __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_r, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":617
 *             if first and coeff == 1:
 *                 s += '%r' % x
 *                 first = False             # <<<<<<<<<<<<<<
 *             elif first and coeff == -1:
 *                 s += '-%r' % x
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":615
 *             if coeff == 0:
 *                 continue
 *             if first and coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '%r' % x
 *                 first = False
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":618
 *                 s += '%r' % x
 *                 first = False
 *             elif first and coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *                 first = False
 */
    if (__pyx_v_first) {
    } else {
      __pyx_t_8 = __pyx_v_first;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_9 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 618, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_9;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":619
 *                 first = False
 *             elif first and coeff == -1:
 *                 s += '-%r' % x             # <<<<<<<<<<<<<<
 *                 first = False
 *             elif first and coeff != 1:
 */
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_r_2, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":620
 *             elif first and coeff == -1:
 *                 s += '-%r' % x
 *                 first = False             # <<<<<<<<<<<<<<
 *             elif first and coeff != 1:
 *                 s += '%d*%r' % (coeff, x)
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":618
 *                 s += '%r' % x
 *                 first = False
 *             elif first and coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *                 first = False
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":621
 *                 s += '-%r' % x
 *                 first = False
 *             elif first and coeff != 1:             # <<<<<<<<<<<<<<
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 */
    if (__pyx_v_first) {
    } else {
      __pyx_t_8 = __pyx_v_first;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_9 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_coeff, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 621, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":622
 *                 first = False
 *             elif first and coeff != 1:
 *                 s += '%d*%r' % (coeff, x)             # <<<<<<<<<<<<<<
 *                 first = False
 *             elif coeff == 1:
 */
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_coeff), __pyx_n_u_d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__7);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__7);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u__7);
      __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(((PyObject *)__pyx_v_x)), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":623
 *             elif first and coeff != 1:
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False             # <<<<<<<<<<<<<<
 *             elif coeff == 1:
 *                 s += '+%r' % x
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":621
 *                 s += '-%r' % x
 *                 first = False
 *             elif first and coeff != 1:             # <<<<<<<<<<<<<<
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":624
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 *             elif coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '+%r' % x
 *             elif coeff == -1:
 */
    __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 624, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":625
 *                 first = False
 *             elif coeff == 1:
 *                 s += '+%r' % x             # <<<<<<<<<<<<<<
 *             elif coeff == -1:
 *                 s += '-%r' % x
 */
      __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_r_3, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":624
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 *             elif coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '+%r' % x
 *             elif coeff == -1:
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":626
 *             elif coeff == 1:
 *                 s += '+%r' % x
 *             elif coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *             else:
 */
    __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 626, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":627
 *                 s += '+%r' % x
 *             elif coeff == -1:
 *                 s += '-%r' % x             # <<<<<<<<<<<<<<
 *             else:
 *                 s += '%+d*%r' % (coeff, x)
 */
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_r_2, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":626
 *             elif coeff == 1:
 *                 s += '+%r' % x
 *             elif coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *             else:
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":629
 *                 s += '-%r' % x
 *             else:
 *                 s += '%+d*%r' % (coeff, x)             # <<<<<<<<<<<<<<
 *         if first:
 *             s = '0'
 */
    /*else*/ {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_coeff);
      __Pyx_GIVEREF(__pyx_v_coeff);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_coeff)) __PYX_ERR(0, 629, __pyx_L1_error);
      __Pyx_INCREF((PyObject *)__pyx_v_x);
      __Pyx_GIVEREF((PyObject *)__pyx_v_x);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_x))) __PYX_ERR(0, 629, __pyx_L1_error);
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_d_r, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;
    }
    __pyx_L6:;

    /* "pplite/linear_algebra.pyx":610
 *         s = ''
 *         first = True
 *         for i in range(self.space_dimension()):             # <<<<<<<<<<<<<<
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pplite/linear_algebra.pyx":630
 *             else:
 *                 s += '%+d*%r' % (coeff, x)
 *         if first:             # <<<<<<<<<<<<<<
 *             s = '0'
 *         return s
 */
  if (__pyx_v_first) {

    /* "pplite/linear_algebra.pyx":631
 *                 s += '%+d*%r' % (coeff, x)
 *         if first:
 *             s = '0'             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __Pyx_INCREF(__pyx_kp_u_0);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_kp_u_0);

    /* "pplite/linear_algebra.pyx":630
 *             else:
 *                 s += '%+d*%r' % (coeff, x)
 *         if first:             # <<<<<<<<<<<<<<
 *             s = '0'
 *         return s
 */
  }

  /* "pplite/linear_algebra.pyx":632
 *         if first:
 *             s = '0'
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def swap_space_dimensions(self, v1, v2):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":588
 *         (<Linear_Expression> self).thisptr[0].set(ii.thisptr[0], nn)
 *         # raise NotImplementedError
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return a string representation of the linear expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_coeff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":634
 *         return s
 * 
 *     def swap_space_dimensions(self, v1, v2):             # <<<<<<<<<<<<<<
 *         r"""
 *         Swaps the coefficients of ``v1`` and ``v2``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_17swap_space_dimensions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_16swap_space_dimensions, "Linear_Expression.swap_space_dimensions(self, v1, v2)\n\n        Swaps the coefficients of ``v1`` and ``v2``.\n\n        INPUT:\n\n        - ``v1``, ``v2`` - variables or indices of variables\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L = Variable(1) - 3 * Variable(3); L\n        x1-3*x3\n        >>> L.swap_space_dimensions(Variable(1), Variable(3))\n        >>> L\n        -3*x1+x3\n        >>> L = Variable(1) - 3 * Variable(3)\n        >>> L.swap_space_dimensions(1, 3)\n        >>> L\n        -3*x1+x3\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_17swap_space_dimensions = {"swap_space_dimensions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_17swap_space_dimensions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_16swap_space_dimensions};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_17swap_space_dimensions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_v1 = 0;
  PyObject *__pyx_v_v2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("swap_space_dimensions (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v1,&__pyx_n_s_v2,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v1)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v2)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("swap_space_dimensions", 1, 2, 2, 1); __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "swap_space_dimensions") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_v1 = values[0];
    __pyx_v_v2 = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("swap_space_dimensions", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.swap_space_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_16swap_space_dimensions(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_v1, __pyx_v_v2);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_16swap_space_dimensions(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_v1, PyObject *__pyx_v_v2) {
  pplite::dim_type __pyx_v_var_1;
  pplite::dim_type __pyx_v_var_2;
  pplite::Var *__pyx_v_vv1;
  pplite::Var *__pyx_v_vv2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  pplite::dim_type __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("swap_space_dimensions", 1);

  /* "pplite/linear_algebra.pyx":656
 *         """
 *         cdef dim_type var_1, var_2
 *         if isinstance(v1, Variable):             # <<<<<<<<<<<<<<
 *             var_1 = v1.id()
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v1, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":657
 *         cdef dim_type var_1, var_2
 *         if isinstance(v1, Variable):
 *             var_1 = v1.id()             # <<<<<<<<<<<<<<
 *         else:
 *             vv1 = new Var(v1)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_v1, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_var_1 = __pyx_t_6;

    /* "pplite/linear_algebra.pyx":656
 *         """
 *         cdef dim_type var_1, var_2
 *         if isinstance(v1, Variable):             # <<<<<<<<<<<<<<
 *             var_1 = v1.id()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":659
 *             var_1 = v1.id()
 *         else:
 *             vv1 = new Var(v1)             # <<<<<<<<<<<<<<
 *             var_1 = vv1.id()
 *         if isinstance(v2, Variable):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_v1); if (unlikely((__pyx_t_6 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L1_error)
    __pyx_v_vv1 = new pplite::Var(__pyx_t_6);

    /* "pplite/linear_algebra.pyx":660
 *         else:
 *             vv1 = new Var(v1)
 *             var_1 = vv1.id()             # <<<<<<<<<<<<<<
 *         if isinstance(v2, Variable):
 *             var_2 = v2.id()
 */
    __pyx_v_var_1 = __pyx_v_vv1->id();
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":661
 *             vv1 = new Var(v1)
 *             var_1 = vv1.id()
 *         if isinstance(v2, Variable):             # <<<<<<<<<<<<<<
 *             var_2 = v2.id()
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v2, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":662
 *             var_1 = vv1.id()
 *         if isinstance(v2, Variable):
 *             var_2 = v2.id()             # <<<<<<<<<<<<<<
 *         else:
 *             vv2 = new Var(v2)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_v2, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_var_2 = __pyx_t_6;

    /* "pplite/linear_algebra.pyx":661
 *             vv1 = new Var(v1)
 *             var_1 = vv1.id()
 *         if isinstance(v2, Variable):             # <<<<<<<<<<<<<<
 *             var_2 = v2.id()
 *         else:
 */
    goto __pyx_L4;
  }

  /* "pplite/linear_algebra.pyx":664
 *             var_2 = v2.id()
 *         else:
 *             vv2 = new Var(v2)             # <<<<<<<<<<<<<<
 *             var_2 = vv2.id()
 *         self.thisptr.swap_space_dims(var_1, var_2)
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_v2); if (unlikely((__pyx_t_6 == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 664, __pyx_L1_error)
    __pyx_v_vv2 = new pplite::Var(__pyx_t_6);

    /* "pplite/linear_algebra.pyx":665
 *         else:
 *             vv2 = new Var(v2)
 *             var_2 = vv2.id()             # <<<<<<<<<<<<<<
 *         self.thisptr.swap_space_dims(var_1, var_2)
 * 
 */
    __pyx_v_var_2 = __pyx_v_vv2->id();
  }
  __pyx_L4:;

  /* "pplite/linear_algebra.pyx":666
 *             vv2 = new Var(v2)
 *             var_2 = vv2.id()
 *         self.thisptr.swap_space_dims(var_1, var_2)             # <<<<<<<<<<<<<<
 * 
 *     def shift_space_dimensions(self, v, dim_type n):
 */
  __pyx_v_self->thisptr->swap_space_dims(__pyx_v_var_1, __pyx_v_var_2);

  /* "pplite/linear_algebra.pyx":634
 *         return s
 * 
 *     def swap_space_dimensions(self, v1, v2):             # <<<<<<<<<<<<<<
 *         r"""
 *         Swaps the coefficients of ``v1`` and ``v2``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.swap_space_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":668
 *         self.thisptr.swap_space_dims(var_1, var_2)
 * 
 *     def shift_space_dimensions(self, v, dim_type n):             # <<<<<<<<<<<<<<
 *         r"""
 *         Shift by ``n`` the coefficients of variables starting from the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_19shift_space_dimensions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_18shift_space_dimensions, "Linear_Expression.shift_space_dimensions(self, v, dim_type n)\n\n        Shift by ``n`` the coefficients of variables starting from the\n        coefficient of ``v``.\n\n        This increases the space dimension by ``n``.\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L = Variable(0) + 13 * Variable(2) + 5 * Variable(7)\n        >>> L\n        x0+13*x2+5*x7\n        >>> L.shift_space_dimensions(Variable(2), 2)\n        >>> L\n        x0+13*x4+5*x9\n        >>> L.shift_space_dimensions(Variable(7), 3)\n        >>> L\n        x0+13*x4+5*x12\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_19shift_space_dimensions = {"shift_space_dimensions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_19shift_space_dimensions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_18shift_space_dimensions};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_19shift_space_dimensions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_v = 0;
  pplite::dim_type __pyx_v_n;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shift_space_dimensions (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,&__pyx_n_s_n,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("shift_space_dimensions", 1, 2, 2, 1); __PYX_ERR(0, 668, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "shift_space_dimensions") < 0)) __PYX_ERR(0, 668, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_v = values[0];
    __pyx_v_n = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_n == ((pplite::dim_type)-1)) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shift_space_dimensions", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 668, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.shift_space_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_18shift_space_dimensions(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_v, __pyx_v_n);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_18shift_space_dimensions(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_v, pplite::dim_type __pyx_v_n) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_vv = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shift_space_dimensions", 1);

  /* "pplite/linear_algebra.pyx":689
 *         """
 *         cdef Variable vv
 *         if type(v) is Variable:             # <<<<<<<<<<<<<<
 *             vv = <Variable> v
 *         else:
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_v)) == ((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable));
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":690
 *         cdef Variable vv
 *         if type(v) is Variable:
 *             vv = <Variable> v             # <<<<<<<<<<<<<<
 *         else:
 *             vv = Variable(v)
 */
    __pyx_t_2 = __pyx_v_v;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_vv = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":689
 *         """
 *         cdef Variable vv
 *         if type(v) is Variable:             # <<<<<<<<<<<<<<
 *             vv = <Variable> v
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":692
 *             vv = <Variable> v
 *         else:
 *             vv = Variable(v)             # <<<<<<<<<<<<<<
 *         self.thisptr.shift_space_dims(vv.thisptr[0], n)
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable), __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_vv = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":693
 *         else:
 *             vv = Variable(v)
 *         self.thisptr.shift_space_dims(vv.thisptr[0], n)             # <<<<<<<<<<<<<<
 * 
 *     # def remove_space_dimensions(self, Variables_Set V):
 */
  __pyx_v_self->thisptr->shift_space_dims((__pyx_v_vv->thisptr[0]), __pyx_v_n);

  /* "pplite/linear_algebra.pyx":668
 *         self.thisptr.swap_space_dims(var_1, var_2)
 * 
 *     def shift_space_dimensions(self, v, dim_type n):             # <<<<<<<<<<<<<<
 *         r"""
 *         Shift by ``n`` the coefficients of variables starting from the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.shift_space_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_vv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":713
 *     #     self.thisptr.remove_space_dimensions(V.thisptr[0])
 * 
 *     def all_homogeneous_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_21all_homogeneous_terms_are_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_20all_homogeneous_terms_are_zero, "Linear_Expression.all_homogeneous_terms_are_zero(self)\n\n        Test if ``self`` is a constant linear expression.\n\n        OUTPUT:\n\n        Boolean.\n\n        Examples:\n\n        >>> from pplite import Variable, Linear_Expression\n        >>> x = Variable(1)\n        >>> (x-x).all_homogeneous_terms_are_zero()\n        True\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_21all_homogeneous_terms_are_zero = {"all_homogeneous_terms_are_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_21all_homogeneous_terms_are_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_20all_homogeneous_terms_are_zero};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_21all_homogeneous_terms_are_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all_homogeneous_terms_are_zero (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("all_homogeneous_terms_are_zero", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "all_homogeneous_terms_are_zero", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_20all_homogeneous_terms_are_zero(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_20all_homogeneous_terms_are_zero(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("all_homogeneous_terms_are_zero", 1);

  /* "pplite/linear_algebra.pyx":728
 *         True
 *         """
 *         return self.thisptr.is_zero()             # <<<<<<<<<<<<<<
 * 
 *     def is_equal_to(self, Linear_Expression other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->is_zero()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":713
 *     #     self.thisptr.remove_space_dimensions(V.thisptr[0])
 * 
 *     def all_homogeneous_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.all_homogeneous_terms_are_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":730
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Linear_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another linear expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_23is_equal_to(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_22is_equal_to, "Linear_Expression.is_equal_to(self, Linear_Expression other)\n\n        Test equality with another linear expression.\n\n        OUTPUT: boolean\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> L1 = Variable(0) + 2 * Variable(3)\n        >>> L2 = Variable(0) + 2 * Variable(3)\n        >>> L3 = Variable(0) - Variable(2)\n        >>> L1.is_equal_to(L2)\n        True\n        >>> L1.is_equal_to(L3)\n        False\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_23is_equal_to = {"is_equal_to", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_23is_equal_to, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_22is_equal_to};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_23is_equal_to(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_equal_to (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_equal_to") < 0)) __PYX_ERR(0, 730, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_equal_to", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 730, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.is_equal_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression, 1, "other", 0))) __PYX_ERR(0, 730, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_22is_equal_to(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_22is_equal_to(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_equal_to", 1);

  /* "pplite/linear_algebra.pyx":747
 *         False
 *         """
 *         return self.thisptr.is_equal_to(other.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->is_equal_to((__pyx_v_other->thisptr[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":730
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Linear_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another linear expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.is_equal_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":749
 *         return self.thisptr.is_equal_to(other.thisptr[0])
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Add ``self`` and ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_25__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_24__add__, "\n        Add ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Linear_Expression` or :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Linear_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Linear_Expression` or :class:`Affine_Expression` depending on input.\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x + y + y + y\n        x0+3*x1\n        >>> e = x + y + x\n        >>> isinstance(e, Linear_Expression)\n        True\n        >>> e2 = 7 + e; e2\n        2*x0+x1+7\n        >>> isinstance(e2, Linear_Expression)\n        False\n        >>> isinstance(e2, Affine_Expression)\n        True\n        >>> e + 7\n        2*x0+x1+7\n        >>> e + Variable(0)\n        3*x0+x1\n        >>> Variable(1) + e\n        2*x0+2*x1\n        >>> e3 = e + e2; e3\n        4*x0+2*x1+7\n        >>> isinstance(e3, Affine_Expression)\n        True\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_24__add__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_25__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_24__add__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_24__add__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  pplite::Linear_Expr *__pyx_v_lhs_expr;
  pplite::Linear_Expr *__pyx_v_rhs_expr;
  pplite::Linear_Expr __pyx_v_result_expr;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result_aff = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::Linear_Expr *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "pplite/linear_algebra.pyx":792
 *         True
 *         """
 *         if not isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         # to mimic pplite, we use cases for type conversions.
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":793
 *         """
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         # to mimic pplite, we use cases for type conversions.
 *         # case 1: linear_expr + var -> linear_expr
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":792
 *         True
 *         """
 *         if not isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         # to mimic pplite, we use cases for type conversions.
 */
  }

  /* "pplite/linear_algebra.pyx":796
 *         # to mimic pplite, we use cases for type conversions.
 *         # case 1: linear_expr + var -> linear_expr
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":797
 *         # case 1: linear_expr + var -> linear_expr
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other             # <<<<<<<<<<<<<<
 *             result = Linear_Expression()
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] + self.thisptr[0])
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":798
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 *             result = Linear_Expression()             # <<<<<<<<<<<<<<
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] + self.thisptr[0])
 *             return result
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":799
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] + self.thisptr[0])             # <<<<<<<<<<<<<<
 *             return result
 *         # case 2: linear_expr + linear_expr -> linear_expr
 */
    __pyx_v_result->thisptr = new pplite::Linear_Expr(((__pyx_v_other_var->thisptr[0]) + (__pyx_v_self->thisptr[0])));

    /* "pplite/linear_algebra.pyx":800
 *             result = Linear_Expression()
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] + self.thisptr[0])
 *             return result             # <<<<<<<<<<<<<<
 *         # case 2: linear_expr + linear_expr -> linear_expr
 *         cdef Linear_Expr* lhs_expr
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":796
 *         # to mimic pplite, we use cases for type conversions.
 *         # case 1: linear_expr + var -> linear_expr
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 */
  }

  /* "pplite/linear_algebra.pyx":805
 *         cdef Linear_Expr* rhs_expr
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":806
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):
 *             lhs_expr = (<Linear_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = lhs_expr[0] + rhs_expr[0]
 */
    __pyx_t_4 = __pyx_v_self->thisptr;
    __pyx_v_lhs_expr = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":807
 *         if isinstance(other, Linear_Expression):
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             result_expr = lhs_expr[0] + rhs_expr[0]
 *             result = Linear_Expression()
 */
    __pyx_t_4 = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_rhs_expr = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":808
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = lhs_expr[0] + rhs_expr[0]             # <<<<<<<<<<<<<<
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr
 */
    __pyx_v_result_expr = ((__pyx_v_lhs_expr[0]) + (__pyx_v_rhs_expr[0]));

    /* "pplite/linear_algebra.pyx":809
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = lhs_expr[0] + rhs_expr[0]
 *             result = Linear_Expression()             # <<<<<<<<<<<<<<
 *             result.thisptr[0] = result_expr
 *             return result
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":810
 *             result_expr = lhs_expr[0] + rhs_expr[0]
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr             # <<<<<<<<<<<<<<
 *             return result
 *         # case 3: linear_expr + affine_expr -> affine_expr
 */
    (__pyx_v_result->thisptr[0]) = __pyx_v_result_expr;

    /* "pplite/linear_algebra.pyx":811
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr
 *             return result             # <<<<<<<<<<<<<<
 *         # case 3: linear_expr + affine_expr -> affine_expr
 *         # this should be handeled by the affine expression class
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":805
 *         cdef Linear_Expr* rhs_expr
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":814
 *         # case 3: linear_expr + affine_expr -> affine_expr
 *         # this should be handeled by the affine expression class
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         # case 4, linear_expr + integer -> affine expression
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":815
 *         # this should be handeled by the affine expression class
 *         if isinstance(other, Affine_Expression):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         # case 4, linear_expr + integer -> affine expression
 *         # other should be an integer of some sorts
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":814
 *         # case 3: linear_expr + affine_expr -> affine_expr
 *         # this should be handeled by the affine expression class
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         # case 4, linear_expr + integer -> affine expression
 */
  }

  /* "pplite/linear_algebra.pyx":818
 *         # case 4, linear_expr + integer -> affine expression
 *         # other should be an integer of some sorts
 *         result_aff = Affine_Expression(self, other)             # <<<<<<<<<<<<<<
 *         return result_aff
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 818, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_other)) __PYX_ERR(0, 818, __pyx_L1_error);
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result_aff = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pplite/linear_algebra.pyx":819
 *         # other should be an integer of some sorts
 *         result_aff = Affine_Expression(self, other)
 *         return result_aff             # <<<<<<<<<<<<<<
 * 
 *     def __radd__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result_aff);
  __pyx_r = ((PyObject *)__pyx_v_result_aff);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":749
 *         return self.thisptr.is_equal_to(other.thisptr[0])
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Add ``self`` and ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_aff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":821
 *         return result_aff
 * 
 *     def __radd__(self, other):             # <<<<<<<<<<<<<<
 *         return self + other
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_27__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_27__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__radd__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_26__radd__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_26__radd__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__radd__", 1);

  /* "pplite/linear_algebra.pyx":822
 * 
 *     def __radd__(self, other):
 *         return self + other             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_self), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":821
 *         return result_aff
 * 
 *     def __radd__(self, other):             # <<<<<<<<<<<<<<
 *         return self + other
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__radd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":824
 *         return self + other
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Subtract ``self`` and ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_29__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_28__sub__, "\n        Subtract ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Linear_Expression` or :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Linear_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Linear_Expression` or :class:`Affine_Expression` depending on input.\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x - y + y + y\n        x0+x1\n        >>> e = y - x + y - x; e\n        -2*x0+2*x1\n        >>> isinstance(e, Linear_Expression)\n        True\n        >>> e - e\n        0\n        >>> e1 = y - x\n        >>> e1 - e\n        x0-x1\n        >>> e2 = e - 7; e2\n        -2*x0+2*x1-7\n        >>> e3 = 7 - e; e3\n        2*x0-2*x1+7\n        >>> isinstance(e3, Linear_Expression)\n        False\n        >>> isinstance(e3, Affine_Expression)\n        True\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_28__sub__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_29__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_28__sub__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_28__sub__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  pplite::Linear_Expr *__pyx_v_lhs_expr;
  pplite::Linear_Expr *__pyx_v_rhs_expr;
  pplite::Linear_Expr __pyx_v_result_expr;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result_aff = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::Linear_Expr *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "pplite/linear_algebra.pyx":867
 *         # to mimic pplite, we use cases for type conversions.
 *         # case 1: linear_expr - var -> linear_expr
 *         if not isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if isinstance(other, Variable):
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":868
 *         # case 1: linear_expr - var -> linear_expr
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":867
 *         # to mimic pplite, we use cases for type conversions.
 *         # case 1: linear_expr - var -> linear_expr
 *         if not isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if isinstance(other, Variable):
 */
  }

  /* "pplite/linear_algebra.pyx":869
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":870
 *             return NotImplemented
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other             # <<<<<<<<<<<<<<
 *             result = Linear_Expression()
 *             self.thisptr[0] -= other_var.thisptr[0]
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":871
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 *             result = Linear_Expression()             # <<<<<<<<<<<<<<
 *             self.thisptr[0] -= other_var.thisptr[0]
 *             result.thisptr = new Linear_Expr(self.thisptr[0])
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":872
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 *             self.thisptr[0] -= other_var.thisptr[0]             # <<<<<<<<<<<<<<
 *             result.thisptr = new Linear_Expr(self.thisptr[0])
 *             return result
 */
    (__pyx_v_self->thisptr[0]) -= (__pyx_v_other_var->thisptr[0]);

    /* "pplite/linear_algebra.pyx":873
 *             result = Linear_Expression()
 *             self.thisptr[0] -= other_var.thisptr[0]
 *             result.thisptr = new Linear_Expr(self.thisptr[0])             # <<<<<<<<<<<<<<
 *             return result
 *         # case 2: linear_expr + linear_expr -> linear_expr
 */
    __pyx_v_result->thisptr = new pplite::Linear_Expr((__pyx_v_self->thisptr[0]));

    /* "pplite/linear_algebra.pyx":874
 *             self.thisptr[0] -= other_var.thisptr[0]
 *             result.thisptr = new Linear_Expr(self.thisptr[0])
 *             return result             # <<<<<<<<<<<<<<
 *         # case 2: linear_expr + linear_expr -> linear_expr
 *         cdef Linear_Expr* lhs_expr
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":869
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 */
  }

  /* "pplite/linear_algebra.pyx":879
 *         cdef Linear_Expr* rhs_expr
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":880
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):
 *             lhs_expr = (<Linear_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = lhs_expr[0] - rhs_expr[0]
 */
    __pyx_t_4 = __pyx_v_self->thisptr;
    __pyx_v_lhs_expr = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":881
 *         if isinstance(other, Linear_Expression):
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             result_expr = lhs_expr[0] - rhs_expr[0]
 *             result = Linear_Expression()
 */
    __pyx_t_4 = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_rhs_expr = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":882
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = lhs_expr[0] - rhs_expr[0]             # <<<<<<<<<<<<<<
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr
 */
    __pyx_v_result_expr = ((__pyx_v_lhs_expr[0]) - (__pyx_v_rhs_expr[0]));

    /* "pplite/linear_algebra.pyx":883
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = lhs_expr[0] - rhs_expr[0]
 *             result = Linear_Expression()             # <<<<<<<<<<<<<<
 *             result.thisptr[0] = result_expr
 *             return result
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":884
 *             result_expr = lhs_expr[0] - rhs_expr[0]
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr             # <<<<<<<<<<<<<<
 *             return result
 *         # case 3: linear_expr + affine_expr -> affine_expr
 */
    (__pyx_v_result->thisptr[0]) = __pyx_v_result_expr;

    /* "pplite/linear_algebra.pyx":885
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr
 *             return result             # <<<<<<<<<<<<<<
 *         # case 3: linear_expr + affine_expr -> affine_expr
 *         # this should be handeled by the affine expression class
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":879
 *         cdef Linear_Expr* rhs_expr
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":888
 *         # case 3: linear_expr + affine_expr -> affine_expr
 *         # this should be handeled by the affine expression class
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         # case 4, linear_expr + integer -> affine expression
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":889
 *         # this should be handeled by the affine expression class
 *         if isinstance(other, Affine_Expression):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         # case 4, linear_expr + integer -> affine expression
 *         # other should be an integer of some sorts, create affine expr. just like pplite would.
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":888
 *         # case 3: linear_expr + affine_expr -> affine_expr
 *         # this should be handeled by the affine expression class
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         # case 4, linear_expr + integer -> affine expression
 */
  }

  /* "pplite/linear_algebra.pyx":892
 *         # case 4, linear_expr + integer -> affine expression
 *         # other should be an integer of some sorts, create affine expr. just like pplite would.
 *         result_aff = Affine_Expression(self, -other)             # <<<<<<<<<<<<<<
 *         return result_aff
 * 
 */
  __pyx_t_3 = PyNumber_Negative(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(0, 892, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_result_aff = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":893
 *         # other should be an integer of some sorts, create affine expr. just like pplite would.
 *         result_aff = Affine_Expression(self, -other)
 *         return result_aff             # <<<<<<<<<<<<<<
 * 
 *     def __rsub__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result_aff);
  __pyx_r = ((PyObject *)__pyx_v_result_aff);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":824
 *         return self + other
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Subtract ``self`` and ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_aff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":895
 *         return result_aff
 * 
 *     def __rsub__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_31__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_31__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rsub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_30__rsub__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_30__rsub__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = NULL;
  pplite::Linear_Expr *__pyx_v_lhs_expr;
  pplite::Linear_Expr *__pyx_v_rhs_expr;
  pplite::Linear_Expr __pyx_v_result_expr;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result_aff = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::Linear_Expr *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rsub__", 1);

  /* "pplite/linear_algebra.pyx":896
 * 
 *     def __rsub__(self, other):
 *         if not isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if isinstance(other, Variable):
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":897
 *     def __rsub__(self, other):
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":896
 * 
 *     def __rsub__(self, other):
 *         if not isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         if isinstance(other, Variable):
 */
  }

  /* "pplite/linear_algebra.pyx":898
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":899
 *             return NotImplemented
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other             # <<<<<<<<<<<<<<
 *             result = Linear_Expression()
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":900
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 *             result = Linear_Expression()             # <<<<<<<<<<<<<<
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])
 *             return result
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":901
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])             # <<<<<<<<<<<<<<
 *             return result
 *         cdef Linear_Expr* lhs_expr
 */
    __pyx_v_result->thisptr = new pplite::Linear_Expr(((__pyx_v_other_var->thisptr[0]) - (__pyx_v_self->thisptr[0])));

    /* "pplite/linear_algebra.pyx":902
 *             result = Linear_Expression()
 *             result.thisptr = new Linear_Expr(other_var.thisptr[0] - self.thisptr[0])
 *             return result             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr* lhs_expr
 *         cdef Linear_Expr* rhs_expr
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":898
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             result = Linear_Expression()
 */
  }

  /* "pplite/linear_algebra.pyx":906
 *         cdef Linear_Expr* rhs_expr
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":907
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):
 *             lhs_expr = (<Linear_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = rhs_expr[0] - lhs_expr[0]
 */
    __pyx_t_4 = __pyx_v_self->thisptr;
    __pyx_v_lhs_expr = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":908
 *         if isinstance(other, Linear_Expression):
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             result_expr = rhs_expr[0] - lhs_expr[0]
 *             result = Linear_Expression()
 */
    __pyx_t_4 = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_rhs_expr = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":909
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = rhs_expr[0] - lhs_expr[0]             # <<<<<<<<<<<<<<
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr
 */
    __pyx_v_result_expr = ((__pyx_v_rhs_expr[0]) - (__pyx_v_lhs_expr[0]));

    /* "pplite/linear_algebra.pyx":910
 *             rhs_expr = (<Linear_Expression> other).thisptr
 *             result_expr = rhs_expr[0] - lhs_expr[0]
 *             result = Linear_Expression()             # <<<<<<<<<<<<<<
 *             result.thisptr[0] = result_expr
 *             return result
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":911
 *             result_expr = rhs_expr[0] - lhs_expr[0]
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr             # <<<<<<<<<<<<<<
 *             return result
 *         if isinstance(other, Affine_Expression):
 */
    (__pyx_v_result->thisptr[0]) = __pyx_v_result_expr;

    /* "pplite/linear_algebra.pyx":912
 *             result = Linear_Expression()
 *             result.thisptr[0] = result_expr
 *             return result             # <<<<<<<<<<<<<<
 *         if isinstance(other, Affine_Expression):
 *             return NotImplemented
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result);
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":906
 *         cdef Linear_Expr* rhs_expr
 *         cdef Linear_Expr result_expr
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             lhs_expr = (<Linear_Expression> self).thisptr
 *             rhs_expr = (<Linear_Expression> other).thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":913
 *             result.thisptr[0] = result_expr
 *             return result
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         result_aff = Affine_Expression(-1*self, other)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":914
 *             return result
 *         if isinstance(other, Affine_Expression):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         result_aff = Affine_Expression(-1*self, other)
 *         return result_aff
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":913
 *             result.thisptr[0] = result_expr
 *             return result
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         result_aff = Affine_Expression(-1*self, other)
 */
  }

  /* "pplite/linear_algebra.pyx":915
 *         if isinstance(other, Affine_Expression):
 *             return NotImplemented
 *         result_aff = Affine_Expression(-1*self, other)             # <<<<<<<<<<<<<<
 *         return result_aff
 * 
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_neg_1, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_other)) __PYX_ERR(0, 915, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_result_aff = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":916
 *             return NotImplemented
 *         result_aff = Affine_Expression(-1*self, other)
 *         return result_aff             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result_aff);
  __pyx_r = ((PyObject *)__pyx_v_result_aff);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":895
 *         return result_aff
 * 
 *     def __rsub__(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, Linear_Expression):
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__rsub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_aff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":918
 *         return result_aff
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Multiply ``self`` with ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_33__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_32__mul__, "\n        Multiply ``self`` with ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Linear_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Linear_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The product as a :class:`Linear_Expression`\n\n        Examples:\n\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> 8 * (x)\n        8*x0\n        >>> y * 8\n        8*x1\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_32__mul__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_33__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_32__mul__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_32__mul__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Linear_Expr *__pyx_v_e;
  PyObject *__pyx_v_c = NULL;
  pplite::FLINT_Integer __pyx_v_cc;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Linear_Expr *__pyx_t_2;
  pplite::FLINT_Integer __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "pplite/linear_algebra.pyx":950
 *         # 15*x0
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             e = (<Linear_Expression> self).thisptr
 *             c = other
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":951
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):
 *             e = (<Linear_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             c = other
 *         else:
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_e = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":952
 *         if isinstance(self, Linear_Expression):
 *             e = (<Linear_Expression> self).thisptr
 *             c = other             # <<<<<<<<<<<<<<
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 */
    __Pyx_INCREF(__pyx_v_other);
    __pyx_v_c = __pyx_v_other;

    /* "pplite/linear_algebra.pyx":950
 *         # 15*x0
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             e = (<Linear_Expression> self).thisptr
 *             c = other
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":955
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             e = (<Linear_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_e = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":956
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             e = (<Linear_Expression> other).thisptr
 *             c = self             # <<<<<<<<<<<<<<
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Linear_Expression result = Linear_Expression()
 */
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_v_c = ((PyObject *)__pyx_v_self);
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":957
 *             e = (<Linear_Expression> other).thisptr
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)             # <<<<<<<<<<<<<<
 *         cdef Linear_Expression result = Linear_Expression()
 *         result.thisptr[0] = e[0] * cc
 */
  __pyx_t_3 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 957, __pyx_L1_error)
  __pyx_v_cc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/linear_algebra.pyx":958
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Linear_Expression result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr[0] = e[0] * cc
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":959
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Linear_Expression result = Linear_Expression()
 *         result.thisptr[0] = e[0] * cc             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  (__pyx_v_result->thisptr[0]) = ((__pyx_v_e[0]) * __pyx_v_cc);

  /* "pplite/linear_algebra.pyx":960
 *         cdef Linear_Expression result = Linear_Expression()
 *         result.thisptr[0] = e[0] * cc
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":918
 *         return result_aff
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Multiply ``self`` with ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":962
 *         return result
 * 
 *     def __rmul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_35__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_35__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_34__rmul__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_34__rmul__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Linear_Expr *__pyx_v_e;
  PyObject *__pyx_v_c = NULL;
  pplite::FLINT_Integer __pyx_v_cc;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Linear_Expr *__pyx_t_2;
  pplite::FLINT_Integer __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 1);

  /* "pplite/linear_algebra.pyx":964
 *     def __rmul__(self, other):
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             e = (<Linear_Expression> self).thisptr
 *             c = other
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":965
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):
 *             e = (<Linear_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             c = other
 *         else:
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_e = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":966
 *         if isinstance(self, Linear_Expression):
 *             e = (<Linear_Expression> self).thisptr
 *             c = other             # <<<<<<<<<<<<<<
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 */
    __Pyx_INCREF(__pyx_v_other);
    __pyx_v_c = __pyx_v_other;

    /* "pplite/linear_algebra.pyx":964
 *     def __rmul__(self, other):
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             e = (<Linear_Expression> self).thisptr
 *             c = other
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":969
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             e = (<Linear_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_e = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":970
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             e = (<Linear_Expression> other).thisptr
 *             c = self             # <<<<<<<<<<<<<<
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Linear_Expression result = Linear_Expression()
 */
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_v_c = ((PyObject *)__pyx_v_self);
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":971
 *             e = (<Linear_Expression> other).thisptr
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)             # <<<<<<<<<<<<<<
 *         cdef Linear_Expression result = Linear_Expression()
 *         result.thisptr[0] = e[0] * cc
 */
  __pyx_t_3 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 971, __pyx_L1_error)
  __pyx_v_cc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/linear_algebra.pyx":972
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Linear_Expression result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr[0] = e[0] * cc
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":973
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Linear_Expression result = Linear_Expression()
 *         result.thisptr[0] = e[0] * cc             # <<<<<<<<<<<<<<
 *         return result
 *     def __neg__(self):
 */
  (__pyx_v_result->thisptr[0]) = ((__pyx_v_e[0]) * __pyx_v_cc);

  /* "pplite/linear_algebra.pyx":974
 *         cdef Linear_Expression result = Linear_Expression()
 *         result.thisptr[0] = e[0] * cc
 *         return result             # <<<<<<<<<<<<<<
 *     def __neg__(self):
 *         neg_assign(self.thisptr[0])
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":962
 *         return result
 * 
 *     def __rmul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr* e
 *         if isinstance(self, Linear_Expression):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":975
 *         result.thisptr[0] = e[0] * cc
 *         return result
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         neg_assign(self.thisptr[0])
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_37__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_37__neg__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_36__neg__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_36__neg__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__", 1);

  /* "pplite/linear_algebra.pyx":976
 *         return result
 *     def __neg__(self):
 *         neg_assign(self.thisptr[0])             # <<<<<<<<<<<<<<
 *         return self
 *     def __pos__(self):
 */
  pplite::neg_assign((__pyx_v_self->thisptr[0]));

  /* "pplite/linear_algebra.pyx":977
 *     def __neg__(self):
 *         neg_assign(self.thisptr[0])
 *         return self             # <<<<<<<<<<<<<<
 *     def __pos__(self):
 *         return self
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":975
 *         result.thisptr[0] = e[0] * cc
 *         return result
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         neg_assign(self.thisptr[0])
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":978
 *         neg_assign(self.thisptr[0])
 *         return self
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_39__pos__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_39__pos__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_38__pos__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_38__pos__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__", 1);

  /* "pplite/linear_algebra.pyx":979
 *         return self
 *     def __pos__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":978
 *         neg_assign(self.thisptr[0])
 *         return self
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":981
 *         return self
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         """
 *         Construct :class:`Constraint`s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_41__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_41__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 981, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_40__richcmp__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_DECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_40__richcmp__(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 1);

  /* "pplite/linear_algebra.pyx":989
 *         >>> from pplite import Variable
 *         """
 *         return _make_Constraint_from_richcmp(self, other, op)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pplite_10constraint__make_Constraint_from_richcmp(((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":981
 *         return self
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         """
 *         Construct :class:`Constraint`s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_43__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_42__reduce_cython__, "Linear_Expression.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_43__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_43__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_42__reduce_cython__};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_43__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_42__reduce_cython__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_thisptr_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_45__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Linear_Expression_44__setstate_cython__, "Linear_Expression.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_45__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_45__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_44__setstate_cython__};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_45__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Linear_Expression_44__setstate_cython__(((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Linear_Expression_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_thisptr_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Linear_Expression.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1047
 * #     String, rationals and floating point types are accepted as long as they
 * #    represent exact integers:
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython constructor.
 */

/* Python wrapper */
static int __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression___init__, "\n        The Cython constructor.\n\n        See :class:`Affine_Expression` for documentation.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression___init__;
#endif
static int __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression___init__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pplite_14linear_algebra_17Affine_Expression___init__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_args) {
  pplite::FLINT_Integer __pyx_v_k;
  PyObject *__pyx_v_expr_arg = NULL;
  PyObject *__pyx_v_int_arg = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_e = NULL;
  PyObject *__pyx_v_arg = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_a = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::FLINT_Integer __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "pplite/linear_algebra.pyx":1054
 *         """
 *         cdef FLINT_Integer k
 *         if len(args) == 2:             # <<<<<<<<<<<<<<
 *             expr_arg = args[0]
 *             int_arg = args[1]
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1054, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":1055
 *         cdef FLINT_Integer k
 *         if len(args) == 2:
 *             expr_arg = args[0]             # <<<<<<<<<<<<<<
 *             int_arg = args[1]
 *             # if isinstance(expr_arg, dict):
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_expr_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1056
 *         if len(args) == 2:
 *             expr_arg = args[0]
 *             int_arg = args[1]             # <<<<<<<<<<<<<<
 *             # if isinstance(expr_arg, dict):
 *             #     if expr_arg:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_int_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1061
 *             #         for i, coeff in expr_arg.items():
 *             #             self.thisptr.impl()[Variable(i).id()] = Python_int_to_FLINT_Integer(coeff)
 *             k = Python_int_to_FLINT_Integer(int_arg)             # <<<<<<<<<<<<<<
 *             if isinstance(expr_arg, Linear_Expression):
 *                 e = <Linear_Expression> expr_arg
 */
    __pyx_t_4 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_int_arg); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1061, __pyx_L1_error)
    __pyx_v_k = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "pplite/linear_algebra.pyx":1062
 *             #             self.thisptr.impl()[Variable(i).id()] = Python_int_to_FLINT_Integer(coeff)
 *             k = Python_int_to_FLINT_Integer(int_arg)
 *             if isinstance(expr_arg, Linear_Expression):             # <<<<<<<<<<<<<<
 *                 e = <Linear_Expression> expr_arg
 *                 self.thisptr = new Affine_Expr(e.thisptr[0], k)
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_expr_arg, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":1063
 *             k = Python_int_to_FLINT_Integer(int_arg)
 *             if isinstance(expr_arg, Linear_Expression):
 *                 e = <Linear_Expression> expr_arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *                 return
 */
      __pyx_t_3 = __pyx_v_expr_arg;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_e = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":1064
 *             if isinstance(expr_arg, Linear_Expression):
 *                 e = <Linear_Expression> expr_arg
 *                 self.thisptr = new Affine_Expr(e.thisptr[0], k)             # <<<<<<<<<<<<<<
 *                 return
 *             # else:
 */
      __pyx_v_self->thisptr = new pplite::Affine_Expr((__pyx_v_e->thisptr[0]), __pyx_v_k);

      /* "pplite/linear_algebra.pyx":1065
 *                 e = <Linear_Expression> expr_arg
 *                 self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *                 return             # <<<<<<<<<<<<<<
 *             # else:
 *             #     e = Linear_Expression()
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/linear_algebra.pyx":1062
 *             #             self.thisptr.impl()[Variable(i).id()] = Python_int_to_FLINT_Integer(coeff)
 *             k = Python_int_to_FLINT_Integer(int_arg)
 *             if isinstance(expr_arg, Linear_Expression):             # <<<<<<<<<<<<<<
 *                 e = <Linear_Expression> expr_arg
 *                 self.thisptr = new Affine_Expr(e.thisptr[0], k)
 */
    }

    /* "pplite/linear_algebra.pyx":1074
 *             #     #self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *                 # self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *             raise ValueError("We done goofed, no acceptable input here")             # <<<<<<<<<<<<<<
 *         if len(args) == 1:
 *             arg = args[0]
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1074, __pyx_L1_error)

    /* "pplite/linear_algebra.pyx":1054
 *         """
 *         cdef FLINT_Integer k
 *         if len(args) == 2:             # <<<<<<<<<<<<<<
 *             expr_arg = args[0]
 *             int_arg = args[1]
 */
  }

  /* "pplite/linear_algebra.pyx":1075
 *                 # self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *             raise ValueError("We done goofed, no acceptable input here")
 *         if len(args) == 1:             # <<<<<<<<<<<<<<
 *             arg = args[0]
 *             if isinstance(arg, int):
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "pplite/linear_algebra.pyx":1076
 *             raise ValueError("We done goofed, no acceptable input here")
 *         if len(args) == 1:
 *             arg = args[0]             # <<<<<<<<<<<<<<
 *             if isinstance(arg, int):
 *                 k = Python_int_to_FLINT_Integer(arg)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1077
 *         if len(args) == 1:
 *             arg = args[0]
 *             if isinstance(arg, int):             # <<<<<<<<<<<<<<
 *                 k = Python_int_to_FLINT_Integer(arg)
 *                 self.thisptr = new Affine_Expr(k)
 */
    __pyx_t_2 = PyInt_Check(__pyx_v_arg); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":1078
 *             arg = args[0]
 *             if isinstance(arg, int):
 *                 k = Python_int_to_FLINT_Integer(arg)             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Affine_Expr(k)
 *                 return
 */
      __pyx_t_4 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_arg); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
      __pyx_v_k = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

      /* "pplite/linear_algebra.pyx":1079
 *             if isinstance(arg, int):
 *                 k = Python_int_to_FLINT_Integer(arg)
 *                 self.thisptr = new Affine_Expr(k)             # <<<<<<<<<<<<<<
 *                 return
 *             if isinstance(arg, Affine_Expression):
 */
      __pyx_v_self->thisptr = new pplite::Affine_Expr(__pyx_v_k);

      /* "pplite/linear_algebra.pyx":1080
 *                 k = Python_int_to_FLINT_Integer(arg)
 *                 self.thisptr = new Affine_Expr(k)
 *                 return             # <<<<<<<<<<<<<<
 *             if isinstance(arg, Affine_Expression):
 *                 a = <Affine_Expression> arg
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/linear_algebra.pyx":1077
 *         if len(args) == 1:
 *             arg = args[0]
 *             if isinstance(arg, int):             # <<<<<<<<<<<<<<
 *                 k = Python_int_to_FLINT_Integer(arg)
 *                 self.thisptr = new Affine_Expr(k)
 */
    }

    /* "pplite/linear_algebra.pyx":1081
 *                 self.thisptr = new Affine_Expr(k)
 *                 return
 *             if isinstance(arg, Affine_Expression):             # <<<<<<<<<<<<<<
 *                 a = <Affine_Expression> arg
 *                 self.thisptr = new Affine_Expr(a.thisptr[0])
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
    if (__pyx_t_2) {

      /* "pplite/linear_algebra.pyx":1082
 *                 return
 *             if isinstance(arg, Affine_Expression):
 *                 a = <Affine_Expression> arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new Affine_Expr(a.thisptr[0])
 *                 return
 */
      __pyx_t_3 = __pyx_v_arg;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_a = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":1083
 *             if isinstance(arg, Affine_Expression):
 *                 a = <Affine_Expression> arg
 *                 self.thisptr = new Affine_Expr(a.thisptr[0])             # <<<<<<<<<<<<<<
 *                 return
 *                     # if isinstance(arg, Linear_Expression):
 */
      __pyx_v_self->thisptr = new pplite::Affine_Expr((__pyx_v_a->thisptr[0]));

      /* "pplite/linear_algebra.pyx":1084
 *                 a = <Affine_Expression> arg
 *                 self.thisptr = new Affine_Expr(a.thisptr[0])
 *                 return             # <<<<<<<<<<<<<<
 *                     # if isinstance(arg, Linear_Expression):
 *                     #     e = <Linear_Expression> arg
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "pplite/linear_algebra.pyx":1081
 *                 self.thisptr = new Affine_Expr(k)
 *                 return
 *             if isinstance(arg, Affine_Expression):             # <<<<<<<<<<<<<<
 *                 a = <Affine_Expression> arg
 *                 self.thisptr = new Affine_Expr(a.thisptr[0])
 */
    }

    /* "pplite/linear_algebra.pyx":1090
 *                     #     self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *                     #     return
 *             raise ValueError("Initalizing with one argument requires either a affine expression or an integer to be passed in.")             # <<<<<<<<<<<<<<
 *         elif len(args) == 0:
 *             self.thisptr = new Affine_Expr()
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1090, __pyx_L1_error)

    /* "pplite/linear_algebra.pyx":1075
 *                 # self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *             raise ValueError("We done goofed, no acceptable input here")
 *         if len(args) == 1:             # <<<<<<<<<<<<<<
 *             arg = args[0]
 *             if isinstance(arg, int):
 */
  }

  /* "pplite/linear_algebra.pyx":1091
 *                     #     return
 *             raise ValueError("Initalizing with one argument requires either a affine expression or an integer to be passed in.")
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Affine_Expr()
 *             return
 */
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1091, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (likely(__pyx_t_2)) {

    /* "pplite/linear_algebra.pyx":1092
 *             raise ValueError("Initalizing with one argument requires either a affine expression or an integer to be passed in.")
 *         elif len(args) == 0:
 *             self.thisptr = new Affine_Expr()             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */
    __pyx_v_self->thisptr = new pplite::Affine_Expr();

    /* "pplite/linear_algebra.pyx":1093
 *         elif len(args) == 0:
 *             self.thisptr = new Affine_Expr()
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Cannot initialize with more than 2 arguments.")
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1091
 *                     #     return
 *             raise ValueError("Initalizing with one argument requires either a affine expression or an integer to be passed in.")
 *         elif len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Affine_Expr()
 *             return
 */
  }

  /* "pplite/linear_algebra.pyx":1095
 *             return
 *         else:
 *             raise ValueError("Cannot initialize with more than 2 arguments.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1095, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1095, __pyx_L1_error)
  }

  /* "pplite/linear_algebra.pyx":1047
 * #     String, rationals and floating point types are accepted as long as they
 * #    represent exact integers:
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython constructor.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_expr_arg);
  __Pyx_XDECREF(__pyx_v_int_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1097
 *             raise ValueError("Cannot initialize with more than 2 arguments.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython destructor.
 */

/* Python wrapper */
static void __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_2__dealloc__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_2__dealloc__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {

  /* "pplite/linear_algebra.pyx":1101
 *         The Cython destructor.
 *         """
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pplite/linear_algebra.pyx":1097
 *             raise ValueError("Cannot initialize with more than 2 arguments.")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The Cython destructor.
 */

  /* function exit code */
}

/* "pplite/linear_algebra.pyx":1103
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Tests:
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_5__hash__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_4__hash__, "\n        Tests:\n\n        >>> import pplite\n        >>> hash(pplite.Affine_Expression(10))\n        Traceback (most recent call last):\n        TypeError: Affine_Expression unhashable\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_4__hash__;
#endif
static Py_hash_t __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_5__hash__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_4__hash__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_4__hash__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 1);

  /* "pplite/linear_algebra.pyx":1112
 *         TypeError: Affine_Expression unhashable
 *         """
 *         raise TypeError('Affine_Expression unhashable')             # <<<<<<<<<<<<<<
 * 
 *     def space_dimension(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1112, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1103
 *         del self.thisptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Tests:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1114
 *         raise TypeError('Affine_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_7space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_6space_dimension, "Affine_Expression.space_dimension(self)\n\n        Return the dimension of the vector space necessary for the\n        linear expression.\n\n        OUTPUT:\n\n        Integer.\n\n        Examples:\n        >>> from pplite import Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> (x+y+1).space_dimension()\n        2\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_7space_dimension = {"space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_7space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_6space_dimension};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_7space_dimension(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("space_dimension (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("space_dimension", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "space_dimension", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_6space_dimension(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_6space_dimension(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("space_dimension", 1);

  /* "pplite/linear_algebra.pyx":1130
 *         2
 *         """
 *         return self.thisptr.space_dim()             # <<<<<<<<<<<<<<
 * 
 *     def linear_form(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->space_dim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1114
 *         raise TypeError('Affine_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.space_dimension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1132
 *         return self.thisptr.space_dim()
 * 
 *     def linear_form(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the linear form of the affine expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_9linear_form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_8linear_form, "Affine_Expression.linear_form(self)\n\n        Returns the linear form of the affine expression.\n\n        OUTPUT:\n\n        :class:`Linear_Expression`\n\n        Examples:\n        >>> from pplite import Variable, Affine_Expression\n        >>> e = Variable(2) - 3*Variable(4)\n        >>> a = Affine_Expression(e, 7); a\n        x2-3*x4+7\n        >>> a.linear_form()\n        x2-3*x4\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_9linear_form = {"linear_form", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_9linear_form, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_8linear_form};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_9linear_form(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("linear_form (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("linear_form", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "linear_form", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_8linear_form(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_8linear_form(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  pplite::Linear_Expr __pyx_v_e;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_ee = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  pplite::Linear_Expr __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("linear_form", 1);

  /* "pplite/linear_algebra.pyx":1149
 *         """
 *         cdef Linear_Expr e
 *         e = (<Affine_Expression> self).thisptr[0].expr             # <<<<<<<<<<<<<<
 *         ee = Linear_Expression()
 *         ee.thisptr[0] = e
 */
  __pyx_t_1 = (__pyx_v_self->thisptr[0]).expr;
  __pyx_v_e = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "pplite/linear_algebra.pyx":1150
 *         cdef Linear_Expr e
 *         e = (<Affine_Expression> self).thisptr[0].expr
 *         ee = Linear_Expression()             # <<<<<<<<<<<<<<
 *         ee.thisptr[0] = e
 *         return ee
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ee = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pplite/linear_algebra.pyx":1151
 *         e = (<Affine_Expression> self).thisptr[0].expr
 *         ee = Linear_Expression()
 *         ee.thisptr[0] = e             # <<<<<<<<<<<<<<
 *         return ee
 * 
 */
  (__pyx_v_ee->thisptr[0]) = __pyx_v_e;

  /* "pplite/linear_algebra.pyx":1152
 *         ee = Linear_Expression()
 *         ee.thisptr[0] = e
 *         return ee             # <<<<<<<<<<<<<<
 * 
 *     def inhomogeneous_term(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ee);
  __pyx_r = ((PyObject *)__pyx_v_ee);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1132
 *         return self.thisptr.space_dim()
 * 
 *     def linear_form(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the linear form of the affine expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.linear_form", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ee);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1154
 *         return ee
 * 
 *     def inhomogeneous_term(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the inhogogenous term of an affine expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_11inhomogeneous_term(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_10inhomogeneous_term, "Affine_Expression.inhomogeneous_term(self)\n\n        Returns the inhogogenous term of an affine expression.\n\n        OUTPUT:\n\n        Integer.\n\n        Examples:\n\n        >>> from pplite import Variable, Affine_Expression\n        >>> e = Variable(2) - 3*Variable(4)\n        >>> a = Affine_Expression(e, 7); a\n        x2-3*x4+7\n        >>> a.inhomogeneous_term()\n        mpz(7)          \n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_11inhomogeneous_term = {"inhomogeneous_term", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_11inhomogeneous_term, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_10inhomogeneous_term};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_11inhomogeneous_term(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inhomogeneous_term (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("inhomogeneous_term", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "inhomogeneous_term", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_10inhomogeneous_term(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_10inhomogeneous_term(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  pplite::FLINT_Integer __pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  pplite::FLINT_Integer __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inhomogeneous_term", 1);

  /* "pplite/linear_algebra.pyx":1172
 *         """
 *         cdef FLINT_Integer c
 *         c = self.thisptr.inhomo             # <<<<<<<<<<<<<<
 *         return FLINT_Integer_to_Python(c)
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->inhomo;
  __pyx_v_c = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "pplite/linear_algebra.pyx":1173
 *         cdef FLINT_Integer c
 *         c = self.thisptr.inhomo
 *         return FLINT_Integer_to_Python(c)             # <<<<<<<<<<<<<<
 * 
 *     def coefficient(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6pplite_14linear_algebra_FLINT_Integer_to_Python(__pyx_v_c); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1154
 *         return ee
 * 
 *     def inhomogeneous_term(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the inhogogenous term of an affine expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.inhomogeneous_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1175
 *         return FLINT_Integer_to_Python(c)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_13coefficient(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_12coefficient, "Affine_Expression.coefficient(self, v)\n\n        Return the coefficient of the variable ``v``.\n\n        INPUT:\n\n        - ``v`` -- a :class:`Variable`.\n\n        OUTPUT:\n\n        An Integer. \n\n        Examples:\n\n        >>> from pplite import Variable, Affine_Expression\n        >>> e = Variable(2) - 3*Variable(4)\n        >>> a = Affine_Expression(e, 7)\n        >>> a.coefficient(Variable(2))\n        mpz(1)\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_13coefficient = {"coefficient", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_13coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_12coefficient};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_13coefficient(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_v = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coefficient (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1175, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "coefficient") < 0)) __PYX_ERR(0, 1175, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_v = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coefficient", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1175, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_12coefficient(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_12coefficient(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("coefficient", 1);

  /* "pplite/linear_algebra.pyx":1195
 *         mpz(1)
 *         """
 *         return self.linear_form().coefficient(v)             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_linear_form); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_coefficient); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_v};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1175
 *         return FLINT_Integer_to_Python(c)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1197
 *         return self.linear_form().coefficient(v)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return a string representation of the linear expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__(PyObject *__pyx_v_self); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_14__repr__, "\n        Return a string representation of the linear expression.\n\n        OUTPUT:\n\n        A string.\n\n        Examples:\n\n        >>> from pplite import Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> x\n        x0\n        >>> x-x\n        0\n        >>> 2*x\n        2*x0\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_14__repr__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_14__repr__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_14__repr__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  int __pyx_v_first;
  PyObject *__pyx_v_i = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_x = NULL;
  PyObject *__pyx_v_coeff = NULL;
  PyObject *__pyx_v_inhomog = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "pplite/linear_algebra.pyx":1217
 *         2*x0
 *         """
 *         s = ''             # <<<<<<<<<<<<<<
 *         first = True
 *         for i in range(self.space_dimension()):
 */
  __Pyx_INCREF(__pyx_kp_u__6);
  __pyx_v_s = __pyx_kp_u__6;

  /* "pplite/linear_algebra.pyx":1218
 *         """
 *         s = ''
 *         first = True             # <<<<<<<<<<<<<<
 *         for i in range(self.space_dimension()):
 *             x = Variable(i)
 */
  __pyx_v_first = 1;

  /* "pplite/linear_algebra.pyx":1219
 *         s = ''
 *         first = True
 *         for i in range(self.space_dimension()):             # <<<<<<<<<<<<<<
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_space_dimension); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1219, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1219, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":1220
 *         first = True
 *         for i in range(self.space_dimension()):
 *             x = Variable(i)             # <<<<<<<<<<<<<<
 *             coeff = self.coefficient(x)
 *             if coeff == 0:
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable), __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_x, ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":1221
 *         for i in range(self.space_dimension()):
 *             x = Variable(i)
 *             coeff = self.coefficient(x)             # <<<<<<<<<<<<<<
 *             if coeff == 0:
 *                 continue
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coefficient); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_x)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_coeff, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pplite/linear_algebra.pyx":1222
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 *             if coeff == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             if first and coeff == 1:
 */
    __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1222, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":1223
 *             coeff = self.coefficient(x)
 *             if coeff == 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             if first and coeff == 1:
 *                 s += '%r' % x
 */
      goto __pyx_L3_continue;

      /* "pplite/linear_algebra.pyx":1222
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 *             if coeff == 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             if first and coeff == 1:
 */
    }

    /* "pplite/linear_algebra.pyx":1224
 *             if coeff == 0:
 *                 continue
 *             if first and coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '%r' % x
 *                 first = False
 */
    if (__pyx_v_first) {
    } else {
      __pyx_t_8 = __pyx_v_first;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_9 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1224, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":1225
 *                 continue
 *             if first and coeff == 1:
 *                 s += '%r' % x             # <<<<<<<<<<<<<<
 *                 first = False
 *             elif first and coeff == -1:
 */
      __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_r, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":1226
 *             if first and coeff == 1:
 *                 s += '%r' % x
 *                 first = False             # <<<<<<<<<<<<<<
 *             elif first and coeff == -1:
 *                 s += '-%r' % x
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":1224
 *             if coeff == 0:
 *                 continue
 *             if first and coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '%r' % x
 *                 first = False
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":1227
 *                 s += '%r' % x
 *                 first = False
 *             elif first and coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *                 first = False
 */
    if (__pyx_v_first) {
    } else {
      __pyx_t_8 = __pyx_v_first;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_9 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1227, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_9;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":1228
 *                 first = False
 *             elif first and coeff == -1:
 *                 s += '-%r' % x             # <<<<<<<<<<<<<<
 *                 first = False
 *             elif first and coeff != 1:
 */
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_r_2, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1228, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":1229
 *             elif first and coeff == -1:
 *                 s += '-%r' % x
 *                 first = False             # <<<<<<<<<<<<<<
 *             elif first and coeff != 1:
 *                 s += '%d*%r' % (coeff, x)
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":1227
 *                 s += '%r' % x
 *                 first = False
 *             elif first and coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *                 first = False
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":1230
 *                 s += '-%r' % x
 *                 first = False
 *             elif first and coeff != 1:             # <<<<<<<<<<<<<<
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 */
    if (__pyx_v_first) {
    } else {
      __pyx_t_8 = __pyx_v_first;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_9 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_coeff, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1230, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":1231
 *                 first = False
 *             elif first and coeff != 1:
 *                 s += '%d*%r' % (coeff, x)             # <<<<<<<<<<<<<<
 *                 first = False
 *             elif coeff == 1:
 */
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_coeff), __pyx_n_u_d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u__7);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__7);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u__7);
      __pyx_t_3 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(((PyObject *)__pyx_v_x)), __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_11;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":1232
 *             elif first and coeff != 1:
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False             # <<<<<<<<<<<<<<
 *             elif coeff == 1:
 *                 s += '+%r' % x
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":1230
 *                 s += '-%r' % x
 *                 first = False
 *             elif first and coeff != 1:             # <<<<<<<<<<<<<<
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":1233
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 *             elif coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '+%r' % x
 *             elif coeff == -1:
 */
    __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1233, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":1234
 *                 first = False
 *             elif coeff == 1:
 *                 s += '+%r' % x             # <<<<<<<<<<<<<<
 *             elif coeff == -1:
 *                 s += '-%r' % x
 */
      __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_r_3, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "pplite/linear_algebra.pyx":1233
 *                 s += '%d*%r' % (coeff, x)
 *                 first = False
 *             elif coeff == 1:             # <<<<<<<<<<<<<<
 *                 s += '+%r' % x
 *             elif coeff == -1:
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":1235
 *             elif coeff == 1:
 *                 s += '+%r' % x
 *             elif coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *             else:
 */
    __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_coeff, __pyx_int_neg_1, -1L, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1235, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "pplite/linear_algebra.pyx":1236
 *                 s += '+%r' % x
 *             elif coeff == -1:
 *                 s += '-%r' % x             # <<<<<<<<<<<<<<
 *             else:
 *                 s += '%+d*%r' % (coeff, x)
 */
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_r_2, ((PyObject *)__pyx_v_x)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":1235
 *             elif coeff == 1:
 *                 s += '+%r' % x
 *             elif coeff == -1:             # <<<<<<<<<<<<<<
 *                 s += '-%r' % x
 *             else:
 */
      goto __pyx_L6;
    }

    /* "pplite/linear_algebra.pyx":1238
 *                 s += '-%r' % x
 *             else:
 *                 s += '%+d*%r' % (coeff, x)             # <<<<<<<<<<<<<<
 *         inhomog = self.inhomogeneous_term()
 *         if inhomog != 0:
 */
    /*else*/ {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_coeff);
      __Pyx_GIVEREF(__pyx_v_coeff);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_coeff)) __PYX_ERR(0, 1238, __pyx_L1_error);
      __Pyx_INCREF((PyObject *)__pyx_v_x);
      __Pyx_GIVEREF((PyObject *)__pyx_v_x);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_x))) __PYX_ERR(0, 1238, __pyx_L1_error);
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_d_r, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;
    }
    __pyx_L6:;

    /* "pplite/linear_algebra.pyx":1219
 *         s = ''
 *         first = True
 *         for i in range(self.space_dimension()):             # <<<<<<<<<<<<<<
 *             x = Variable(i)
 *             coeff = self.coefficient(x)
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pplite/linear_algebra.pyx":1239
 *             else:
 *                 s += '%+d*%r' % (coeff, x)
 *         inhomog = self.inhomogeneous_term()             # <<<<<<<<<<<<<<
 *         if inhomog != 0:
 *             if first:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inhomogeneous_term); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_inhomog = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pplite/linear_algebra.pyx":1240
 *                 s += '%+d*%r' % (coeff, x)
 *         inhomog = self.inhomogeneous_term()
 *         if inhomog != 0:             # <<<<<<<<<<<<<<
 *             if first:
 *                 s += '%d' % inhomog
 */
  __pyx_t_8 = (__Pyx_PyInt_BoolNeObjC(__pyx_v_inhomog, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 1240, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "pplite/linear_algebra.pyx":1241
 *         inhomog = self.inhomogeneous_term()
 *         if inhomog != 0:
 *             if first:             # <<<<<<<<<<<<<<
 *                 s += '%d' % inhomog
 *                 first = False
 */
    if (__pyx_v_first) {

      /* "pplite/linear_algebra.pyx":1242
 *         if inhomog != 0:
 *             if first:
 *                 s += '%d' % inhomog             # <<<<<<<<<<<<<<
 *                 first = False
 *             else:
 */
      __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_d_2, __pyx_v_inhomog); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "pplite/linear_algebra.pyx":1243
 *             if first:
 *                 s += '%d' % inhomog
 *                 first = False             # <<<<<<<<<<<<<<
 *             else:
 *                 s += '%+d' % inhomog
 */
      __pyx_v_first = 0;

      /* "pplite/linear_algebra.pyx":1241
 *         inhomog = self.inhomogeneous_term()
 *         if inhomog != 0:
 *             if first:             # <<<<<<<<<<<<<<
 *                 s += '%d' % inhomog
 *                 first = False
 */
      goto __pyx_L15;
    }

    /* "pplite/linear_algebra.pyx":1245
 *                 first = False
 *             else:
 *                 s += '%+d' % inhomog             # <<<<<<<<<<<<<<
 *         if first:
 *             s = '0'
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_d_3, __pyx_v_inhomog); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyUnicode_ConcatInPlace(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;
    }
    __pyx_L15:;

    /* "pplite/linear_algebra.pyx":1240
 *                 s += '%+d*%r' % (coeff, x)
 *         inhomog = self.inhomogeneous_term()
 *         if inhomog != 0:             # <<<<<<<<<<<<<<
 *             if first:
 *                 s += '%d' % inhomog
 */
  }

  /* "pplite/linear_algebra.pyx":1246
 *             else:
 *                 s += '%+d' % inhomog
 *         if first:             # <<<<<<<<<<<<<<
 *             s = '0'
 *         return s
 */
  if (__pyx_v_first) {

    /* "pplite/linear_algebra.pyx":1247
 *                 s += '%+d' % inhomog
 *         if first:
 *             s = '0'             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __Pyx_INCREF(__pyx_kp_u_0);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_kp_u_0);

    /* "pplite/linear_algebra.pyx":1246
 *             else:
 *                 s += '%+d' % inhomog
 *         if first:             # <<<<<<<<<<<<<<
 *             s = '0'
 *         return s
 */
  }

  /* "pplite/linear_algebra.pyx":1248
 *         if first:
 *             s = '0'
 *         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1197
 *         return self.linear_form().coefficient(v)
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return a string representation of the linear expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF((PyObject *)__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_coeff);
  __Pyx_XDECREF(__pyx_v_inhomog);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1251
 * 
 * 
 *     def all_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_17all_terms_are_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_16all_terms_are_zero, "Affine_Expression.all_terms_are_zero(self)\n\n        Test if ``self`` is a constant linear expression.\n\n        OUTPUT:\n\n        Boolean.\n\n        Examples:\n\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_17all_terms_are_zero = {"all_terms_are_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_17all_terms_are_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_16all_terms_are_zero};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_17all_terms_are_zero(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all_terms_are_zero (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("all_terms_are_zero", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "all_terms_are_zero", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_16all_terms_are_zero(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_16all_terms_are_zero(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("all_terms_are_zero", 1);

  /* "pplite/linear_algebra.pyx":1262
 * 
 *         """
 *         return self.thisptr.is_zero()             # <<<<<<<<<<<<<<
 * 
 *     def is_equal_to(self, Affine_Expression other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->is_zero()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1251
 * 
 * 
 *     def all_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.all_terms_are_zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1264
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Affine_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another affine expression.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_19is_equal_to(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_18is_equal_to, "Affine_Expression.is_equal_to(self, Affine_Expression other)\n\n        Test equality with another affine expression.\n\n        OUTPUT: boolean\n        ");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_19is_equal_to = {"is_equal_to", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_19is_equal_to, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_18is_equal_to};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_19is_equal_to(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_equal_to (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_other)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1264, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_equal_to") < 0)) __PYX_ERR(0, 1264, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_other = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_equal_to", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1264, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.is_equal_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression, 1, "other", 0))) __PYX_ERR(0, 1264, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_18is_equal_to(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_18is_equal_to(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_equal_to", 1);

  /* "pplite/linear_algebra.pyx":1270
 *         OUTPUT: boolean
 *         """
 *         if self.inhomogeneous_term() == other.inhomogeneous_term() and self.linear_form().is_equal_to(other.linear_form()):             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inhomogeneous_term); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other), __pyx_n_s_inhomogeneous_term); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_linear_form); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_is_equal_to); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other), __pyx_n_s_linear_form); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1271
 *         """
 *         if self.inhomogeneous_term() == other.inhomogeneous_term() and self.linear_form().is_equal_to(other.linear_form()):
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1270
 *         OUTPUT: boolean
 *         """
 *         if self.inhomogeneous_term() == other.inhomogeneous_term() and self.linear_form().is_equal_to(other.linear_form()):             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "pplite/linear_algebra.pyx":1272
 *         if self.inhomogeneous_term() == other.inhomogeneous_term() and self.linear_form().is_equal_to(other.linear_form()):
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 * # TODO: Add tests.
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1264
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Affine_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another affine expression.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.is_equal_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1276
 * # TODO: Add tests.
 * 
 *     def m_swap(self, Affine_Expression y):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].m_swap(y.thisptr[0])
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_21m_swap(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_20m_swap, "Affine_Expression.m_swap(self, Affine_Expression y)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_21m_swap = {"m_swap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_21m_swap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_20m_swap};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_21m_swap(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_y = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("m_swap (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_y)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1276, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "m_swap") < 0)) __PYX_ERR(0, 1276, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_y = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("m_swap", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1276, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.m_swap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression, 1, "y", 0))) __PYX_ERR(0, 1276, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_20m_swap(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), __pyx_v_y);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_20m_swap(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("m_swap", 1);

  /* "pplite/linear_algebra.pyx":1277
 * 
 *     def m_swap(self, Affine_Expression y):
 *         self.thisptr[0].m_swap(y.thisptr[0])             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (__pyx_v_self->thisptr[0]).m_swap((__pyx_v_y->thisptr[0]));

  /* "pplite/linear_algebra.pyx":1278
 *     def m_swap(self, Affine_Expression y):
 *         self.thisptr[0].m_swap(y.thisptr[0])
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1276
 * # TODO: Add tests.
 * 
 *     def m_swap(self, Affine_Expression y):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].m_swap(y.thisptr[0])
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1280
 *         return self
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].normalize()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_23normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_22normalize, "Affine_Expression.normalize(self)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_23normalize = {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_23normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_22normalize};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_23normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("normalize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "normalize", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_22normalize(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_22normalize(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 1);

  /* "pplite/linear_algebra.pyx":1281
 * 
 *     def normalize(self):
 *         self.thisptr[0].normalize()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (__pyx_v_self->thisptr[0]).normalize();

  /* "pplite/linear_algebra.pyx":1282
 *     def normalize(self):
 *         self.thisptr[0].normalize()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def sign_normalize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1280
 *         return self
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].normalize()
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1284
 *         return self
 * 
 *     def sign_normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].sign_normalize()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_25sign_normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_24sign_normalize, "Affine_Expression.sign_normalize(self)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_25sign_normalize = {"sign_normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_25sign_normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_24sign_normalize};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_25sign_normalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sign_normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("sign_normalize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sign_normalize", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_24sign_normalize(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_24sign_normalize(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sign_normalize", 1);

  /* "pplite/linear_algebra.pyx":1285
 * 
 *     def sign_normalize(self):
 *         self.thisptr[0].sign_normalize()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (__pyx_v_self->thisptr[0]).sign_normalize();

  /* "pplite/linear_algebra.pyx":1286
 *     def sign_normalize(self):
 *         self.thisptr[0].sign_normalize()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __add__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1284
 *         return self
 * 
 *     def sign_normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].sign_normalize()
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1288
 *         return self
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Add ``self`` and ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_27__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_26__add__, "\n        Add ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Affine_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Affine_Expression`\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> a = x + y + y + y + 1; a\n        x0+3*x1+1\n        >>> a.inhomogeneous_term()\n        mpz(1)\n        >>> a + a\n        2*x0+6*x1+2         \n        >>> 12 + a\n        x0+3*x1+13\n        >>> a + Variable(2)\n        x0+3*x1+x2+1\n        >>> a.linear_form()\n        x0+3*x1\n        >>> a.linear_form()+ a.inhomogeneous_term()\n        x0+3*x1+1\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_26__add__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_27__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_26__add__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_26__add__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Affine_Expr *__pyx_v_lhs;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_lhs_expr = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result_expr = NULL;
  pplite::Var *__pyx_v_vv;
  pplite::Affine_Expr *__pyx_v_temp;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  pplite::Linear_Expr *__pyx_v_e1;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_other_lin = NULL;
  pplite::Affine_Expr *__pyx_v_rhs;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_rhs_expr = NULL;
  pplite::Affine_Expr __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Affine_Expr *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::Var *__pyx_t_4;
  pplite::Linear_Expr *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 1);

  /* "pplite/linear_algebra.pyx":1325
 *         """
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1326
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):
 *             lhs = (<Affine_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             lhs_expr = Affine_Expression(self)
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_lhs = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1325
 *         """
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":1328
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 *             lhs_expr = Affine_Expression(self)             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> lhs_expr).thisptr
 *         result_expr = Affine_Expression()
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_lhs_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1329
 *         else:
 *             lhs_expr = Affine_Expression(self)
 *             lhs = (<Affine_Expression> lhs_expr).thisptr             # <<<<<<<<<<<<<<
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 */
    __pyx_t_2 = __pyx_v_lhs_expr->thisptr;
    __pyx_v_lhs = __pyx_t_2;
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":1330
 *             lhs_expr = Affine_Expression(self)
 *             lhs = (<Affine_Expression> lhs_expr).thisptr
 *         result_expr = Affine_Expression()             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         cdef Affine_Expr* temp
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1333
 *         cdef Var* vv
 *         cdef Affine_Expr* temp
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1334
 *         cdef Affine_Expr* temp
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other             # <<<<<<<<<<<<<<
 *             vv = other_var.thisptr
 *             temp = new Affine_Expr(self.thisptr[0])
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1335
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 *             vv = other_var.thisptr             # <<<<<<<<<<<<<<
 *             temp = new Affine_Expr(self.thisptr[0])
 *             self.thisptr[0] += vv[0]  # There is an oddity where adding affine expression and variable doesn't work. Error: Cannot assign type 'Var &' to 'Affine_Expr &'
 */
    __pyx_t_4 = __pyx_v_other_var->thisptr;
    __pyx_v_vv = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":1336
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 *             temp = new Affine_Expr(self.thisptr[0])             # <<<<<<<<<<<<<<
 *             self.thisptr[0] += vv[0]  # There is an oddity where adding affine expression and variable doesn't work. Error: Cannot assign type 'Var &' to 'Affine_Expr &'
 *             # This means to add via PPlite add methods, we need to use += operator (it is what works okay!). This modifies self's data.
 */
    __pyx_v_temp = new pplite::Affine_Expr((__pyx_v_self->thisptr[0]));

    /* "pplite/linear_algebra.pyx":1337
 *             vv = other_var.thisptr
 *             temp = new Affine_Expr(self.thisptr[0])
 *             self.thisptr[0] += vv[0]  # There is an oddity where adding affine expression and variable doesn't work. Error: Cannot assign type 'Var &' to 'Affine_Expr &'             # <<<<<<<<<<<<<<
 *             # This means to add via PPlite add methods, we need to use += operator (it is what works okay!). This modifies self's data.
 *             # To ensure that the orginal affine epxresion's data is unmodified, tempoary store data to save it.
 */
    (__pyx_v_self->thisptr[0]) += (__pyx_v_vv[0]);

    /* "pplite/linear_algebra.pyx":1340
 *             # This means to add via PPlite add methods, we need to use += operator (it is what works okay!). This modifies self's data.
 *             # To ensure that the orginal affine epxresion's data is unmodified, tempoary store data to save it.
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])             # <<<<<<<<<<<<<<
 *             self.thisptr = temp # fix, save old data, then reset data to correct place. Remove if affine expression addition ever is fixed.
 *             return result_expr
 */
    __pyx_v_result_expr->thisptr = new pplite::Affine_Expr((__pyx_v_self->thisptr[0]));

    /* "pplite/linear_algebra.pyx":1341
 *             # To ensure that the orginal affine epxresion's data is unmodified, tempoary store data to save it.
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 *             self.thisptr = temp # fix, save old data, then reset data to correct place. Remove if affine expression addition ever is fixed.             # <<<<<<<<<<<<<<
 *             return result_expr
 *         cdef Linear_Expr* e1
 */
    __pyx_v_self->thisptr = __pyx_v_temp;

    /* "pplite/linear_algebra.pyx":1342
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 *             self.thisptr = temp # fix, save old data, then reset data to correct place. Remove if affine expression addition ever is fixed.
 *             return result_expr             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
    __pyx_r = ((PyObject *)__pyx_v_result_expr);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1333
 *         cdef Var* vv
 *         cdef Affine_Expr* temp
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":1344
 *             return result_expr
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1345
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):
 *             other_lin = <Linear_Expression> other             # <<<<<<<<<<<<<<
 *             e1 = other_lin.thisptr
 *             self.thisptr[0] += e1[0]
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_lin = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1346
 *         if isinstance(other, Linear_Expression):
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0] += e1[0]
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 */
    __pyx_t_5 = __pyx_v_other_lin->thisptr;
    __pyx_v_e1 = __pyx_t_5;

    /* "pplite/linear_algebra.pyx":1347
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr
 *             self.thisptr[0] += e1[0]             # <<<<<<<<<<<<<<
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 *             return result_expr
 */
    (__pyx_v_self->thisptr[0]) += (__pyx_v_e1[0]);

    /* "pplite/linear_algebra.pyx":1348
 *             e1 = other_lin.thisptr
 *             self.thisptr[0] += e1[0]
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])             # <<<<<<<<<<<<<<
 *             return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr.
 */
    __pyx_v_result_expr->thisptr = new pplite::Affine_Expr((__pyx_v_self->thisptr[0]));

    /* "pplite/linear_algebra.pyx":1349
 *             self.thisptr[0] += e1[0]
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 *             return result_expr             # <<<<<<<<<<<<<<
 *         # TO DO: Make int add explicit. For now, converting to affine expr.
 *         if isinstance(other, Affine_Expression):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
    __pyx_r = ((PyObject *)__pyx_v_result_expr);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1344
 *             return result_expr
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":1351
 *             return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr.
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1352
 *         # TO DO: Make int add explicit. For now, converting to affine expr.
 *         if isinstance(other, Affine_Expression):
 *             rhs = (<Affine_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             rhs_expr = Affine_Expression(other)
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_rhs = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1351
 *             return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr.
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 */
    goto __pyx_L6;
  }

  /* "pplite/linear_algebra.pyx":1354
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 *             rhs_expr = Affine_Expression(other)             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> rhs_expr).thisptr
 *         cdef Affine_Expr result
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_rhs_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1355
 *         else:
 *             rhs_expr = Affine_Expression(other)
 *             rhs = (<Affine_Expression> rhs_expr).thisptr             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr result
 *         result = lhs[0] + rhs[0]
 */
    __pyx_t_2 = __pyx_v_rhs_expr->thisptr;
    __pyx_v_rhs = __pyx_t_2;
  }
  __pyx_L6:;

  /* "pplite/linear_algebra.pyx":1357
 *             rhs = (<Affine_Expression> rhs_expr).thisptr
 *         cdef Affine_Expr result
 *         result = lhs[0] + rhs[0]             # <<<<<<<<<<<<<<
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result #could be copying or moving?
 */
  __pyx_v_result = ((__pyx_v_lhs[0]) + (__pyx_v_rhs[0]));

  /* "pplite/linear_algebra.pyx":1358
 *         cdef Affine_Expr result
 *         result = lhs[0] + rhs[0]
 *         result_expr = Affine_Expression()             # <<<<<<<<<<<<<<
 *         result_expr.thisptr[0] = result #could be copying or moving?
 *         return result_expr
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_result_expr, ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1359
 *         result = lhs[0] + rhs[0]
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result #could be copying or moving?             # <<<<<<<<<<<<<<
 *         return result_expr
 * 
 */
  (__pyx_v_result_expr->thisptr[0]) = __pyx_v_result;

  /* "pplite/linear_algebra.pyx":1360
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result #could be copying or moving?
 *         return result_expr             # <<<<<<<<<<<<<<
 * 
 *     def __radd__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
  __pyx_r = ((PyObject *)__pyx_v_result_expr);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1288
 *         return self
 * 
 *     def __add__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Add ``self`` and ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs_expr);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_expr);
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_other_lin);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs_expr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1362
 *         return result_expr
 * 
 *     def __radd__(self, other):             # <<<<<<<<<<<<<<
 *         return self + other
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_29__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_29__radd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__radd__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_28__radd__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_28__radd__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__radd__", 1);

  /* "pplite/linear_algebra.pyx":1363
 * 
 *     def __radd__(self, other):
 *         return self + other             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_self), __pyx_v_other); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1362
 *         return result_expr
 * 
 *     def __radd__(self, other):             # <<<<<<<<<<<<<<
 *         return self + other
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__radd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1365
 *         return self + other
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Subtract ``self`` and ``other``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_31__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_30__sub__, "\n        Subtract ``self`` and ``other``.\n\n        INPUT:\n\n        - ``self``, ``other`` -- anything that can be used to\n          construct a :class:`Affine_Expression`. One of them, not\n          necessarily ``self``, is guaranteed to be a\n          :class:``Affine_Expression``, otherwise Python would not\n          have called this method.\n\n        OUTPUT:\n\n        The sum as a :class:`Affine_Expression`\n\n        Examples:\n\n        >>> from pplite import Affine_Expression, Linear_Expression, Variable\n        >>> x = Variable(0)\n        >>> y = Variable(1)\n        >>> e = x + y + y + y + 1; e\n        x0+3*x1+1\n        >>> e - e\n        0\n        >>> isinstance(e, Affine_Expression)\n        True\n        >>> 12 - e\n        -x0-3*x1+11\n        >>> e - 3 * Variable(3) - 3 * y\n        x0-3*x3+1\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_30__sub__;
#endif
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_31__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_30__sub__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_30__sub__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Affine_Expr *__pyx_v_lhs;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_lhs_expr = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result_expr = NULL;
  pplite::Var *__pyx_v_vv;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  pplite::Linear_Expr *__pyx_v_e1;
  struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *__pyx_v_other_lin = NULL;
  pplite::Affine_Expr *__pyx_v_rhs;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_rhs_expr = NULL;
  pplite::Affine_Expr __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Affine_Expr *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::Var *__pyx_t_4;
  pplite::Linear_Expr *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 1);

  /* "pplite/linear_algebra.pyx":1398
 *         """
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1399
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):
 *             lhs = (<Affine_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             lhs_expr = Affine_Expression(self)
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_lhs = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1398
 *         """
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":1401
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 *             lhs_expr = Affine_Expression(self)             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> lhs_expr).thisptr
 *         result_expr = Affine_Expression()
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_lhs_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1402
 *         else:
 *             lhs_expr = Affine_Expression(self)
 *             lhs = (<Affine_Expression> lhs_expr).thisptr             # <<<<<<<<<<<<<<
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 */
    __pyx_t_2 = __pyx_v_lhs_expr->thisptr;
    __pyx_v_lhs = __pyx_t_2;
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":1403
 *             lhs_expr = Affine_Expression(self)
 *             lhs = (<Affine_Expression> lhs_expr).thisptr
 *         result_expr = Affine_Expression()             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         if isinstance(other, Variable):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1405
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1406
 *         cdef Var* vv
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other             # <<<<<<<<<<<<<<
 *             vv = other_var.thisptr
 *             self.thisptr[0] -= vv[0] #this works wtf. Calling += seems to work in this case but not in other. I'm unsure why.
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1407
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 *             vv = other_var.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0] -= vv[0] #this works wtf. Calling += seems to work in this case but not in other. I'm unsure why.
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.
 */
    __pyx_t_4 = __pyx_v_other_var->thisptr;
    __pyx_v_vv = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":1408
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 *             self.thisptr[0] -= vv[0] #this works wtf. Calling += seems to work in this case but not in other. I'm unsure why.             # <<<<<<<<<<<<<<
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.
 *             return result_expr
 */
    (__pyx_v_self->thisptr[0]) -= (__pyx_v_vv[0]);

    /* "pplite/linear_algebra.pyx":1409
 *             vv = other_var.thisptr
 *             self.thisptr[0] -= vv[0] #this works wtf. Calling += seems to work in this case but not in other. I'm unsure why.
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.             # <<<<<<<<<<<<<<
 *             return result_expr
 *         cdef Linear_Expr* e1
 */
    __pyx_v_result_expr->thisptr = new pplite::Affine_Expr((__pyx_v_self->thisptr[0]));

    /* "pplite/linear_algebra.pyx":1410
 *             self.thisptr[0] -= vv[0] #this works wtf. Calling += seems to work in this case but not in other. I'm unsure why.
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.
 *             return result_expr             # <<<<<<<<<<<<<<
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
    __pyx_r = ((PyObject *)__pyx_v_result_expr);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1405
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":1412
 *             return result_expr
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1413
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):
 *             other_lin = <Linear_Expression> other             # <<<<<<<<<<<<<<
 *             e1 = other_lin.thisptr
 *             self.thisptr[0] -= e1[0]
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_lin = ((struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1414
 *         if isinstance(other, Linear_Expression):
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr[0] -= e1[0]
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 */
    __pyx_t_5 = __pyx_v_other_lin->thisptr;
    __pyx_v_e1 = __pyx_t_5;

    /* "pplite/linear_algebra.pyx":1415
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr
 *             self.thisptr[0] -= e1[0]             # <<<<<<<<<<<<<<
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 *             return result_expr
 */
    (__pyx_v_self->thisptr[0]) -= (__pyx_v_e1[0]);

    /* "pplite/linear_algebra.pyx":1416
 *             e1 = other_lin.thisptr
 *             self.thisptr[0] -= e1[0]
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])             # <<<<<<<<<<<<<<
 *             return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 */
    __pyx_v_result_expr->thisptr = new pplite::Affine_Expr((__pyx_v_self->thisptr[0]));

    /* "pplite/linear_algebra.pyx":1417
 *             self.thisptr[0] -= e1[0]
 *             result_expr.thisptr = new Affine_Expr(self.thisptr[0])
 *             return result_expr             # <<<<<<<<<<<<<<
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
    __pyx_r = ((PyObject *)__pyx_v_result_expr);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1412
 *             return result_expr
 *         cdef Linear_Expr* e1
 *         if isinstance(other, Linear_Expression):             # <<<<<<<<<<<<<<
 *             other_lin = <Linear_Expression> other
 *             e1 = other_lin.thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":1419
 *             return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1420
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):
 *             rhs = (<Affine_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             rhs_expr = Affine_Expression(other)
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_rhs = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1419
 *             return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 */
    goto __pyx_L6;
  }

  /* "pplite/linear_algebra.pyx":1422
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 *             rhs_expr = Affine_Expression(other)             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> rhs_expr).thisptr
 *         cdef Affine_Expr result
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_rhs_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1423
 *         else:
 *             rhs_expr = Affine_Expression(other)
 *             rhs = (<Affine_Expression> rhs_expr).thisptr             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr result
 *         result = lhs[0] - rhs[0]
 */
    __pyx_t_2 = __pyx_v_rhs_expr->thisptr;
    __pyx_v_rhs = __pyx_t_2;
  }
  __pyx_L6:;

  /* "pplite/linear_algebra.pyx":1425
 *             rhs = (<Affine_Expression> rhs_expr).thisptr
 *         cdef Affine_Expr result
 *         result = lhs[0] - rhs[0]             # <<<<<<<<<<<<<<
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result
 */
  __pyx_v_result = ((__pyx_v_lhs[0]) - (__pyx_v_rhs[0]));

  /* "pplite/linear_algebra.pyx":1426
 *         cdef Affine_Expr result
 *         result = lhs[0] - rhs[0]
 *         result_expr = Affine_Expression()             # <<<<<<<<<<<<<<
 *         result_expr.thisptr[0] = result
 *         return result_expr
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_result_expr, ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1427
 *         result = lhs[0] - rhs[0]
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result             # <<<<<<<<<<<<<<
 *         return result_expr
 * 
 */
  (__pyx_v_result_expr->thisptr[0]) = __pyx_v_result;

  /* "pplite/linear_algebra.pyx":1428
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result
 *         return result_expr             # <<<<<<<<<<<<<<
 * 
 *     def __rsub__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
  __pyx_r = ((PyObject *)__pyx_v_result_expr);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1365
 *         return self + other
 * 
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         r"""
 *         Subtract ``self`` and ``other``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs_expr);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_expr);
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_other_lin);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs_expr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1430
 *         return result_expr
 * 
 *     def __rsub__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_33__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_33__rsub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rsub__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_32__rsub__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_32__rsub__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Affine_Expr *__pyx_v_lhs;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_lhs_expr = NULL;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result_expr = NULL;
  pplite::Var *__pyx_v_vv;
  struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_v_other_var = NULL;
  pplite::Affine_Expr *__pyx_v_rhs;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_rhs_expr = NULL;
  pplite::Affine_Expr __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Affine_Expr *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  pplite::Var *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rsub__", 1);

  /* "pplite/linear_algebra.pyx":1432
 *     def __rsub__(self, other):
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1433
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):
 *             lhs = (<Affine_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             lhs_expr = Affine_Expression(self)
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_lhs = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1432
 *     def __rsub__(self, other):
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":1435
 *             lhs = (<Affine_Expression> self).thisptr
 *         else:
 *             lhs_expr = Affine_Expression(self)             # <<<<<<<<<<<<<<
 *             lhs = (<Affine_Expression> lhs_expr).thisptr
 *         result_expr = Affine_Expression()
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_lhs_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1436
 *         else:
 *             lhs_expr = Affine_Expression(self)
 *             lhs = (<Affine_Expression> lhs_expr).thisptr             # <<<<<<<<<<<<<<
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 */
    __pyx_t_2 = __pyx_v_lhs_expr->thisptr;
    __pyx_v_lhs = __pyx_t_2;
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":1437
 *             lhs_expr = Affine_Expression(self)
 *             lhs = (<Affine_Expression> lhs_expr).thisptr
 *         result_expr = Affine_Expression()             # <<<<<<<<<<<<<<
 *         cdef Var* vv
 *         if isinstance(other, Variable):
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1439
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Variable); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1440
 *         cdef Var* vv
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other             # <<<<<<<<<<<<<<
 *             vv = other_var.thisptr
 *             result_expr.thisptr = new Affine_Expr(vv[0] - self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.
 */
    __pyx_t_3 = __pyx_v_other;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_other_var = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1441
 *         if isinstance(other, Variable):
 *             other_var = <Variable> other
 *             vv = other_var.thisptr             # <<<<<<<<<<<<<<
 *             result_expr.thisptr = new Affine_Expr(vv[0] - self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.
 *             return result_expr
 */
    __pyx_t_4 = __pyx_v_other_var->thisptr;
    __pyx_v_vv = __pyx_t_4;

    /* "pplite/linear_algebra.pyx":1442
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 *             result_expr.thisptr = new Affine_Expr(vv[0] - self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.             # <<<<<<<<<<<<<<
 *             return result_expr
 *         # fix this.
 */
    __pyx_v_result_expr->thisptr = new pplite::Affine_Expr(((__pyx_v_vv[0]) - (__pyx_v_self->thisptr[0])));

    /* "pplite/linear_algebra.pyx":1443
 *             vv = other_var.thisptr
 *             result_expr.thisptr = new Affine_Expr(vv[0] - self.thisptr[0]) #should I modify in place or just create a new object. I'm unsure of design choice here.
 *             return result_expr             # <<<<<<<<<<<<<<
 *         # fix this.
 *         # cdef Linear_Expr* e1
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
    __pyx_r = ((PyObject *)__pyx_v_result_expr);
    goto __pyx_L0;

    /* "pplite/linear_algebra.pyx":1439
 *         result_expr = Affine_Expression()
 *         cdef Var* vv
 *         if isinstance(other, Variable):             # <<<<<<<<<<<<<<
 *             other_var = <Variable> other
 *             vv = other_var.thisptr
 */
  }

  /* "pplite/linear_algebra.pyx":1454
 *         #     return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1455
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):
 *             rhs = (<Affine_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *         else:
 *             rhs_expr = Affine_Expression(other)
 */
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_rhs = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1454
 *         #     return result_expr
 *         # TO DO: Make int add explicit. For now, converting to affine expr. b.c we either have an int or affine_expr here.
 *         if isinstance(other, Affine_Expression):             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 */
    goto __pyx_L5;
  }

  /* "pplite/linear_algebra.pyx":1457
 *             rhs = (<Affine_Expression> other).thisptr
 *         else:
 *             rhs_expr = Affine_Expression(other)             # <<<<<<<<<<<<<<
 *             rhs = (<Affine_Expression> rhs_expr).thisptr
 *         cdef Affine_Expr result
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression), __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_rhs_expr = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pplite/linear_algebra.pyx":1458
 *         else:
 *             rhs_expr = Affine_Expression(other)
 *             rhs = (<Affine_Expression> rhs_expr).thisptr             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr result
 *         result = rhs[0] - lhs[0]
 */
    __pyx_t_2 = __pyx_v_rhs_expr->thisptr;
    __pyx_v_rhs = __pyx_t_2;
  }
  __pyx_L5:;

  /* "pplite/linear_algebra.pyx":1460
 *             rhs = (<Affine_Expression> rhs_expr).thisptr
 *         cdef Affine_Expr result
 *         result = rhs[0] - lhs[0]             # <<<<<<<<<<<<<<
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result
 */
  __pyx_v_result = ((__pyx_v_rhs[0]) - (__pyx_v_lhs[0]));

  /* "pplite/linear_algebra.pyx":1461
 *         cdef Affine_Expr result
 *         result = rhs[0] - lhs[0]
 *         result_expr = Affine_Expression()             # <<<<<<<<<<<<<<
 *         result_expr.thisptr[0] = result
 *         return result_expr
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_result_expr, ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1462
 *         result = rhs[0] - lhs[0]
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result             # <<<<<<<<<<<<<<
 *         return result_expr
 * 
 */
  (__pyx_v_result_expr->thisptr[0]) = __pyx_v_result;

  /* "pplite/linear_algebra.pyx":1463
 *         result_expr = Affine_Expression()
 *         result_expr.thisptr[0] = result
 *         return result_expr             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result_expr);
  __pyx_r = ((PyObject *)__pyx_v_result_expr);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1430
 *         return result_expr
 * 
 *     def __rsub__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr* lhs
 *         if isinstance(self, Affine_Expression):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__rsub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_lhs_expr);
  __Pyx_XDECREF((PyObject *)__pyx_v_result_expr);
  __Pyx_XDECREF((PyObject *)__pyx_v_other_var);
  __Pyx_XDECREF((PyObject *)__pyx_v_rhs_expr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1465
 *         return result_expr
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_35__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_35__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_34__mul__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_34__mul__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Affine_Expr *__pyx_v_a;
  PyObject *__pyx_v_c = NULL;
  pplite::FLINT_Integer __pyx_v_cc;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Affine_Expr *__pyx_t_2;
  pplite::FLINT_Integer __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 1);

  /* "pplite/linear_algebra.pyx":1467
 *     def __mul__(self, other):
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             a = (<Affine_Expression> self).thisptr
 *             c = other
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1468
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):
 *             a = (<Affine_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             c = other
 *         else:
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_a = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1469
 *         if isinstance(self, Linear_Expression):
 *             a = (<Affine_Expression> self).thisptr
 *             c = other             # <<<<<<<<<<<<<<
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 */
    __Pyx_INCREF(__pyx_v_other);
    __pyx_v_c = __pyx_v_other;

    /* "pplite/linear_algebra.pyx":1467
 *     def __mul__(self, other):
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             a = (<Affine_Expression> self).thisptr
 *             c = other
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":1472
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             a = (<Affine_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_a = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1473
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             a = (<Affine_Expression> other).thisptr
 *             c = self             # <<<<<<<<<<<<<<
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Affine_Expression result = Linear_Expression()
 */
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_v_c = ((PyObject *)__pyx_v_self);
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":1474
 *             a = (<Affine_Expression> other).thisptr
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)             # <<<<<<<<<<<<<<
 *         cdef Affine_Expression result = Linear_Expression()
 *         result.thisptr[0] = a[0] * cc
 */
  __pyx_t_3 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1474, __pyx_L1_error)
  __pyx_v_cc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/linear_algebra.pyx":1475
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Affine_Expression result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr[0] = a[0] * cc
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression)))) __PYX_ERR(0, 1475, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":1476
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Affine_Expression result = Linear_Expression()
 *         result.thisptr[0] = a[0] * cc             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  (__pyx_v_result->thisptr[0]) = ((__pyx_v_a[0]) * __pyx_v_cc);

  /* "pplite/linear_algebra.pyx":1477
 *         cdef Affine_Expression result = Linear_Expression()
 *         result.thisptr[0] = a[0] * cc
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __rmul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1465
 *         return result_expr
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1479
 *         return result
 * 
 *     def __rmul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_37__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_37__rmul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__rmul__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_36__rmul__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_36__rmul__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other) {
  pplite::Affine_Expr *__pyx_v_a;
  PyObject *__pyx_v_c = NULL;
  pplite::FLINT_Integer __pyx_v_cc;
  struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  pplite::Affine_Expr *__pyx_t_2;
  pplite::FLINT_Integer __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__rmul__", 1);

  /* "pplite/linear_algebra.pyx":1481
 *     def __rmul__(self, other):
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             a = (<Affine_Expression> self).thisptr
 *             c = other
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression); 
  if (__pyx_t_1) {

    /* "pplite/linear_algebra.pyx":1482
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):
 *             a = (<Affine_Expression> self).thisptr             # <<<<<<<<<<<<<<
 *             c = other
 *         else:
 */
    __pyx_t_2 = __pyx_v_self->thisptr;
    __pyx_v_a = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1483
 *         if isinstance(self, Linear_Expression):
 *             a = (<Affine_Expression> self).thisptr
 *             c = other             # <<<<<<<<<<<<<<
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 */
    __Pyx_INCREF(__pyx_v_other);
    __pyx_v_c = __pyx_v_other;

    /* "pplite/linear_algebra.pyx":1481
 *     def __rmul__(self, other):
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):             # <<<<<<<<<<<<<<
 *             a = (<Affine_Expression> self).thisptr
 *             c = other
 */
    goto __pyx_L3;
  }

  /* "pplite/linear_algebra.pyx":1486
 *         else:
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             a = (<Affine_Expression> other).thisptr             # <<<<<<<<<<<<<<
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_other)->thisptr;
    __pyx_v_a = __pyx_t_2;

    /* "pplite/linear_algebra.pyx":1487
 *             # NOTE: this code path will only be executed when compiled with cython < 3.0.0
 *             a = (<Affine_Expression> other).thisptr
 *             c = self             # <<<<<<<<<<<<<<
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Affine_Expression result = Linear_Expression()
 */
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_v_c = ((PyObject *)__pyx_v_self);
  }
  __pyx_L3:;

  /* "pplite/linear_algebra.pyx":1488
 *             a = (<Affine_Expression> other).thisptr
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)             # <<<<<<<<<<<<<<
 *         cdef Affine_Expression result = Linear_Expression()
 *         result.thisptr[0] = a[0] * cc
 */
  __pyx_t_3 = __pyx_f_6pplite_14linear_algebra_Python_int_to_FLINT_Integer(__pyx_v_c); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1488, __pyx_L1_error)
  __pyx_v_cc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "pplite/linear_algebra.pyx":1489
 *             c = self
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Affine_Expression result = Linear_Expression()             # <<<<<<<<<<<<<<
 *         result.thisptr[0] = a[0] * cc
 *         return result
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression)))) __PYX_ERR(0, 1489, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pplite/linear_algebra.pyx":1490
 *         cdef FLINT_Integer cc = Python_int_to_FLINT_Integer(c)
 *         cdef Affine_Expression result = Linear_Expression()
 *         result.thisptr[0] = a[0] * cc             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  (__pyx_v_result->thisptr[0]) = ((__pyx_v_a[0]) * __pyx_v_cc);

  /* "pplite/linear_algebra.pyx":1491
 *         cdef Affine_Expression result = Linear_Expression()
 *         result.thisptr[0] = a[0] * cc
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1479
 *         return result
 * 
 *     def __rmul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Affine_Expr* a
 *         if isinstance(self, Linear_Expression):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__rmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1493
 *         return result
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         neg_assign(self.thisptr[0])
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_39__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_39__neg__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_38__neg__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_38__neg__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__", 1);

  /* "pplite/linear_algebra.pyx":1494
 * 
 *     def __neg__(self):
 *         neg_assign(self.thisptr[0])             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  pplite::neg_assign((__pyx_v_self->thisptr[0]));

  /* "pplite/linear_algebra.pyx":1495
 *     def __neg__(self):
 *         neg_assign(self.thisptr[0])
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __pos__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1493
 *         return result
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         neg_assign(self.thisptr[0])
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1497
 *         return self
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_41__pos__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_41__pos__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_40__pos__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_40__pos__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pos__", 1);

  /* "pplite/linear_algebra.pyx":1498
 * 
 *     def __pos__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1497
 *         return self
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pplite/linear_algebra.pyx":1500
 *         return self
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         """
 *         Construct :class:`Constraint`s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_43__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_43__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 1500, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_42__richcmp__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_DECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_42__richcmp__(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 1);

  /* "pplite/linear_algebra.pyx":1508
 *         >>> from pplite import Variable
 *         """
 *         return _make_Constraint_from_richcmp(self, other, op)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pplite_10constraint__make_Constraint_from_richcmp(((PyObject *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pplite/linear_algebra.pyx":1500
 *         return self
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         """
 *         Construct :class:`Constraint`s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_45__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_44__reduce_cython__, "Affine_Expression.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_45__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_45__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_44__reduce_cython__};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_45__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_44__reduce_cython__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_44__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_thisptr_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_47__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pplite_14linear_algebra_17Affine_Expression_46__setstate_cython__, "Affine_Expression.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_47__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_47__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_46__setstate_cython__};
static PyObject *__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_47__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pplite_14linear_algebra_17Affine_Expression_46__setstate_cython__(((struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pplite_14linear_algebra_17Affine_Expression_46__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self_thisptr_cannot_be_converted, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pplite.linear_algebra.Affine_Expression.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

#if CYTHON_USE_FREELISTS
static struct __pyx_obj_6pplite_14linear_algebra_Variable *__pyx_freelist_6pplite_14linear_algebra_Variable[128];
static int __pyx_freecount_6pplite_14linear_algebra_Variable = 0;
#endif

static PyObject *__pyx_tp_new_6pplite_14linear_algebra_Variable(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_freecount_6pplite_14linear_algebra_Variable > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pplite_14linear_algebra_Variable)) & (int)(!__Pyx_PyType_HasFeature(t, (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE))))) {
    o = (PyObject*)__pyx_freelist_6pplite_14linear_algebra_Variable[--__pyx_freecount_6pplite_14linear_algebra_Variable];
    memset(o, 0, sizeof(struct __pyx_obj_6pplite_14linear_algebra_Variable));
    (void) PyObject_INIT(o, t);
  } else
  #endif
  {
    if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
      o = (*t->tp_alloc)(t, 0);
    } else {
      o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
    }
    if (unlikely(!o)) return 0;
  }
  #endif
  if (unlikely(__pyx_pw_6pplite_14linear_algebra_8Variable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pplite_14linear_algebra_Variable(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pplite_14linear_algebra_Variable) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pplite_14linear_algebra_8Variable_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_freecount_6pplite_14linear_algebra_Variable < 128) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pplite_14linear_algebra_Variable)) & (int)(!__Pyx_PyType_HasFeature(Py_TYPE(o), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE))))) {
    __pyx_freelist_6pplite_14linear_algebra_Variable[__pyx_freecount_6pplite_14linear_algebra_Variable++] = ((struct __pyx_obj_6pplite_14linear_algebra_Variable *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static CYTHON_INLINE PyObject *__pyx_nb_add_6pplite_14linear_algebra_Variable_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_6pplite_14linear_algebra_Variable(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_6pplite_14linear_algebra_Variable)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Variable);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_8Variable_15__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_6pplite_14linear_algebra_Variable)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Variable);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_8Variable_17__radd__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_6pplite_14linear_algebra_Variable_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_6pplite_14linear_algebra_Variable(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_6pplite_14linear_algebra_Variable)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Variable);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_8Variable_19__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_6pplite_14linear_algebra_Variable)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Variable);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_8Variable_21__rsub__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_6pplite_14linear_algebra_Variable_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_6pplite_14linear_algebra_Variable(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_6pplite_14linear_algebra_Variable)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Variable);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_8Variable_23__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_6pplite_14linear_algebra_Variable)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Variable);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_8Variable_25__rmul__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_specialmethod___pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__(self);
}

static PyMethodDef __pyx_methods_6pplite_14linear_algebra_Variable[] = {
  {"id", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_7id, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_6id},
  {"space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_9space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_8space_dimension},
  {"swap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_11swap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_10swap},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__, METH_NOARGS|METH_COEXIST, __pyx_doc_6pplite_14linear_algebra_8Variable_12__repr__},
  {"__radd__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_8Variable_17__radd__, METH_O|METH_COEXIST, 0},
  {"__rsub__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_8Variable_21__rsub__, METH_O|METH_COEXIST, 0},
  {"__rmul__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_8Variable_25__rmul__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_33__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_32__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_8Variable_35__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_8Variable_34__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pplite_14linear_algebra_Variable_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pplite_14linear_algebra_Variable},
  {Py_tp_repr, (void *)__pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__},
  {Py_nb_add, (void *)__pyx_nb_add_6pplite_14linear_algebra_Variable},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_6pplite_14linear_algebra_Variable},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_6pplite_14linear_algebra_Variable},
  {Py_nb_negative, (void *)__pyx_pw_6pplite_14linear_algebra_8Variable_29__neg__},
  {Py_nb_positive, (void *)__pyx_pw_6pplite_14linear_algebra_8Variable_27__pos__},
  {Py_tp_hash, (void *)__pyx_pw_6pplite_14linear_algebra_8Variable_5__hash__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Wrapper for PPLites's ``Var`` class.\n\n    INPUT:\n\n    - ``i`` -- integer. The index of the axis.\n\n    OUTPUT:\n\n    A :class:`Variable`\n\n    Examples:\n\n    >>> from pplite import Variable\n    >>> x = Variable(123)\n    >>> x.id()\n    123\n    >>> x\n    x123\n\n    Note that the \"meaning\" of an object of the class Variable is completely\n    specified by the integer index provided to its constructor: be careful not\n    to be mislead by C++ language variable names. For instance, in the following\n    example the linear expressions ``e1`` and ``e2`` are equivalent, since the\n    two variables ``x`` and ``z`` denote the same Cartesian axis:\n\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> z = Variable(0)\n    >>> e1 = x + y; e1\n    x0+x1\n    >>> e2 = y + z; e2\n    x0+x1\n    >>> e1 - e2\n    0\n    ")},
  {Py_tp_richcompare, (void *)__pyx_pw_6pplite_14linear_algebra_8Variable_31__richcmp__},
  {Py_tp_methods, (void *)__pyx_methods_6pplite_14linear_algebra_Variable},
  {Py_tp_new, (void *)__pyx_tp_new_6pplite_14linear_algebra_Variable},
  {0, 0},
};
static PyType_Spec __pyx_type_6pplite_14linear_algebra_Variable_spec = {
  "pplite.linear_algebra.Variable",
  sizeof(struct __pyx_obj_6pplite_14linear_algebra_Variable),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pplite_14linear_algebra_Variable_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Variable = {
  __pyx_nb_add_6pplite_14linear_algebra_Variable, /*nb_add*/
  __pyx_nb_subtract_6pplite_14linear_algebra_Variable, /*nb_subtract*/
  __pyx_nb_multiply_6pplite_14linear_algebra_Variable, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_6pplite_14linear_algebra_8Variable_29__neg__, /*nb_negative*/
  __pyx_pw_6pplite_14linear_algebra_8Variable_27__pos__, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_6pplite_14linear_algebra_Variable = {
  PyVarObject_HEAD_INIT(0, 0)
  "pplite.linear_algebra.""Variable", /*tp_name*/
  sizeof(struct __pyx_obj_6pplite_14linear_algebra_Variable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pplite_14linear_algebra_Variable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pplite_14linear_algebra_8Variable_13__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Variable, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6pplite_14linear_algebra_8Variable_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Wrapper for PPLites's ``Var`` class.\n\n    INPUT:\n\n    - ``i`` -- integer. The index of the axis.\n\n    OUTPUT:\n\n    A :class:`Variable`\n\n    Examples:\n\n    >>> from pplite import Variable\n    >>> x = Variable(123)\n    >>> x.id()\n    123\n    >>> x\n    x123\n\n    Note that the \"meaning\" of an object of the class Variable is completely\n    specified by the integer index provided to its constructor: be careful not\n    to be mislead by C++ language variable names. For instance, in the following\n    example the linear expressions ``e1`` and ``e2`` are equivalent, since the\n    two variables ``x`` and ``z`` denote the same Cartesian axis:\n\n    >>> x = Variable(0)\n    >>> y = Variable(1)\n    >>> z = Variable(0)\n    >>> e1 = x + y; e1\n    x0+x1\n    >>> e2 = y + z; e2\n    x0+x1\n    >>> e1 - e2\n    0\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6pplite_14linear_algebra_8Variable_31__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pplite_14linear_algebra_Variable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pplite_14linear_algebra_Variable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pplite_14linear_algebra_Linear_Expression(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pplite_14linear_algebra_Linear_Expression(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pplite_14linear_algebra_Linear_Expression) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static CYTHON_INLINE PyObject *__pyx_nb_add_6pplite_14linear_algebra_Linear_Expression_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_6pplite_14linear_algebra_Linear_Expression(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_6pplite_14linear_algebra_Linear_Expression)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_25__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_6pplite_14linear_algebra_Linear_Expression)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_27__radd__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_6pplite_14linear_algebra_Linear_Expression_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_6pplite_14linear_algebra_Linear_Expression(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_6pplite_14linear_algebra_Linear_Expression)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_29__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_6pplite_14linear_algebra_Linear_Expression)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_31__rsub__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_6pplite_14linear_algebra_Linear_Expression_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_6pplite_14linear_algebra_Linear_Expression(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_6pplite_14linear_algebra_Linear_Expression)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_33__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_6pplite_14linear_algebra_Linear_Expression)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Linear_Expression);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_35__rmul__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_specialmethod___pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__(self);
}

static PyMethodDef __pyx_methods_6pplite_14linear_algebra_Linear_Expression[] = {
  {"space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_7space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_6space_dimension},
  {"set_space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_9set_space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_8set_space_dimension},
  {"coefficient", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_11coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_10coefficient},
  {"set_coefficient", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_13set_coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_12set_coefficient},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__, METH_NOARGS|METH_COEXIST, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_14__repr__},
  {"swap_space_dimensions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_17swap_space_dimensions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_16swap_space_dimensions},
  {"shift_space_dimensions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_19shift_space_dimensions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_18shift_space_dimensions},
  {"all_homogeneous_terms_are_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_21all_homogeneous_terms_are_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_20all_homogeneous_terms_are_zero},
  {"is_equal_to", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_23is_equal_to, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_22is_equal_to},
  {"__radd__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_27__radd__, METH_O|METH_COEXIST, 0},
  {"__rsub__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_31__rsub__, METH_O|METH_COEXIST, 0},
  {"__rmul__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_35__rmul__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_43__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_42__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_45__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_44__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pplite_14linear_algebra_Linear_Expression_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pplite_14linear_algebra_Linear_Expression},
  {Py_tp_repr, (void *)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__},
  {Py_nb_add, (void *)__pyx_nb_add_6pplite_14linear_algebra_Linear_Expression},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_6pplite_14linear_algebra_Linear_Expression},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_6pplite_14linear_algebra_Linear_Expression},
  {Py_nb_negative, (void *)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_37__neg__},
  {Py_nb_positive, (void *)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_39__pos__},
  {Py_tp_hash, (void *)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_5__hash__},
  {Py_tp_doc, (void *)PyDoc_STR("Linear_Expression(*args)\n\n    Wrapper for PPLite's ``Linear_Expr`` class.\n\n    This class might more aptly be described as linear form rather than a linear expression. \n    For translation purposes, the class is named linear Expression to align with \n    the orignal pplite code and ppl.\n\n    INPUT:\n\n    The constructor accepts zero, one, or two arguments.\n\n    If there are two arguments ``Linear_Expression(a,b)``, they are\n    interpreted as\n\n    - ``a`` -- a :class:`Linear_Expression`.\n\n    - ``b`` -- an positve integer. The space dimension of a linear form.\n\n    A single argument ``Linear_Expression(arg)`` is interpreted as\n\n    - ``arg`` -- something that determines a linear\n      expression. Possibilities are:\n\n      * a :class:`Variable`: The linear expression given by that\n        variable.\n\n      * a :class:`Linear_Expression`: The copy constructor.\n\n      * an integer: Constructs the 0 linear expression for space dimension of the integer.\n\n    No argument is the default constructor and returns the zero linear\n    expression.\n\n    OUTPUT:\n\n    A :class:`Linear_Expression`\n\n    Examples:\n\n    >>> from pplite import Variable, Linear_Expression\n\n    >>> e = -3*Variable(1) + Variable(7); e\n    -3*x1+x7\n    >>> isinstance(e, Linear_Expression)\n    True\n    >>> e.space_dimension()\n    8\n    >>> e_2 = Linear_Expression(e, 20); e_2\n    -3*x1+x7\n    >>> e_2.space_dimension()\n    20\n    >>> Linear_Expression()\n    0\n    >>> e = Linear_Expression(5); e\n    0\n    >>> e.space_dimension()\n    5\n    >>> e = Linear_Expression(Variable(2)); e\n    x2\n    >>> x = Variable(123)\n    >>> y = Variable(321)\n    >>> expr = x+y\n    >>> expr\n    x123+x321\n    >>> expr.coefficient(x)\n    mpz(1)\n    >>> expr.coefficient(Variable(124))\n    mpz(0)\n\n    String, rationals and floating point types are accepted as long as they\n    represent exact integers:\n    ")},
  {Py_tp_richcompare, (void *)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_41__richcmp__},
  {Py_tp_methods, (void *)__pyx_methods_6pplite_14linear_algebra_Linear_Expression},
  {Py_tp_init, (void *)__pyx_pw_6pplite_14linear_algebra_17Linear_Expression_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6pplite_14linear_algebra_Linear_Expression},
  {0, 0},
};
static PyType_Spec __pyx_type_6pplite_14linear_algebra_Linear_Expression_spec = {
  "pplite.linear_algebra.Linear_Expression",
  sizeof(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pplite_14linear_algebra_Linear_Expression_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Linear_Expression = {
  __pyx_nb_add_6pplite_14linear_algebra_Linear_Expression, /*nb_add*/
  __pyx_nb_subtract_6pplite_14linear_algebra_Linear_Expression, /*nb_subtract*/
  __pyx_nb_multiply_6pplite_14linear_algebra_Linear_Expression, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_37__neg__, /*nb_negative*/
  __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_39__pos__, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_6pplite_14linear_algebra_Linear_Expression = {
  PyVarObject_HEAD_INIT(0, 0)
  "pplite.linear_algebra.""Linear_Expression", /*tp_name*/
  sizeof(struct __pyx_obj_6pplite_14linear_algebra_Linear_Expression), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pplite_14linear_algebra_Linear_Expression, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_15__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Linear_Expression, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("Linear_Expression(*args)\n\n    Wrapper for PPLite's ``Linear_Expr`` class.\n\n    This class might more aptly be described as linear form rather than a linear expression. \n    For translation purposes, the class is named linear Expression to align with \n    the orignal pplite code and ppl.\n\n    INPUT:\n\n    The constructor accepts zero, one, or two arguments.\n\n    If there are two arguments ``Linear_Expression(a,b)``, they are\n    interpreted as\n\n    - ``a`` -- a :class:`Linear_Expression`.\n\n    - ``b`` -- an positve integer. The space dimension of a linear form.\n\n    A single argument ``Linear_Expression(arg)`` is interpreted as\n\n    - ``arg`` -- something that determines a linear\n      expression. Possibilities are:\n\n      * a :class:`Variable`: The linear expression given by that\n        variable.\n\n      * a :class:`Linear_Expression`: The copy constructor.\n\n      * an integer: Constructs the 0 linear expression for space dimension of the integer.\n\n    No argument is the default constructor and returns the zero linear\n    expression.\n\n    OUTPUT:\n\n    A :class:`Linear_Expression`\n\n    Examples:\n\n    >>> from pplite import Variable, Linear_Expression\n\n    >>> e = -3*Variable(1) + Variable(7); e\n    -3*x1+x7\n    >>> isinstance(e, Linear_Expression)\n    True\n    >>> e.space_dimension()\n    8\n    >>> e_2 = Linear_Expression(e, 20); e_2\n    -3*x1+x7\n    >>> e_2.space_dimension()\n    20\n    >>> Linear_Expression()\n    0\n    >>> e = Linear_Expression(5); e\n    0\n    >>> e.space_dimension()\n    5\n    >>> e = Linear_Expression(Variable(2)); e\n    x2\n    >>> x = Variable(123)\n    >>> y = Variable(321)\n    >>> expr = x+y\n    >>> expr\n    x123+x321\n    >>> expr.coefficient(x)\n    mpz(1)\n    >>> expr.coefficient(Variable(124))\n    mpz(0)\n\n    String, rationals and floating point types are accepted as long as they\n    represent exact integers:\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_41__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pplite_14linear_algebra_Linear_Expression, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6pplite_14linear_algebra_17Linear_Expression_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pplite_14linear_algebra_Linear_Expression, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pplite_14linear_algebra_Affine_Expression(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pplite_14linear_algebra_Affine_Expression(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pplite_14linear_algebra_Affine_Expression) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static CYTHON_INLINE PyObject *__pyx_nb_add_6pplite_14linear_algebra_Affine_Expression_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_add : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_add);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_add_6pplite_14linear_algebra_Affine_Expression(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_add == &__pyx_nb_add_6pplite_14linear_algebra_Affine_Expression)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_27__add__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_add == &__pyx_nb_add_6pplite_14linear_algebra_Affine_Expression)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_29__radd__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_subtract_6pplite_14linear_algebra_Affine_Expression_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_subtract : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_subtract);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_subtract_6pplite_14linear_algebra_Affine_Expression(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_subtract == &__pyx_nb_subtract_6pplite_14linear_algebra_Affine_Expression)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_31__sub__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_subtract == &__pyx_nb_subtract_6pplite_14linear_algebra_Affine_Expression)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_33__rsub__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static CYTHON_INLINE PyObject *__pyx_nb_multiply_6pplite_14linear_algebra_Affine_Expression_maybe_call_slot(PyTypeObject* type, PyObject *left, PyObject *right ) {
    binaryfunc slot;
#if CYTHON_USE_TYPE_SLOTS || PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
    slot = type->tp_as_number ? type->tp_as_number->nb_multiply : NULL;
#else
    slot = (binaryfunc) PyType_GetSlot(type, Py_nb_multiply);
#endif
    return slot ? slot(left, right ) : __Pyx_NewRef(Py_NotImplemented);
}
static PyObject *__pyx_nb_multiply_6pplite_14linear_algebra_Affine_Expression(PyObject *left, PyObject *right ) {
    int maybe_self_is_left, maybe_self_is_right = 0;
    maybe_self_is_left = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(left)->tp_as_number && Py_TYPE(left)->tp_as_number->nb_multiply == &__pyx_nb_multiply_6pplite_14linear_algebra_Affine_Expression)
#endif
            || __Pyx_TypeCheck(left, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
    if (maybe_self_is_left) {
        PyObject *res;
        res = __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_35__mul__(left, right);
        if (res != Py_NotImplemented) return res;
        Py_DECREF(res);
    }
    maybe_self_is_right = Py_TYPE(left) == Py_TYPE(right)
#if CYTHON_USE_TYPE_SLOTS
            || (Py_TYPE(right)->tp_as_number && Py_TYPE(right)->tp_as_number->nb_multiply == &__pyx_nb_multiply_6pplite_14linear_algebra_Affine_Expression)
#endif
            || PyType_IsSubtype(Py_TYPE(right), __pyx_ptype_6pplite_14linear_algebra_Affine_Expression);
    if (maybe_self_is_right) {
        return __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_37__rmul__(right, left);
    }
    return __Pyx_NewRef(Py_NotImplemented);
}



static PyObject *__pyx_specialmethod___pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__(self);
}

static PyMethodDef __pyx_methods_6pplite_14linear_algebra_Affine_Expression[] = {
  {"space_dimension", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_7space_dimension, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_6space_dimension},
  {"linear_form", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_9linear_form, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_8linear_form},
  {"inhomogeneous_term", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_11inhomogeneous_term, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_10inhomogeneous_term},
  {"coefficient", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_13coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_12coefficient},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__, METH_NOARGS|METH_COEXIST, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_14__repr__},
  {"all_terms_are_zero", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_17all_terms_are_zero, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_16all_terms_are_zero},
  {"is_equal_to", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_19is_equal_to, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_18is_equal_to},
  {"m_swap", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_21m_swap, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_20m_swap},
  {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_23normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_22normalize},
  {"sign_normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_25sign_normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_24sign_normalize},
  {"__radd__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_29__radd__, METH_O|METH_COEXIST, 0},
  {"__rsub__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_33__rsub__, METH_O|METH_COEXIST, 0},
  {"__rmul__", (PyCFunction)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_37__rmul__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_45__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_44__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_47__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_46__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pplite_14linear_algebra_Affine_Expression_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pplite_14linear_algebra_Affine_Expression},
  {Py_tp_repr, (void *)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__},
  {Py_nb_add, (void *)__pyx_nb_add_6pplite_14linear_algebra_Affine_Expression},
  {Py_nb_subtract, (void *)__pyx_nb_subtract_6pplite_14linear_algebra_Affine_Expression},
  {Py_nb_multiply, (void *)__pyx_nb_multiply_6pplite_14linear_algebra_Affine_Expression},
  {Py_nb_negative, (void *)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_39__neg__},
  {Py_nb_positive, (void *)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_41__pos__},
  {Py_tp_hash, (void *)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_5__hash__},
  {Py_tp_doc, (void *)PyDoc_STR("Affine_Expression(*args)\n\n    Wrapper for PPLite's ``Affine_Expr`` class.\n\n    Note, this behaves analgolously to ppl's ``Linear_Expression`` class. \n\n    Examples:\n\n    The constructor accepts zero, one, or two arguments.\n\n    If there are two arguments ``Affine_Expression(a,b)``, they are\n    interpreted as\n\n    - ``a`` -- either a dictionary whose indices are space dimension and\n      values are coefficients, an iterable coefficients (e.g. a list or\n      tuple), or an :class:`Linear_Expression`.\n\n    - ``b`` -- an integer. The inhomogeneous term.\n\n    A single argument ``Affine_Expression(arg)`` is interpreted as\n\n    - ``arg`` -- something that determines a affine\n      expression. Possibilities are:\n\n      * a :class:`Affine_Expression`: The copy constructor.\n\n      * an integer: Constructs the constant affine expression.\n\n    No argument is the default constructor and returns the zero affine\n    expression.\n\n    OUTPUT:\n\n    A :class:`Affine_Expression`\n\n    Examples:\n\n    >>> from pplite import Variable, Linear_Expression, Affine_Expression\n\n    >>> e = Variable(2) - 3*Variable(4)\n    >>> isinstance(e, Linear_Expression)\n    True\n    >>> a = Affine_Expression(e, 7); a\n    x2-3*x4+7\n    >>> Affine_Expression()\n    0\n    >>> -a\n    -x2+3*x4-7\n    ")},
  {Py_tp_richcompare, (void *)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_43__richcmp__},
  {Py_tp_methods, (void *)__pyx_methods_6pplite_14linear_algebra_Affine_Expression},
  {Py_tp_init, (void *)__pyx_pw_6pplite_14linear_algebra_17Affine_Expression_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_6pplite_14linear_algebra_Affine_Expression},
  {0, 0},
};
static PyType_Spec __pyx_type_6pplite_14linear_algebra_Affine_Expression_spec = {
  "pplite.linear_algebra.Affine_Expression",
  sizeof(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pplite_14linear_algebra_Affine_Expression_slots,
};
#else

static PyNumberMethods __pyx_tp_as_number_Affine_Expression = {
  __pyx_nb_add_6pplite_14linear_algebra_Affine_Expression, /*nb_add*/
  __pyx_nb_subtract_6pplite_14linear_algebra_Affine_Expression, /*nb_subtract*/
  __pyx_nb_multiply_6pplite_14linear_algebra_Affine_Expression, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_39__neg__, /*nb_negative*/
  __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_41__pos__, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_bool*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_6pplite_14linear_algebra_Affine_Expression = {
  PyVarObject_HEAD_INIT(0, 0)
  "pplite.linear_algebra.""Affine_Expression", /*tp_name*/
  sizeof(struct __pyx_obj_6pplite_14linear_algebra_Affine_Expression), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pplite_14linear_algebra_Affine_Expression, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_15__repr__, /*tp_repr*/
  &__pyx_tp_as_number_Affine_Expression, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("Affine_Expression(*args)\n\n    Wrapper for PPLite's ``Affine_Expr`` class.\n\n    Note, this behaves analgolously to ppl's ``Linear_Expression`` class. \n\n    Examples:\n\n    The constructor accepts zero, one, or two arguments.\n\n    If there are two arguments ``Affine_Expression(a,b)``, they are\n    interpreted as\n\n    - ``a`` -- either a dictionary whose indices are space dimension and\n      values are coefficients, an iterable coefficients (e.g. a list or\n      tuple), or an :class:`Linear_Expression`.\n\n    - ``b`` -- an integer. The inhomogeneous term.\n\n    A single argument ``Affine_Expression(arg)`` is interpreted as\n\n    - ``arg`` -- something that determines a affine\n      expression. Possibilities are:\n\n      * a :class:`Affine_Expression`: The copy constructor.\n\n      * an integer: Constructs the constant affine expression.\n\n    No argument is the default constructor and returns the zero affine\n    expression.\n\n    OUTPUT:\n\n    A :class:`Affine_Expression`\n\n    Examples:\n\n    >>> from pplite import Variable, Linear_Expression, Affine_Expression\n\n    >>> e = Variable(2) - 3*Variable(4)\n    >>> isinstance(e, Linear_Expression)\n    True\n    >>> a = Affine_Expression(e, 7); a\n    x2-3*x4+7\n    >>> Affine_Expression()\n    0\n    >>> -a\n    -x2+3*x4-7\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_43__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pplite_14linear_algebra_Affine_Expression, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_6pplite_14linear_algebra_17Affine_Expression_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pplite_14linear_algebra_Affine_Expression, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
    {&__pyx_kp_u_Add_self_and_other_INPUT_self_o, __pyx_k_Add_self_and_other_INPUT_self_o, sizeof(__pyx_k_Add_self_and_other_INPUT_self_o), 0, 1, 0, 0},
    {&__pyx_kp_u_Add_self_and_other_INPUT_self_o_2, __pyx_k_Add_self_and_other_INPUT_self_o_2, sizeof(__pyx_k_Add_self_and_other_INPUT_self_o_2), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression, __pyx_k_Affine_Expression, sizeof(__pyx_k_Affine_Expression), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression___add___line_1, __pyx_k_Affine_Expression___add___line_1, sizeof(__pyx_k_Affine_Expression___add___line_1), 0, 1, 0, 0},
    {&__pyx_kp_u_Affine_Expression___hash___line, __pyx_k_Affine_Expression___hash___line, sizeof(__pyx_k_Affine_Expression___hash___line), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression___reduce_cytho, __pyx_k_Affine_Expression___reduce_cytho, sizeof(__pyx_k_Affine_Expression___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression___repr___line, __pyx_k_Affine_Expression___repr___line, sizeof(__pyx_k_Affine_Expression___repr___line), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression___setstate_cyt, __pyx_k_Affine_Expression___setstate_cyt, sizeof(__pyx_k_Affine_Expression___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression___sub___line_1, __pyx_k_Affine_Expression___sub___line_1, sizeof(__pyx_k_Affine_Expression___sub___line_1), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression_all_terms_are, __pyx_k_Affine_Expression_all_terms_are, sizeof(__pyx_k_Affine_Expression_all_terms_are), 0, 0, 1, 1},
    {&__pyx_n_s_Affine_Expression_coefficient, __pyx_k_Affine_Expression_coefficient, sizeof(__pyx_k_Affine_Expression_coefficient), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression_coefficient_li, __pyx_k_Affine_Expression_coefficient_li, sizeof(__pyx_k_Affine_Expression_coefficient_li), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression_inhomogeneous, __pyx_k_Affine_Expression_inhomogeneous, sizeof(__pyx_k_Affine_Expression_inhomogeneous), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression_inhomogeneous_2, __pyx_k_Affine_Expression_inhomogeneous_2, sizeof(__pyx_k_Affine_Expression_inhomogeneous_2), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression_is_equal_to, __pyx_k_Affine_Expression_is_equal_to, sizeof(__pyx_k_Affine_Expression_is_equal_to), 0, 0, 1, 1},
    {&__pyx_n_s_Affine_Expression_linear_form, __pyx_k_Affine_Expression_linear_form, sizeof(__pyx_k_Affine_Expression_linear_form), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression_linear_form_li, __pyx_k_Affine_Expression_linear_form_li, sizeof(__pyx_k_Affine_Expression_linear_form_li), 0, 1, 0, 0},
    {&__pyx_n_s_Affine_Expression_m_swap, __pyx_k_Affine_Expression_m_swap, sizeof(__pyx_k_Affine_Expression_m_swap), 0, 0, 1, 1},
    {&__pyx_n_s_Affine_Expression_normalize, __pyx_k_Affine_Expression_normalize, sizeof(__pyx_k_Affine_Expression_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_Affine_Expression_sign_normalize, __pyx_k_Affine_Expression_sign_normalize, sizeof(__pyx_k_Affine_Expression_sign_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_Affine_Expression_space_dimensio, __pyx_k_Affine_Expression_space_dimensio, sizeof(__pyx_k_Affine_Expression_space_dimensio), 0, 0, 1, 1},
    {&__pyx_kp_u_Affine_Expression_space_dimensio_2, __pyx_k_Affine_Expression_space_dimensio_2, sizeof(__pyx_k_Affine_Expression_space_dimensio_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Affine_Expression_unhashable, __pyx_k_Affine_Expression_unhashable, sizeof(__pyx_k_Affine_Expression_unhashable), 0, 1, 0, 0},
    {&__pyx_kp_u_Cannot_initialize_with_more_than, __pyx_k_Cannot_initialize_with_more_than, sizeof(__pyx_k_Cannot_initialize_with_more_than), 0, 1, 0, 0},
    {&__pyx_kp_u_Initalizing_with_one_argument_re, __pyx_k_Initalizing_with_one_argument_re, sizeof(__pyx_k_Initalizing_with_one_argument_re), 0, 1, 0, 0},
    {&__pyx_kp_u_Initalizing_with_one_argument_re_2, __pyx_k_Initalizing_with_one_argument_re_2, sizeof(__pyx_k_Initalizing_with_one_argument_re_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Integer_Conversion_Failed, __pyx_k_Integer_Conversion_Failed, sizeof(__pyx_k_Integer_Conversion_Failed), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression, __pyx_k_Linear_Expression, sizeof(__pyx_k_Linear_Expression), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression___add___line_7, __pyx_k_Linear_Expression___add___line_7, sizeof(__pyx_k_Linear_Expression___add___line_7), 0, 1, 0, 0},
    {&__pyx_kp_u_Linear_Expression___hash___line, __pyx_k_Linear_Expression___hash___line, sizeof(__pyx_k_Linear_Expression___hash___line), 0, 1, 0, 0},
    {&__pyx_kp_u_Linear_Expression___mul___line_9, __pyx_k_Linear_Expression___mul___line_9, sizeof(__pyx_k_Linear_Expression___mul___line_9), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression___reduce_cytho, __pyx_k_Linear_Expression___reduce_cytho, sizeof(__pyx_k_Linear_Expression___reduce_cytho), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression___repr___line, __pyx_k_Linear_Expression___repr___line, sizeof(__pyx_k_Linear_Expression___repr___line), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression___setstate_cyt, __pyx_k_Linear_Expression___setstate_cyt, sizeof(__pyx_k_Linear_Expression___setstate_cyt), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression___sub___line_8, __pyx_k_Linear_Expression___sub___line_8, sizeof(__pyx_k_Linear_Expression___sub___line_8), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_all_homogeneou, __pyx_k_Linear_Expression_all_homogeneou, sizeof(__pyx_k_Linear_Expression_all_homogeneou), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_all_homogeneou_2, __pyx_k_Linear_Expression_all_homogeneou_2, sizeof(__pyx_k_Linear_Expression_all_homogeneou_2), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_coefficient, __pyx_k_Linear_Expression_coefficient, sizeof(__pyx_k_Linear_Expression_coefficient), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_coefficient_li, __pyx_k_Linear_Expression_coefficient_li, sizeof(__pyx_k_Linear_Expression_coefficient_li), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_is_equal_to, __pyx_k_Linear_Expression_is_equal_to, sizeof(__pyx_k_Linear_Expression_is_equal_to), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_is_equal_to_li, __pyx_k_Linear_Expression_is_equal_to_li, sizeof(__pyx_k_Linear_Expression_is_equal_to_li), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_set_coefficien, __pyx_k_Linear_Expression_set_coefficien, sizeof(__pyx_k_Linear_Expression_set_coefficien), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_set_coefficien_2, __pyx_k_Linear_Expression_set_coefficien_2, sizeof(__pyx_k_Linear_Expression_set_coefficien_2), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_set_space_dime, __pyx_k_Linear_Expression_set_space_dime, sizeof(__pyx_k_Linear_Expression_set_space_dime), 0, 0, 1, 1},
    {&__pyx_n_s_Linear_Expression_shift_space_di, __pyx_k_Linear_Expression_shift_space_di, sizeof(__pyx_k_Linear_Expression_shift_space_di), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_shift_space_di_2, __pyx_k_Linear_Expression_shift_space_di_2, sizeof(__pyx_k_Linear_Expression_shift_space_di_2), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_space_dimensio, __pyx_k_Linear_Expression_space_dimensio, sizeof(__pyx_k_Linear_Expression_space_dimensio), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_space_dimensio_2, __pyx_k_Linear_Expression_space_dimensio_2, sizeof(__pyx_k_Linear_Expression_space_dimensio_2), 0, 1, 0, 0},
    {&__pyx_n_s_Linear_Expression_swap_space_dim, __pyx_k_Linear_Expression_swap_space_dim, sizeof(__pyx_k_Linear_Expression_swap_space_dim), 0, 0, 1, 1},
    {&__pyx_kp_u_Linear_Expression_swap_space_dim_2, __pyx_k_Linear_Expression_swap_space_dim_2, sizeof(__pyx_k_Linear_Expression_swap_space_dim_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Linear_Expression_unhashable, __pyx_k_Linear_Expression_unhashable, sizeof(__pyx_k_Linear_Expression_unhashable), 0, 1, 0, 0},
    {&__pyx_kp_u_Multiply_self_with_other_INPUT, __pyx_k_Multiply_self_with_other_INPUT, sizeof(__pyx_k_Multiply_self_with_other_INPUT), 0, 1, 0, 0},
    {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
    {&__pyx_kp_u_Return_a_string_representation, __pyx_k_Return_a_string_representation, sizeof(__pyx_k_Return_a_string_representation), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_a_string_representation_2, __pyx_k_Return_a_string_representation_2, sizeof(__pyx_k_Return_a_string_representation_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_self_as_class_Linear_Exp, __pyx_k_Return_self_as_class_Linear_Exp, sizeof(__pyx_k_Return_self_as_class_Linear_Exp), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_self_as_class_Linear_Exp_2, __pyx_k_Return_self_as_class_Linear_Exp_2, sizeof(__pyx_k_Return_self_as_class_Linear_Exp_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_coefficient_of_the_v, __pyx_k_Return_the_coefficient_of_the_v, sizeof(__pyx_k_Return_the_coefficient_of_the_v), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_coefficient_of_the_v_2, __pyx_k_Return_the_coefficient_of_the_v_2, sizeof(__pyx_k_Return_the_coefficient_of_the_v_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_difference_self_othe, __pyx_k_Return_the_difference_self_othe, sizeof(__pyx_k_Return_the_difference_self_othe), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_dimension_of_the_vec, __pyx_k_Return_the_dimension_of_the_vec, sizeof(__pyx_k_Return_the_dimension_of_the_vec), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_dimension_of_the_vec_2, __pyx_k_Return_the_dimension_of_the_vec_2, sizeof(__pyx_k_Return_the_dimension_of_the_vec_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_dimension_of_the_vec_3, __pyx_k_Return_the_dimension_of_the_vec_3, sizeof(__pyx_k_Return_the_dimension_of_the_vec_3), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_index_of_the_Cartesi, __pyx_k_Return_the_index_of_the_Cartesi, sizeof(__pyx_k_Return_the_index_of_the_Cartesi), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_product_self_other_I, __pyx_k_Return_the_product_self_other_I, sizeof(__pyx_k_Return_the_product_self_other_I), 0, 1, 0, 0},
    {&__pyx_kp_u_Return_the_sum_self_other_INPUT, __pyx_k_Return_the_sum_self_other_INPUT, sizeof(__pyx_k_Return_the_sum_self_other_INPUT), 0, 1, 0, 0},
    {&__pyx_kp_u_Returns_the_inhogogenous_term_o, __pyx_k_Returns_the_inhogogenous_term_o, sizeof(__pyx_k_Returns_the_inhogogenous_term_o), 0, 1, 0, 0},
    {&__pyx_kp_u_Returns_the_linear_form_of_the, __pyx_k_Returns_the_linear_form_of_the, sizeof(__pyx_k_Returns_the_linear_form_of_the), 0, 1, 0, 0},
    {&__pyx_kp_u_Set_the_i_th_coefficient_to_n_I, __pyx_k_Set_the_i_th_coefficient_to_n_I, sizeof(__pyx_k_Set_the_i_th_coefficient_to_n_I), 0, 1, 0, 0},
    {&__pyx_kp_u_Shift_by_n_the_coefficients_of, __pyx_k_Shift_by_n_the_coefficients_of, sizeof(__pyx_k_Shift_by_n_the_coefficients_of), 0, 1, 0, 0},
    {&__pyx_kp_u_Subtract_self_and_other_INPUT_s, __pyx_k_Subtract_self_and_other_INPUT_s, sizeof(__pyx_k_Subtract_self_and_other_INPUT_s), 0, 1, 0, 0},
    {&__pyx_kp_u_Subtract_self_and_other_INPUT_s_2, __pyx_k_Subtract_self_and_other_INPUT_s_2, sizeof(__pyx_k_Subtract_self_and_other_INPUT_s_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Swaps_the_coefficients_of_v1_an, __pyx_k_Swaps_the_coefficients_of_v1_an, sizeof(__pyx_k_Swaps_the_coefficients_of_v1_an), 0, 1, 0, 0},
    {&__pyx_kp_u_Test_equality_with_another_line, __pyx_k_Test_equality_with_another_line, sizeof(__pyx_k_Test_equality_with_another_line), 0, 1, 0, 0},
    {&__pyx_kp_u_Test_if_self_is_a_constant_line, __pyx_k_Test_if_self_is_a_constant_line, sizeof(__pyx_k_Test_if_self_is_a_constant_line), 0, 1, 0, 0},
    {&__pyx_kp_u_Tests_import_pplite_hash_pplite, __pyx_k_Tests_import_pplite_hash_pplite, sizeof(__pyx_k_Tests_import_pplite_hash_pplite), 0, 1, 0, 0},
    {&__pyx_kp_u_Tests_import_pplite_hash_pplite_2, __pyx_k_Tests_import_pplite_hash_pplite_2, sizeof(__pyx_k_Tests_import_pplite_hash_pplite_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Tests_import_pplite_hash_pplite_3, __pyx_k_Tests_import_pplite_hash_pplite_3, sizeof(__pyx_k_Tests_import_pplite_hash_pplite_3), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_Variable, __pyx_k_Variable, sizeof(__pyx_k_Variable), 0, 0, 1, 1},
    {&__pyx_kp_u_Variable___add___line_164, __pyx_k_Variable___add___line_164, sizeof(__pyx_k_Variable___add___line_164), 0, 1, 0, 0},
    {&__pyx_kp_u_Variable___hash___line_99, __pyx_k_Variable___hash___line_99, sizeof(__pyx_k_Variable___hash___line_99), 0, 1, 0, 0},
    {&__pyx_kp_u_Variable___mul___line_255, __pyx_k_Variable___mul___line_255, sizeof(__pyx_k_Variable___mul___line_255), 0, 1, 0, 0},
    {&__pyx_kp_u_Variable___neg___line_314, __pyx_k_Variable___neg___line_314, sizeof(__pyx_k_Variable___neg___line_314), 0, 1, 0, 0},
    {&__pyx_kp_u_Variable___pos___line_296, __pyx_k_Variable___pos___line_296, sizeof(__pyx_k_Variable___pos___line_296), 0, 1, 0, 0},
    {&__pyx_n_s_Variable___reduce_cython, __pyx_k_Variable___reduce_cython, sizeof(__pyx_k_Variable___reduce_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_Variable___repr___line_147, __pyx_k_Variable___repr___line_147, sizeof(__pyx_k_Variable___repr___line_147), 0, 1, 0, 0},
    {&__pyx_n_s_Variable___setstate_cython, __pyx_k_Variable___setstate_cython, sizeof(__pyx_k_Variable___setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_Variable___sub___line_214, __pyx_k_Variable___sub___line_214, sizeof(__pyx_k_Variable___sub___line_214), 0, 1, 0, 0},
    {&__pyx_n_s_Variable_id, __pyx_k_Variable_id, sizeof(__pyx_k_Variable_id), 0, 0, 1, 1},
    {&__pyx_kp_u_Variable_id_line_111, __pyx_k_Variable_id_line_111, sizeof(__pyx_k_Variable_id_line_111), 0, 1, 0, 0},
    {&__pyx_n_s_Variable_space_dimension, __pyx_k_Variable_space_dimension, sizeof(__pyx_k_Variable_space_dimension), 0, 0, 1, 1},
    {&__pyx_kp_u_Variable_space_dimension_line_12, __pyx_k_Variable_space_dimension_line_12, sizeof(__pyx_k_Variable_space_dimension_line_12), 0, 1, 0, 0},
    {&__pyx_n_s_Variable_swap, __pyx_k_Variable_swap, sizeof(__pyx_k_Variable_swap), 0, 0, 1, 1},
    {&__pyx_kp_u_Variable_unhashable, __pyx_k_Variable_unhashable, sizeof(__pyx_k_Variable_unhashable), 0, 1, 0, 0},
    {&__pyx_kp_u_We_done_goofed_no_acceptable_inp, __pyx_k_We_done_goofed_no_acceptable_inp, sizeof(__pyx_k_We_done_goofed_no_acceptable_inp), 0, 1, 0, 0},
    {&__pyx_n_s__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 0, 1, 1},
    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
    {&__pyx_n_s_all_homogeneous_terms_are_zero, __pyx_k_all_homogeneous_terms_are_zero, sizeof(__pyx_k_all_homogeneous_terms_are_zero), 0, 0, 1, 1},
    {&__pyx_n_s_all_terms_are_zero, __pyx_k_all_terms_are_zero, sizeof(__pyx_k_all_terms_are_zero), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_coefficient, __pyx_k_coefficient, sizeof(__pyx_k_coefficient), 0, 0, 1, 1},
    {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
    {&__pyx_kp_u_d_2, __pyx_k_d_2, sizeof(__pyx_k_d_2), 0, 1, 0, 0},
    {&__pyx_kp_u_d_3, __pyx_k_d_3, sizeof(__pyx_k_d_3), 0, 1, 0, 0},
    {&__pyx_kp_u_d_r, __pyx_k_d_r, sizeof(__pyx_k_d_r), 0, 1, 0, 0},
    {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
    {&__pyx_n_s_ee, __pyx_k_ee, sizeof(__pyx_k_ee), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_n_s_ii, __pyx_k_ii, sizeof(__pyx_k_ii), 0, 0, 1, 1},
    {&__pyx_n_s_inhomogeneous_term, __pyx_k_inhomogeneous_term, sizeof(__pyx_k_inhomogeneous_term), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_equal_to, __pyx_k_is_equal_to, sizeof(__pyx_k_is_equal_to), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_linear_form, __pyx_k_linear_form, sizeof(__pyx_k_linear_form), 0, 0, 1, 1},
    {&__pyx_n_s_m_swap, __pyx_k_m_swap, sizeof(__pyx_k_m_swap), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_nn, __pyx_k_nn, sizeof(__pyx_k_nn), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
    {&__pyx_n_s_pplite_linear_algebra, __pyx_k_pplite_linear_algebra, sizeof(__pyx_k_pplite_linear_algebra), 0, 0, 1, 1},
    {&__pyx_kp_s_pplite_linear_algebra_pyx, __pyx_k_pplite_linear_algebra_pyx, sizeof(__pyx_k_pplite_linear_algebra_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_kp_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 0},
    {&__pyx_kp_u_r_2, __pyx_k_r_2, sizeof(__pyx_k_r_2), 0, 1, 0, 0},
    {&__pyx_kp_u_r_3, __pyx_k_r_3, sizeof(__pyx_k_r_3), 0, 1, 0, 0},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
    {&__pyx_n_s_set_coefficient, __pyx_k_set_coefficient, sizeof(__pyx_k_set_coefficient), 0, 0, 1, 1},
    {&__pyx_n_s_set_space_dimension, __pyx_k_set_space_dimension, sizeof(__pyx_k_set_space_dimension), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shift_space_dimensions, __pyx_k_shift_space_dimensions, sizeof(__pyx_k_shift_space_dimensions), 0, 0, 1, 1},
    {&__pyx_n_s_sign_normalize, __pyx_k_sign_normalize, sizeof(__pyx_k_sign_normalize), 0, 0, 1, 1},
    {&__pyx_n_s_space_dimension, __pyx_k_space_dimension, sizeof(__pyx_k_space_dimension), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_swap, __pyx_k_swap, sizeof(__pyx_k_swap), 0, 0, 1, 1},
    {&__pyx_n_s_swap_space_dimensions, __pyx_k_swap_space_dimensions, sizeof(__pyx_k_swap_space_dimensions), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_v1, __pyx_k_v1, sizeof(__pyx_k_v1), 0, 0, 1, 1},
    {&__pyx_n_s_v2, __pyx_k_v2, sizeof(__pyx_k_v2), 0, 0, 1, 1},
    {&__pyx_n_s_var_1, __pyx_k_var_1, sizeof(__pyx_k_var_1), 0, 0, 1, 1},
    {&__pyx_n_s_var_2, __pyx_k_var_2, sizeof(__pyx_k_var_2), 0, 0, 1, 1},
    {&__pyx_n_s_var_i, __pyx_k_var_i, sizeof(__pyx_k_var_i), 0, 0, 1, 1},
    {&__pyx_n_s_vv, __pyx_k_vv, sizeof(__pyx_k_vv), 0, 0, 1, 1},
    {&__pyx_n_s_vv1, __pyx_k_vv1, sizeof(__pyx_k_vv1), 0, 0, 1, 1},
    {&__pyx_n_s_vv2, __pyx_k_vv2, sizeof(__pyx_k_vv2), 0, 0, 1, 1},
    {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
    {&__pyx_kp_u_x_0, __pyx_k_x_0, sizeof(__pyx_k_x_0), 0, 1, 0, 0},
    {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 38, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 193, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 610, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pplite/linear_algebra.pyx":38
 *         y = <fmpz> integer
 *         return FLINT_Integer(y)
 *     raise ValueError("Integer Conversion Failed")             # <<<<<<<<<<<<<<
 * 
 * @cython.freelist(128)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Integer_Conversion_Failed); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pplite/linear_algebra.pyx":109
 *         TypeError: Variable unhashable
 *         """
 *         raise TypeError('Variable unhashable')             # <<<<<<<<<<<<<<
 * 
 *     def id(self):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Variable_unhashable); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pplite/linear_algebra.pyx":473
 *                 self.thisptr = new Linear_Expr(dim)
 *                 return
 *             raise ValueError("Initalizing with one argument requires either a linear expression, variable, or integer to be passed in.")             # <<<<<<<<<<<<<<
 *         elif len(args) == 0:
 *             self.thisptr = new Linear_Expr()
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Initalizing_with_one_argument_re); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pplite/linear_algebra.pyx":478
 *             return
 *         else:
 *             raise ValueError("Cannot initialize with more than 2 arguments.")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Cannot_initialize_with_more_than); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pplite/linear_algebra.pyx":496
 *         TypeError: Linear_Expression unhashable
 *         """
 *         raise TypeError('Linear_Expression unhashable')             # <<<<<<<<<<<<<<
 * 
 *     def space_dimension(self):
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Linear_Expression_unhashable); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pplite/linear_algebra.pyx":1074
 *             #     #self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *                 # self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *             raise ValueError("We done goofed, no acceptable input here")             # <<<<<<<<<<<<<<
 *         if len(args) == 1:
 *             arg = args[0]
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_We_done_goofed_no_acceptable_inp); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pplite/linear_algebra.pyx":1090
 *                     #     self.thisptr = new Affine_Expr(e.thisptr[0], k)
 *                     #     return
 *             raise ValueError("Initalizing with one argument requires either a affine expression or an integer to be passed in.")             # <<<<<<<<<<<<<<
 *         elif len(args) == 0:
 *             self.thisptr = new Affine_Expr()
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Initalizing_with_one_argument_re_2); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pplite/linear_algebra.pyx":1112
 *         TypeError: Affine_Expression unhashable
 *         """
 *         raise TypeError('Affine_Expression unhashable')             # <<<<<<<<<<<<<<
 * 
 *     def space_dimension(self):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Affine_Expression_unhashable); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pplite/linear_algebra.pyx":111
 *         raise TypeError('Variable unhashable')
 * 
 *     def id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the index of the Cartesian axis associated to the variable.
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_id, 111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 111, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":124
 *         return self.thisptr.id()
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the dimension of the vector space enclosing ``self``.
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_space_dimension, 124, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 124, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":143
 * 
 * # TODO: Add test coverage.
 *     def swap(self, Variable w):             # <<<<<<<<<<<<<<
 *         swap(self.thisptr[0], w.thisptr[0])
 *         return self
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_w); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_swap, 143, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 143, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":498
 *         raise TypeError('Linear_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_space_dimension, 498, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 498, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":525
 *         return self.thisptr.space_dim()
 * 
 *     def set_space_dimension(self, dim_type dim):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_space_dim(dim)
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_dim); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_set_space_dimension, 525, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 525, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":528
 *         self.thisptr.set_space_dim(dim)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */
  __pyx_tuple__22 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_v, __pyx_n_s_vv); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_coefficient, 528, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 528, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":558
 *         return FLINT_Integer_to_Python(self.thisptr.impl()[vv.id()])
 * 
 *     def set_coefficient(self, i, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the ``i``-th coefficient to ``n``.
 */
  __pyx_tuple__24 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_nn, __pyx_n_s_ii, __pyx_n_s_var_i); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_set_coefficient, 558, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 558, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":634
 *         return s
 * 
 *     def swap_space_dimensions(self, v1, v2):             # <<<<<<<<<<<<<<
 *         r"""
 *         Swaps the coefficients of ``v1`` and ``v2``.
 */
  __pyx_tuple__26 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_v1, __pyx_n_s_v2, __pyx_n_s_var_1, __pyx_n_s_var_2, __pyx_n_s_vv1, __pyx_n_s_vv2); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_swap_space_dimensions, 634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 634, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":668
 *         self.thisptr.swap_space_dims(var_1, var_2)
 * 
 *     def shift_space_dimensions(self, v, dim_type n):             # <<<<<<<<<<<<<<
 *         r"""
 *         Shift by ``n`` the coefficients of variables starting from the
 */
  __pyx_tuple__28 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_v, __pyx_n_s_n, __pyx_n_s_vv); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_shift_space_dimensions, 668, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 668, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":713
 *     #     self.thisptr.remove_space_dimensions(V.thisptr[0])
 * 
 *     def all_homogeneous_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_all_homogeneous_terms_are_zero, 713, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 713, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":730
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Linear_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another linear expression.
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_is_equal_to, 730, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 730, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(2, 3, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1114
 *         raise TypeError('Affine_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_space_dimension, 1114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 1114, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1132
 *         return self.thisptr.space_dim()
 * 
 *     def linear_form(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the linear form of the affine expression.
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_e, __pyx_n_s_ee); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_linear_form, 1132, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 1132, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1154
 *         return ee
 * 
 *     def inhomogeneous_term(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the inhogogenous term of an affine expression.
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_c); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_inhomogeneous_term, 1154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 1154, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1175
 *         return FLINT_Integer_to_Python(c)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_coefficient, 1175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1175, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1251
 * 
 * 
 *     def all_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_all_terms_are_zero, 1251, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 1251, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1264
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Affine_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another affine expression.
 */
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_is_equal_to, 1264, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 1264, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1276
 * # TODO: Add tests.
 * 
 *     def m_swap(self, Affine_Expression y):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].m_swap(y.thisptr[0])
 *         return self
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_y); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_m_swap, 1276, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 1276, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1280
 *         return self
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].normalize()
 *         return self
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_normalize, 1280, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 1280, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":1284
 *         return self
 * 
 *     def sign_normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].sign_normalize()
 *         return self
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pplite_linear_algebra_pyx, __pyx_n_s_sign_normalize, 1284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 1284, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6pplite_14linear_algebra_Variable = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pplite_14linear_algebra_Variable_spec, NULL); if (unlikely(!__pyx_ptype_6pplite_14linear_algebra_Variable)) __PYX_ERR(0, 41, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pplite_14linear_algebra_Variable_spec, __pyx_ptype_6pplite_14linear_algebra_Variable) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #else
  __pyx_ptype_6pplite_14linear_algebra_Variable = &__pyx_type_6pplite_14linear_algebra_Variable;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6pplite_14linear_algebra_Variable) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6pplite_14linear_algebra_Variable->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6pplite_14linear_algebra_Variable->tp_dictoffset && __pyx_ptype_6pplite_14linear_algebra_Variable->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6pplite_14linear_algebra_Variable->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__hash__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_4__hash__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_4__hash__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_4__hash__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_4__hash__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_12__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_12__repr__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_12__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_12__repr__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_14__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_14__add__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_14__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_14__add__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_18__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_18__sub__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_18__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_18__sub__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_22__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_22__mul__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_22__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_22__mul__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__pos__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_26__pos__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_26__pos__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_26__pos__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_26__pos__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, "__neg__"); if (unlikely(!wrapper)) __PYX_ERR(0, 41, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_28__neg__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_8Variable_28__neg__.doc = __pyx_doc_6pplite_14linear_algebra_8Variable_28__neg__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_8Variable_28__neg__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Variable, (PyObject *) __pyx_ptype_6pplite_14linear_algebra_Variable) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6pplite_14linear_algebra_Variable) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6pplite_14linear_algebra_Linear_Expression = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pplite_14linear_algebra_Linear_Expression_spec, NULL); if (unlikely(!__pyx_ptype_6pplite_14linear_algebra_Linear_Expression)) __PYX_ERR(0, 370, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pplite_14linear_algebra_Linear_Expression_spec, __pyx_ptype_6pplite_14linear_algebra_Linear_Expression) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  #else
  __pyx_ptype_6pplite_14linear_algebra_Linear_Expression = &__pyx_type_6pplite_14linear_algebra_Linear_Expression;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6pplite_14linear_algebra_Linear_Expression->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6pplite_14linear_algebra_Linear_Expression->tp_dictoffset && __pyx_ptype_6pplite_14linear_algebra_Linear_Expression->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6pplite_14linear_algebra_Linear_Expression->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 370, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression___init__.doc = __pyx_doc_6pplite_14linear_algebra_17Linear_Expression___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression___init__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, "__hash__"); if (unlikely(!wrapper)) __PYX_ERR(0, 370, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_4__hash__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_4__hash__.doc = __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_4__hash__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_4__hash__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(0, 370, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_14__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_14__repr__.doc = __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_14__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_14__repr__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 370, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_24__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_24__add__.doc = __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_24__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_24__add__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 370, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_28__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_28__sub__.doc = __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_28__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_28__sub__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 370, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_32__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_32__mul__.doc = __pyx_doc_6pplite_14linear_algebra_17Linear_Expression_32__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Linear_Expression_32__mul__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Linear_Expression, (PyObject *) __pyx_ptype_6pplite_14linear_algebra_Linear_Expression) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6pplite_14linear_algebra_Linear_Expression) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_6pplite_14linear_algebra_Affine_Expression = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pplite_14linear_algebra_Affine_Expression_spec, NULL); if (unlikely(!__pyx_ptype_6pplite_14linear_algebra_Affine_Expression)) __PYX_ERR(0, 996, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pplite_14linear_algebra_Affine_Expression_spec, __pyx_ptype_6pplite_14linear_algebra_Affine_Expression) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #else
  __pyx_ptype_6pplite_14linear_algebra_Affine_Expression = &__pyx_type_6pplite_14linear_algebra_Affine_Expression;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_6pplite_14linear_algebra_Affine_Expression->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_6pplite_14linear_algebra_Affine_Expression->tp_dictoffset && __pyx_ptype_6pplite_14linear_algebra_Affine_Expression->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_6pplite_14linear_algebra_Affine_Expression->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 996, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression___init__.doc = __pyx_doc_6pplite_14linear_algebra_17Affine_Expression___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression___init__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, "__hash__"); if (unlikely(!wrapper)) __PYX_ERR(0, 996, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_4__hash__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_4__hash__.doc = __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_4__hash__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_4__hash__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(0, 996, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_14__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_14__repr__.doc = __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_14__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_14__repr__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 996, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_26__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_26__add__.doc = __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_26__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_26__add__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 996, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_30__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_30__sub__.doc = __pyx_doc_6pplite_14linear_algebra_17Affine_Expression_30__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pplite_14linear_algebra_17Affine_Expression_30__sub__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Affine_Expression, (PyObject *) __pyx_ptype_6pplite_14linear_algebra_Affine_Expression) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_6pplite_14linear_algebra_Affine_Expression) < 0) __PYX_ERR(0, 996, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("gmpy2"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5gmpy2_5gmpy2_mpz = __Pyx_ImportType_3_0_10(__pyx_t_1, "gmpy2", "mpz", sizeof(MPZ_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(MPZ_Object),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5gmpy2_5gmpy2_mpz) __PYX_ERR(1, 98, __pyx_L1_error)
  __pyx_ptype_5gmpy2_5gmpy2_mpq = __Pyx_ImportType_3_0_10(__pyx_t_1, "gmpy2", "mpq", sizeof(MPQ_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(MPQ_Object),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5gmpy2_5gmpy2_mpq) __PYX_ERR(1, 100, __pyx_L1_error)
  __pyx_ptype_5gmpy2_5gmpy2_mpfr = __Pyx_ImportType_3_0_10(__pyx_t_1, "gmpy2", "mpfr", sizeof(MPFR_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(MPFR_Object),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5gmpy2_5gmpy2_mpfr) __PYX_ERR(1, 102, __pyx_L1_error)
  __pyx_ptype_5gmpy2_5gmpy2_mpc = __Pyx_ImportType_3_0_10(__pyx_t_1, "gmpy2", "mpc", sizeof(MPC_Object), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(MPC_Object),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_5gmpy2_5gmpy2_mpc) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pplite.constraint"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6pplite_10constraint_Constraint = __Pyx_ImportType_3_0_10(__pyx_t_1, "pplite.constraint", "Constraint", sizeof(struct __pyx_obj_6pplite_10constraint_Constraint), __PYX_GET_STRUCT_ALIGNMENT_3_0_10(struct __pyx_obj_6pplite_10constraint_Constraint),__Pyx_ImportType_CheckSize_Warn_3_0_10); if (!__pyx_ptype_6pplite_10constraint_Constraint) __PYX_ERR(3, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("pplite.constraint"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_10(__pyx_t_1, "_make_Constraint_from_richcmp", (void (**)(void))&__pyx_f_6pplite_10constraint__make_Constraint_from_richcmp, "PyObject *(PyObject *, PyObject *, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_linear_algebra(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_linear_algebra},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "linear_algebra",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initlinear_algebra(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initlinear_algebra(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_linear_algebra(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_linear_algebra(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_linear_algebra(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'linear_algebra' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("linear_algebra", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "linear_algebra" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_linear_algebra(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pplite__linear_algebra) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pplite.linear_algebra")) {
      if (unlikely((PyDict_SetItemString(modules, "pplite.linear_algebra", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pplite/linear_algebra.pyx":11
 * # from .integer_conversions cimport FLINT_Integer_to_Python, Python_int_to_FLINT_Integer
 * 
 * import_gmpy2()             # <<<<<<<<<<<<<<
 * 
 * # Note e is reserved for linear expressions, v for variable, a for affine expressions
 */
  __pyx_t_2 = import_gmpy2(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 11, __pyx_L1_error)

  /* "pplite/linear_algebra.pyx":111
 *         raise TypeError('Variable unhashable')
 * 
 *     def id(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the index of the Cartesian axis associated to the variable.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_8Variable_7id, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Variable_id, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, __pyx_n_s_id, __pyx_t_3) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Variable);

  /* "pplite/linear_algebra.pyx":124
 *         return self.thisptr.id()
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Return the dimension of the vector space enclosing ``self``.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_8Variable_9space_dimension, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Variable_space_dimension, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, __pyx_n_s_space_dimension, __pyx_t_3) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Variable);

  /* "pplite/linear_algebra.pyx":143
 * 
 * # TODO: Add test coverage.
 *     def swap(self, Variable w):             # <<<<<<<<<<<<<<
 *         swap(self.thisptr[0], w.thisptr[0])
 *         return self
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_8Variable_11swap, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Variable_swap, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Variable, __pyx_n_s_swap, __pyx_t_3) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Variable);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_8Variable_33__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Variable___reduce_cython, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_8Variable_35__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Variable___setstate_cython, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":498
 *         raise TypeError('Linear_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_7space_dimension, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_space_dimensio, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_space_dimension, __pyx_t_3) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":525
 *         return self.thisptr.space_dim()
 * 
 *     def set_space_dimension(self, dim_type dim):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_space_dim(dim)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_9set_space_dimension, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_set_space_dime, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_set_space_dimension, __pyx_t_3) < 0) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":528
 *         self.thisptr.set_space_dim(dim)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_11coefficient, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_coefficient, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_coefficient, __pyx_t_3) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":558
 *         return FLINT_Integer_to_Python(self.thisptr.impl()[vv.id()])
 * 
 *     def set_coefficient(self, i, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the ``i``-th coefficient to ``n``.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_13set_coefficient, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_set_coefficien, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_set_coefficient, __pyx_t_3) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":634
 *         return s
 * 
 *     def swap_space_dimensions(self, v1, v2):             # <<<<<<<<<<<<<<
 *         r"""
 *         Swaps the coefficients of ``v1`` and ``v2``.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_17swap_space_dimensions, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_swap_space_dim, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_swap_space_dimensions, __pyx_t_3) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":668
 *         self.thisptr.swap_space_dims(var_1, var_2)
 * 
 *     def shift_space_dimensions(self, v, dim_type n):             # <<<<<<<<<<<<<<
 *         r"""
 *         Shift by ``n`` the coefficients of variables starting from the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_19shift_space_dimensions, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_shift_space_di, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_shift_space_dimensions, __pyx_t_3) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":713
 *     #     self.thisptr.remove_space_dimensions(V.thisptr[0])
 * 
 *     def all_homogeneous_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_21all_homogeneous_terms_are_zero, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_all_homogeneou, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_all_homogeneous_terms_are_zero, __pyx_t_3) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "pplite/linear_algebra.pyx":730
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Linear_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another linear expression.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_23is_equal_to, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression_is_equal_to, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Linear_Expression, __pyx_n_s_is_equal_to, __pyx_t_3) < 0) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Linear_Expression);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_43__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression___reduce_cytho, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Linear_Expression_45__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Linear_Expression___setstate_cyt, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1114
 *         raise TypeError('Affine_Expression unhashable')
 * 
 *     def space_dimension(self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the dimension of the vector space necessary for the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_7space_dimension, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_space_dimensio, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_space_dimension, __pyx_t_3) < 0) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1132
 *         return self.thisptr.space_dim()
 * 
 *     def linear_form(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the linear form of the affine expression.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_9linear_form, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_linear_form, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_linear_form, __pyx_t_3) < 0) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1154
 *         return ee
 * 
 *     def inhomogeneous_term(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the inhogogenous term of an affine expression.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_11inhomogeneous_term, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_inhomogeneous, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_inhomogeneous_term, __pyx_t_3) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1175
 *         return FLINT_Integer_to_Python(c)
 * 
 *     def coefficient(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         Return the coefficient of the variable ``v``.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_13coefficient, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_coefficient, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_coefficient, __pyx_t_3) < 0) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1251
 * 
 * 
 *     def all_terms_are_zero(self):             # <<<<<<<<<<<<<<
 *         """
 *         Test if ``self`` is a constant linear expression.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_17all_terms_are_zero, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_all_terms_are, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_all_terms_are_zero, __pyx_t_3) < 0) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1264
 *         return self.thisptr.is_zero()
 * 
 *     def is_equal_to(self, Affine_Expression other):             # <<<<<<<<<<<<<<
 *         """
 *         Test equality with another affine expression.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_19is_equal_to, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_is_equal_to, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_is_equal_to, __pyx_t_3) < 0) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1276
 * # TODO: Add tests.
 * 
 *     def m_swap(self, Affine_Expression y):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].m_swap(y.thisptr[0])
 *         return self
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_21m_swap, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_m_swap, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_m_swap, __pyx_t_3) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1280
 *         return self
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].normalize()
 *         return self
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_23normalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_normalize, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_normalize, __pyx_t_3) < 0) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "pplite/linear_algebra.pyx":1284
 *         return self
 * 
 *     def sign_normalize(self):             # <<<<<<<<<<<<<<
 *         self.thisptr[0].sign_normalize()
 *         return self
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_25sign_normalize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression_sign_normalize, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_6pplite_14linear_algebra_Affine_Expression, __pyx_n_s_sign_normalize, __pyx_t_3) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6pplite_14linear_algebra_Affine_Expression);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_45__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression___reduce_cytho, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.thisptr cannot be converted to a Python object for pickling"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6pplite_14linear_algebra_17Affine_Expression_47__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Affine_Expression___setstate_cyt, NULL, __pyx_n_s_pplite_linear_algebra, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(2, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pplite/linear_algebra.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: libraries = gmp gmpxx pplite m flint
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(29); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___hash___line_99, __pyx_kp_u_Tests_import_pplite_hash_pplite) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable_id_line_111, __pyx_kp_u_Return_the_index_of_the_Cartesi) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable_space_dimension_line_12, __pyx_kp_u_Return_the_dimension_of_the_vec) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___repr___line_147, __pyx_kp_u_Return_a_string_representation) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___add___line_164, __pyx_kp_u_Return_the_sum_self_other_INPUT) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___sub___line_214, __pyx_kp_u_Return_the_difference_self_othe) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___mul___line_255, __pyx_kp_u_Return_the_product_self_other_I) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___pos___line_296, __pyx_kp_u_Return_self_as_class_Linear_Exp) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Variable___neg___line_314, __pyx_kp_u_Return_self_as_class_Linear_Exp_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression___hash___line, __pyx_kp_u_Tests_import_pplite_hash_pplite_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_space_dimensio_2, __pyx_kp_u_Return_the_dimension_of_the_vec_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_coefficient_li, __pyx_kp_u_Return_the_coefficient_of_the_v) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_set_coefficien_2, __pyx_kp_u_Set_the_i_th_coefficient_to_n_I) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression___repr___line, __pyx_kp_u_Return_a_string_representation_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_swap_space_dim_2, __pyx_kp_u_Swaps_the_coefficients_of_v1_an) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_shift_space_di_2, __pyx_kp_u_Shift_by_n_the_coefficients_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_all_homogeneou_2, __pyx_kp_u_Test_if_self_is_a_constant_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression_is_equal_to_li, __pyx_kp_u_Test_equality_with_another_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression___add___line_7, __pyx_kp_u_Add_self_and_other_INPUT_self_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression___sub___line_8, __pyx_kp_u_Subtract_self_and_other_INPUT_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Linear_Expression___mul___line_9, __pyx_kp_u_Multiply_self_with_other_INPUT) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression___hash___line, __pyx_kp_u_Tests_import_pplite_hash_pplite_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression_space_dimensio_2, __pyx_kp_u_Return_the_dimension_of_the_vec_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression_linear_form_li, __pyx_kp_u_Returns_the_linear_form_of_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression_inhomogeneous_2, __pyx_kp_u_Returns_the_inhogogenous_term_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression_coefficient_li, __pyx_kp_u_Return_the_coefficient_of_the_v_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression___repr___line, __pyx_kp_u_Return_a_string_representation_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression___add___line_1, __pyx_kp_u_Add_self_and_other_INPUT_self_o_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Affine_Expression___sub___line_1, __pyx_kp_u_Subtract_self_and_other_INPUT_s_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init pplite.linear_algebra", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pplite.linear_algebra");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 0;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a != b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) != 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 1;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 1;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal != 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a != (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_10
#define __PYX_HAVE_RT_ImportType_3_0_10
static PyTypeObject *__Pyx_ImportType_3_0_10(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_10 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_10 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_10 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE mp_limb_signed_t __Pyx_PyInt_As_mp_limb_signed_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const mp_limb_signed_t neg_one = (mp_limb_signed_t) -1, const_zero = (mp_limb_signed_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(mp_limb_signed_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (mp_limb_signed_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(mp_limb_signed_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) >= 2 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) (((((mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(mp_limb_signed_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) >= 3 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) (((((((mp_limb_signed_t)digits[2]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(mp_limb_signed_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) >= 4 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) (((((((((mp_limb_signed_t)digits[3]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[2]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (mp_limb_signed_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(mp_limb_signed_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(mp_limb_signed_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(mp_limb_signed_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(mp_limb_signed_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(mp_limb_signed_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) (((mp_limb_signed_t)-1)*(((((mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(mp_limb_signed_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) ((((((mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(mp_limb_signed_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) (((mp_limb_signed_t)-1)*(((((((mp_limb_signed_t)digits[2]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(mp_limb_signed_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) ((((((((mp_limb_signed_t)digits[2]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(mp_limb_signed_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) (((mp_limb_signed_t)-1)*(((((((((mp_limb_signed_t)digits[3]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[2]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(mp_limb_signed_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(mp_limb_signed_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(mp_limb_signed_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (mp_limb_signed_t) ((((((((((mp_limb_signed_t)digits[3]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[2]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[1]) << PyLong_SHIFT) | (mp_limb_signed_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(mp_limb_signed_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(mp_limb_signed_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(mp_limb_signed_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(mp_limb_signed_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            mp_limb_signed_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (mp_limb_signed_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (mp_limb_signed_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (mp_limb_signed_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (mp_limb_signed_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (mp_limb_signed_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(mp_limb_signed_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((mp_limb_signed_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(mp_limb_signed_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((mp_limb_signed_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((mp_limb_signed_t) 1) << (sizeof(mp_limb_signed_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (mp_limb_signed_t) -1;
        }
    } else {
        mp_limb_signed_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (mp_limb_signed_t) -1;
        val = __Pyx_PyInt_As_mp_limb_signed_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to mp_limb_signed_t");
    return (mp_limb_signed_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to mp_limb_signed_t");
    return (mp_limb_signed_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__50);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_10
#define __PYX_HAVE_RT_ImportFunction_3_0_10
static int __Pyx_ImportFunction_3_0_10(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
